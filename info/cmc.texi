@c node-name, next, previous, up
@node CREOL Machine Code
@chapter @acronym{CREOL} Machine Code

In this chapter we describe the general structure of the machine in
Maude.  The machine is interpreting the Core @acronym{CREOL} language, which is
mimicked by Maude terms.

Currently, three different interpreters are provided.  The first
interpreter, defined in file @file{creol-interpreter.maude} is
suitable for fine-grained simulation.  The second interpreter, defined
in the file @file{creol-modelchecker.maude}, is suitable for
coarse-grained simulation and model checking.  The third interpreter,
defined in @file{creol-realtime.maude}, is suitable for simulating
programs using the real-time extension (@pxref{Real-time CREOL}).

All interpreters for @acronym{CREOL} programs have a similar interface and
accept the same input terms for classes and objects.  The difference
between the Maude based targets of the compiler (@pxref{Target
Options}) are minimal and distinguished by enabling or disabling
certain transformations.  These transformations can be enabled or
disabled on the command-line (@pxref{Pass Options}).

@menu
* Data Types::          Explanation of data types.
* Configuration::       Data Structures describing configurations.
* Interpreter::         @acronym{CREOL} Interpreter.
* Sort Hierarchy::      Summary of all sorts and how they relate.
* Using CMC::           Some notes on using the model.
@end menu


@node Data Types
@section Data Types

The file @file{datatypes.maude} contains the framework for data type
definitions as well as the definition of the pre-defined data types.

The module @code{CREOL-DATA-SIG} defines the basic features of data
types for the machine.  First, it defines the basic sorts of the
expression language:  Attribute names @code{Aid} and so on ...

In addition, it defines the constant @code{null}, object identities
@code{ob(_)} and Boolean @code{bool(_)}.

Operations are defined in terms of applications, which are given as
@code{Appl} terms.  They are declared as @c
@code{op _(_) : String ExprList -> Appl}.

@menu
* Data Type Signature::          How data types are defined.
* Predefined Data Types::        Predefined data types.
* User Defined Data Types::      How to define new data types.
@end menu


@node Data Type Signature
@subsection Data Type Signature

The module @code{CREOL-DATA-SIG} defines the signature of the
data types and expressions, i.e., it defines a kind of abstract syntax.
It also defines the basic functions defined for @emph{all} data types.

It defines the following sorts:
@table @code
@item Expr
Values of sort @code{Expr} are expressions.  Expressions are either
literals, which is any ground term of sort @code{Data}, variables,
which are of sort @code{Aid}, or applications, which are of sort
@code{Appl}.

@item Data
Values of sort @code{Data} are literals.  @code{Data} is a subsort of
@code{Expr}.

@item Aid
Values of sort @code{Aid} range over the attribute and variable
names.  While the @acronym{CREOL} language uses only lower-case variable names,
the interpreter reserves some other strings for its own purposes.

@item Oid
Values of sort @code{Oid} are the object identifiers.  The sort
@code{Oid} is a subsort of @code{Data}.

@item Label
@anchor{Label} Values of sort @code{Label} are the values of the
labels of asynchronous calls.  They are handles that identify the
call, allowing to wait for the result at the callers location, and
allowing to send the result at the receivers location.  This sort is a
subsort of @code{Data}.

@item Appl
Terms of this sort are function applications.  The sort @code{Appl} is
a subsort of term.  The sort @code{Appl} is a supersort of @code{Data}
(see @pxref{Application} for an explanation).
@end table

Lists of expressions and of data values are defined in this module,
too.  These lists are constructed using the @code{::} operator.  
@table @code
@item ExprList
A possibly empty list of expressions with identity @code{emp}.

@item DataList
A possibly empty list of values with identity @code{emp}.  This sort
is a subsort of @code{ExprList}.

@item NeExprList
A non-empty list of expressions.  This sort is a subsort of
@code{ExprList}.  @code{Expr} is a subsort of this sort.

@item NeDataList
A non-empty list of data.  This sort is a subsort of @code{DataList}.
@code{Data} is a subsort of this sort.
@end table

Furthermore, lists of attribute identifiers can be formed using
@code{,} as a constructor, with identity @code{noAid}.  These lists
occur as lists of parameters or as the left-hand side of assignments.

@table @code
@item AidList
A possibly empty list of @code{Aid}.

@item NeAidList
A non-empty list of @code{Aid}.  This sort is a subsort of
@code{AidList}.  The sort @code{Aid} is a subsort of this sort.
@end table

In addition, this module defines the sort @code{Bool} (@pxref{Boolean}).


@anchor{Application}
@subsubsection Application Terms

At the core of the expression language is function application.  The
machine will maintain all function applications in prenex form, i.e.,
they are declared by the operators
@example
op _(_) : String DataList -> Data .
op _(_) : String ExprList -> Appl [ctor] .
@end example
In order to have a pre-regular model, the sort @code{Data} has to be a
subsort of @code{Appl}.

It is an error if a term @code{S:String(D:DataList)} cannot be reduced
to a @code{Data} value.  This usually occurs if the term is ill-typed,
i.e., we try to add an integer to a Boolean.


@anchor{Reply}
@subsubsection Reply Guard

Guards can be arbitrary Boolean expressions or they can test for the
arrival of a single reply with the syntax @code{?(@var{label})}.


@anchor{Equality}
@subsubsection Equality

Equality (and inequality) is defined for all data types.

@example
  vars D D' : Data .
  eq "=" (D :: D') = bool(D == D') .
  eq "/=" (D :: D') = bool(D =/= D') .
@end example


@node Predefined Data Types
@subsection Predefined Data Types

In this section we describe the pre-defined data types in the virtual
machine, the operations defined on them, and their semantics.

@menu
* Boolean::                     Booleans.
* Integer::                     Integers.
* Float::                       Floats.
* String::                      String.
* List::                        List.
* Set::                         Set.
* Map::                         Map.
* Pair::                        Pair.
* Time and Duration::           Time and Duration.
@end menu


@node Boolean
@subsubsection Boolean

The module @code{CREOL-DATA-SIG} defines Boolean with functions
interpreting them.  A Boolean value is represented by either
@code{bool(true)} or @code{bool(false)} (note the boxing).  The
functions are @code{||}, @code{??}, @code{=>}, @code{^}, and
@code{<=>}.  See @ref{Data Type Bool} for an explanation of the
semantics.


@node Integer
@subsubsection Integer

The integer data type is defined in the module @code{CREOL-DATA-INT}.
Integer values are constructed with
@example
  op int(_) : Int -> Data [ctor] .
@end example
See @ref{Data Type Int} for an explanation of the defined functions and
their semantics.


@node Float
@subsubsection Float

The floating point data type is defined in the module
@code{CREOL-DATA-FLOAT}.  Float values are constructed with
@example
  op float(_) : Float -> Data [ctor] .
@end example
See @ref{Data Type Float} for an explanation of the defined functions
and their semantics.



@node String
@subsubsection String

Strings are defined in the module @code{CREOL-DATA-STRING}.  

Strings are constructed with
@example
  op string(_) : String -> Data [ctor] .
@end example
See @ref{Data Type String} for an explanation of the defined functions
and their semantics.


@node List
@subsubsection List

Lists are defined in the module @code{CREOL-DATA-LIST}.  A list is
constructed by:
@example
  op list(_) : DataList -> Data [ctor] .
@end example
See @ref{Data Type List} for an explanation of the defined functions
and their semantics.


@node Set
@subsubsection Set

Sets are defined in the module @code{CREOL-DATA-SET}.  A set is
constructed by:
@example
  op set(_) : DataSet -> Data [ctor] .
@end example
See @ref{Data Type Set} for an explanation of the defined functions
and their semantics.


@node Map
@subsubsection Map

Sets are defined in the module @code{CREOL-DATA-MAP}.  A map is
constructed by:
@example
  op _|=>_ : Expr Expr -> ExprMap .
  op map(_) : ExprMap -> Expr [ctor] .
@end example
See @ref{Data Type Map} for an explanation of the defined functions
and their semantics.


@node Pair
@subsubsection Pair

Pairs are explained in the next section. @c
@xref{User Defined Data Types}.


@node Time and Duration
@subsubsection Time and Duration

The module @code{CREOL-DATA-TIME} defines the semantics of the two
types @code{Time} and @code{Duration}.  It defines an expression
@code{now} that represents the current time.  The type @code{Duration}
is interpreted by real numbers and reuses the module
@code{CREOL-DATA-FLOAT}.

See @ref{Data Types Time and Duration} for an explanation of the
defined functions and their semantics.

If a model makes use of time, it has to be executed in the timed version
of the interpreter.  The other versions will not advance the value of
@code{now} and do not specify any behaviour for @code{posit}.


@node User Defined Data Types
@subsection Creating Your Own Data Type

The procedure for creating your own data type is illustrated with the
pair type.  The first thing to do is to write a functional module
which defines your new data type as a subsort of @code{Data}.
Actually, we do not need to define another sort, but it is sometimes
useful for debugging.

@example
fmod CREOL-DATA-PAIR is
  extending CREOL-DATA-SIG .
  sort Pair .
  subsort Pair < Data .
@end example

Next we need a constructor for describing values of the new data
type.  Because a pair is a pair of values, we define:

@example
  op pair(_,_) : Data Data -> Pair [ctor] .
@end example

Now we need to define constructors and destructors for pairs.  These
are defined in terms of applications:

@example
  eq "pair" (D :: D') = pair(D, D') .
  eq "fst" (pair(D, D')) = D .
  eq "snd" (pair(D, D')) = D' .
@end example

Note that we only define equations describing the semantics of the
functions ``pair'', ``fst'', and ``snd''.  This finishes the example.
Other functions can be defined, too, in this way.

@example
endfm
@end example

A future version of the compiler may allow the automatic generation of
Maude modules for user-defined data types.


@node Configuration
@section Data Structures Describing Configurations

In this section we explain the data structures forming a state of a
@acronym{CREOL} system.

@menu
* Substitution::        Mapping variables to values.
* CMC Statements::      Statements.
* Classes::             Classes.
* Object::              Objects as processors.
* Message::             Messages exchanged by objects.
* Evaluation::          How expressions are evaluated.
* Configurations::      Combining parts to global states.
@end menu


@node Substitution
@subsection Substitutions

The module @code{CREOL-SUBST} defines a mapping from variable
identifiers (of sort @code{Vid}) to values (of sort @code{Data}).  We
call this mapping a @emph{substitution}.  This substitution is defined
using Maude's @code{MAP} module.  In addition, the following operators
are defined:

@table @code
@item compose(S1, S2)
This function computes the @emph{union} of the substitutions @code{S1}
and @code{S2}, where the bindings in @code{S2} override the bindings
in @code{S1}.

@item S1 :: S2
This function constructs a @emph{union} of @code{S1} and @code{S2},
too.  However, in contrast to @code{compose(S1, S2)}, the union is not
actually computed, but if bindings are accessed, it is first checked,
whether it is defined in @code{S2} and then in @code{S1}.
@end table

Observe, that for all substitutions @code{S1} and @code{S2} and all
attribute identifiers @code{a} we have:
@example
compose(S1, S2)[a] = (S1 :: S2)[a]
@end example

The advantage of @code{_::_} over compose is, that more attributes
are looked up from the local environment and the computation of the
union is costly.



@node CMC Statements
@subsection Statements
@cindex CMC Statement

The module @code{CREOL-STATEMENT} defines the syntax of statements on
the machine level.  Statements are values of the sort @code{Stm}.
Values of the subsort @code{SuspStm} are those statements which can
suspend the current activation (@pxref{Evaluation}).

@table @code
@item skip
This statement does nothing.

@item commit
The statement will commit a transaction and cause a step for the model
checker.  If not model checking, the statement is equivalent to
@code{skip}.

@item release
Unconditionally release the processor and allow another process to be
scheduled.

@item await _
Suspend the process until the expression becomes true.  This form of
await is much more liberal than the one specified for @acronym{CREOL}, because
it allows the test for an reply to occur anywhere in the expression.
We assume that type checking will ensure that each use of a label is
positive.

@item posit _
Used to control time progress in timed analysis.

@item assert _
Check the assertion on the current state.  If it holds, then it behaves
like @code{skip}, otherwise the activity is blocked forever.  Note that
other objects may still continue to compute.

@item assign(_;_)
An assignment statement.

@item new(_;_;_)
An object creation statement.

@item call(_;_;_;_)
An asynchronous call statement.

@item static(_;_;_;_;_)
An asynchronous static call statement.

@item multicast(_;_;_)
Multicast statement.

@item get(_;_)
Receives a reply.  The first argument is an expression that evaluates to
one label.  The second argument is a list of identifiers to which the
returned values will be assigned.
@end table

In addition to these statements, which correspond to the statements of
the programming language, some support statements are defined on the
machine level.  They are not available to the programmer, but are
inserted by the compiler and the run-time system.

@table @code
@item return(_)
This statement is used to generate the reply message.  It takes a list
of expressions as its argument.  This statement is generated by the
compiler as the last statement of each method.  The argument list is
@emph{always} the list of the method's out-parameters.

@item free(_)
This statement is used to notify a queue to discard a reply to a
label, as soon as it arrive.

@item tailcall(_;_;_)
This statement is used to @emph{terminate} the current process and
forward the obligation to return a value to a different object.  The
purpose of this statement is to optimise the number of states in
tail-recursive calls during model checking.

@item statictail(_;_;_;_)
This statement is used to @emph{replace} the current process with a
new process, as indicated by the argument.  The purpose of this
statement is to optimise the number of states in tail-recursive calls
during model checking.

@item $cont
This statement is generated by the run-time system to handle
self-calls.  If an object tries to receive the reply to a call sent to
itself, the object would usually dead-lock.  Instead, control is given
to the process of which the reply is expected.  The @code{cont}
statement is appended as the @emph{last} statement of the invoked
method, with the label as an argument, to indicate that control must
return to the corresponding reply statement.

@item $accept
The accept statement is a place-holder statement which avoids the
release of the processor during binding a tail call.

@item failure_
If an assertion failed, the statement is replaced by a @code{failure}
statement, which always blocks.  The argument is the original expression
that failed.

@item $assign
This statement is generated by the run-time system.  It performs the
actual substitution of the values in assignment statements.

@item $mutlicast
Emit the messages and free their labels in one atomic step, similar to
the @code{$assign} statement.
@end table


@anchor{Compound Statements}
@subsubsection Compound Statements

Composed statements are defined in the module
@code{CREOL-STM-LIST}.

@table @code
@item _;_
Sequential composition of statements with identity @code{noStm}.

@item _[]_
Non-deterministic choice of statements.

@item _|||_
Non-deterministic merge of statements.  See @code{_MERGER_} below.

@item if_th_el_fi
The traditional conditional execution.

@item while_do_od
The traditional while loop.
@end table

In addition, the run-time system may introduce the following
statements:
@table @code
@item _MERGER_
A non-associative merge statement.
@end table


@anchor{Process}
@subsubsection Process

A process is a term of sort @code{Process} and is defined to be a pair
@code{@{ L | S @}} of a substitution @code{L} and a (compound) statement
@code{S}.  The terminated process is also represented as @code{idle}.


@subsubsection Process Queue

A process queue is a @emph{multi-set} of processes, constructed by
@code{_,_}.  The empty process queue is represented by @code{noProc}.


@node Classes
@subsection Classes

Classes are the main building blocks of @acronym{CREOL} programs, and classes
are represented at the CMC level, too.  A class comprises the super
classes, the attributes of a class, and the methods of a class.

@menu
* Inherit::
* Method::
* Class::
@end menu


@node Inherit
@subsubsection Inherit

Classes enumerate their super-classes, as well as the arguments they
provide to the super class during construction.  A term of the form
@code{"C" < @var{exprs} >} indicates that the contextual class inherits
from class @code{"C"} and provides @code{@var{exprs}} as a list of
actual arguments to @code{"C"}'s constructor.

Observe that the run-time system assumes that the class hierarchy is
acyclic.  If this is not the case, object creation may enter an infinite
loop.


@node Method
@subsubsection Method

A method specifies its name, its formal parameters, its local variables,
and its body, i.e., a (compound) statement to execute if the method is
called.

A class may have a multiset of methods, which are separated by @code{,}.


@node Class
@subsubsection Class

A class is a term @code{< @var{C} : Cl | Inh: @var{inh}, Param: @var{par},
Att: @var{att}, Mtds: @var{mtds}, Ocnt: @var{n} >}, where @var{C} is the
name of the class, @var{inh} is a list of classes from which the class
inherits (@pxref{Inherit}), where the empty list is represented by
@code{noInh}, @var{par} is a list of variable names which serve as the
constructor arguments, @var{att} is a substitution
(@pxref{Substitution}), collecting the attributes of @var{C}'s
instances, @var{mtds} is a multiset of methods, with the empty multiset
represented by @code{noMtd}, and @var{n} is a number representing the
number of instances of the class currently created in the system.


@node Object
@subsection Objects

An object is an instance of exactly one class.

Usually, an object is represented by a term @code{< @var{id} : @var{cl}
| Att: @var{A}, Pr: @var{P}, PrQ: @var{Ps}, Lcnt: @var{N} >}, where
@var{id} is a unique identity of the object, @var{cl} is the class of
the object, @var{A} is a substitution (@pxref{Substitution})
representing the valuation of the object's attributes, @var{P} is the
currently active processor, @var{Ps} represents the queue of inactive
processes, and @var{N} is a counter used to generate unique label
values.

The @emph{special} object @code{noObj} is unique, does not have an
identity, and no behaviour.  This object could be considered to be the
value of @code{null}.


@node Message
@subsection Messages

The module @code{CREOL-COMMUNICATION} defines messages and message
queues.  A message has sort @code{Msg}.  Message queues have sort
@code{MMsg} and are multi-sets of terms of sort @code{Body}.


@subsubsection Invocation Message

An invocation message has the format @code{invoc(_,_,_,_)} and is of
sort @code{Body}, where the first parameter is an @emph{object
identity} representing the sender of the message, the second parameter
is a label, which identifies the call, the third parameter is the name
of the method, and the fourth parameter is a list of values
representing the actual arguments.


@subsubsection Completion Message

Conversely, a completion message has the format @code{comp(_,_)} and
is of sort @code{Body}, where the first parameter represents the label
of the call, as supplied by the invocation message, and the second
parameter is a list of values representing the return values.


@subsubsection Messages

Given a message body (a term of sort @code{Body}), a message is formed
as a term @code{_from_to_}, where the first place holds the body, the
second term holds the identity of the sender and the last term holds
the identity of the receiver.


@subsubsection Bind Method Message

A bind method message is used to ask a class for a method body to an
invocation.  It has the format @code{bindMtd(_,_,_,_,_,_)}, where the
parameters have the following meaning:

@enumerate
@item
The first parameter indicates the caller of the method.  This value
will be used to initialise the variable @code{caller} in the bound
method.

@item
The second parameter indicates the identity of the callee.  The
bound process will be inserted into its process queue.

@item
The this parameter indicates the label of the call.  This value is
used to initialise the hidden variable @code{.label} and is used for
sending the completion message.

@item
The fourth parameter indicates the name of the method to bind to.

@item
The fifth parameter is a list of values which represent the actual
arguments to the call.

@item
The sixth parameter is a list of classes in which the method is to be
searched for.
@end enumerate


@subsubsection Bound Method Message

This message is created after the method has successfully been bound.
It has the format @code{boundMtd(_,_)}, where the first parameter
represents the identity of the callee and the second parameter
represents the process to execute.


@node Evaluation
@subsection Evaluation of Expressions

The module @code{CREOL-EVAL} defines expressions and how they are
evaluated, by extending the @code{DATATYPE} module, which defines the
semantics of all (elementary) data types (see @pxref{Data Types}).

The operation @code{eval(e, S)} evaluates an expression @code{e} in
the context @code{S}.  This is essentially done by reducing all
function arguments to data in the hope that an equation defined for
the data types can be applied to obtain the function-application's
value.

The operation @code{evalList} maps @code{eval} on expression lists (of sort
@code{ExprList}) to a list of data (of sort @code{DataList}).


@node Configurations
@subsection Configurations

The module @code{CREOL-CONFIG} defines the sort @code{Configuration}
which defines a global state configuration of a @acronym{CREOL} model.
Essentially, a configuration is a multiset of messages, message
queues, classes, and objects.  The identity is called @code{noConf}.

This module defines an additional sort @code{State} (or reuses it from
@code{MODEL-CHECKER}), which is a parenthesised Configuration, written
@code{@{_@}}.

Finally, the @code{main(_,_,_)} operation is defined, where the first
parameter is a configuration, the second is name of a class,
say @var{C}, and the last parameter is a list of expressions used to
initialise the first instance of the system.  That instance will be an
instance of class @var{C}.


@node Interpreter
@section @acronym{CREOL} Interpreter

The interpreter defines the semantics of @acronym{CREOL} in terms of
rewriting rules.  We refer the reader to the module
@code{CREOL-SIMULATOR} in the file @code{creol-interpreter.maude}
(@pxref{Setting CMC Up}) for the exact definition of the rules.  Here,
we give an overview of the rules and equations.  The names given below
can be used for tracing the rules using Maude's trace facility.

@table @code
@item assignnment
These rules execute assignment statements of the form @code{AL assign
DL}, where @code{AL} and @code{DL} are lists of attributes resp. lists
of data values.  Two auxiliary equations will perform the actual
assignment:  @code{do-static-assign} for assigning to attributes and
@code{do-assign} for assigning to local variables or attributes if no
local variable of the same name is in scope.

@item skip
This rule executes a skip statement.  A skip statement does not change
the state.

@item if-then-else
This rule executes an if-then-else statement.

@item while
This rule executes a while statement.

@item choice
This rule executes a non-deterministic choice statement.

@item merge
@anchor{Merge}
This rule executes a merge (@code{S1 ||| S2}) statement by choosing an
enabled branch and setting up a @code{S1 MERGER S2} statement, where
@code{S1} is the statement to execute now.

@item merger
This rule executes a @code{@var{S1} MERGER @var{S2}} statement.
@code{MERGER} is a non-commutative version of merge.  It represents
the case where the simulator has committed itself to the branch
@var{S1}.  If the first statement of @var{S1} is enabled, it will be
executed, otherwise, the simulator rewrites it to
@code{@var{S1} ||| @var{S2}}, which allows the interpreter to with
@var{S2} or to suspend the currently active process if neither
@var{S1} nor @var{S2} are enabled.

@item release
Execute a release statement by suspending the current process.

@item suspend
Suspend a process, if the current statement is not enabled.

@item await
Execute an await statement, if the guard is enabled.  If the guard is
not enabled, the rule behaves like @code{suspend}@footnote{Duplicating
the behaviour of suspend for the await statement is confluent.  It is,
on the other hand, a useful optimisation.}.

@item PrQ-ready
Select the next enabled process for execution.

@item receive-invoc
If we receive an invocation message, start binding the method body.
This rule is used for virtual calls @code{m}.

@item receive-static-invoc
If we receive an invocation message, start binding the method body.
This rule is used for static calls @code{m @ c}.

@item receive-comp
This rule executes a reply statement @code{?_(_)} by receiving the
corresponding completion message.

@item local-reply
This rule executes a reply statement to a local call.  It moves
control to the called process if the current process is blocking on
the reply of a self-call.  This avoids a deadlock when a process calls
itself.  The actual return from a self-call is handled by rule
@code{continue}, @pxref{Continue}.

@item continue
@anchor{Continue} Continue execution after a synchronous self-call has
terminated.  It replaces the currently active process with its local
caller.  Observe, that the completion message of the call has already
been emitted.  It will be received by the rule @code{receive-comp}.

@item local-async-call
Execute a local asynchronous method call.

@item local-async-static-call
Execute a local asynchronous method call with a class qualifier.

@item remote-async-call
Execute a remote asynchronous call.

@item return
Emit a reply statement.  Observe that the process may continue
execution after this statement.

@item transport
Move a message into the queue.

@item free
Schedule the labels identified in the argument of the @code{free}
statement for deallocation (see the rule @code{deallocate} below).  At
the same time, the value of that label is set to @code{null}.  This is
done to ensure linearity of the use of labels.

@item deallocate
If a label @var{l} has been deallocated by a free statement, and the
completion message to the call with label @var{l} arrives, the
completion message will be removed by this equation.

@item tailcall
Execute a @code{tailcall} statement.

@item tailcall-accept
Execute a @code{accept} statement.

@item new-object
This rule creates a new object, initialises it, and executes its
run-method.
@end table


@subsection Rules Defined for Real-Time Simulation

For simulating timed @acronym{CREOL}, the system defined two operators
@code{posit}, which check whether all posit constraints in a given
@code{State} are satisfied.

@table @code
@item posit
Execute a posit statement.  In untimed simulations, this statement
behaves like skip.  In the timed case, it behaves like skip if the
guard is enabled.

@item tick
This rule is used to advance the clock.  It is enabled, if all posit
constraints in the current state remain valid by advancing the value
of the global clock.
@end table


@node Sort Hierarchy
@section Sort Hierarchy

The image below summarises all sorts defined in the interpreter and
its data type hierarchy.

@image{sorts,5in,,Figure of sort hierarchy}


@node Using CMC
@section Using the CMC

In this section we describe the necessary steps for setting up the
interpreter and the model checker and to simulate and analyse the
@acronym{CREOL} model.

The compiler targets an interpreter which has been formalised in
rewriting logic and which is executable in Maude.  The
@command{creoltools} provide the interpreter and the model checker,
but they do not provide Maude.  Maude has to be obtained and installed
separately, e.g., from @url{http://maude.cs.uiuc.edu}.  Maude version
2.3 is required.  Maude then needs to be configured for use with the
semantics of @acronym{CREOL}, as described in @ref{Setting CMC Up}.

@menu
* Setting CMC Up::
* Simulation::
* Searching::
* Meta Execution::
@end menu


@node Setting CMC Up
@subsection Setting the CMC Up

The @acronym{CREOL} Machine described in this chapter runs on top of
the Maude rewriting system, which can be obtained at
@url{http://maude.cs.uiuc.edu}.  The CMC itself is defined in the
files @file{creol-datatypes.maude} and @file{creol-interpreter.maude},
whereas the meta execution strategy (@pxref{Meta Execution}) is
defined in @file{creol-metaexec.maude}.

These data files are distributed in the sub-directory @file{share} of
the distribution.  They will be installed into
@file{@var{$datadir}/creoltools}, usually
@file{/usr/local/share/creoltools}.  To use the CMC we have to tell
Maude where it can find these support files.  Maude searches in the
environment variable @env{MAUDE_LIB} for its support files.  We
suggest that you append the directory of the CMC files to this
variable, for example, using these commands in @command{bash}:
@example
export CREOL_LIB=@var{/path/to/support/files}
export MAUDE_LIB=$@{MAUDE_LIB:+"$MAUDE_LIB:"@}$CREOL_LIB
@end example

You can append these two lines to your @file{~/.bashrc} to have these
variables set for each login.

Please ask your system administrator for setting up the CMC in different
environments.


@node Simulation
@subsection Simulating Programs

The code generated by the compiler can be executed on the CMC, which
we have described in this chapter.  The program itself is defined as a
constant @code{state}.  The generated code does not contain any
objects, therefore an object must be created during initialisation.
The function @code{main(state, @var{class}, @var{args})} will create 
a state that contains @code{state} and a class-less object which creates
an instance of @var{class} with the expression list @var{args} as argument
to the constructor.  For example, the initial configuration of the Sieve
system can be started using the Maude command
@code{red main(state, "Generator", emp) .}

The rewrite command can be used to have the system run.  This is using
Maude's built-in rewrite command.  The parameter in square brackets is
the number of rule-applications to perform, e.g.,
@code{rew[1000] main(state, "Generator", emp) .} obtains a state after
1000 rule applications from the initial configuration.

A slightly different state can be obtained using Maude's @emph{fair}
execution strategy with
@code{frew[1000] main(state, "Generator", emp) .}

It is often the case, that these commands will show some state but will
not show the desired behaviour.  For small systems we advise to use
Maude's @code{search} command for checking whether there exists a
computation from the initial configuration to a desired (or undesired)
state exists.

For larger systems, random execution, as described in the next section
(see @pxref{Meta Execution}).


@node Searching
@subsection Searching

Searching is one of the facilities that make Maude appealing.

@cindex Searching for Assertion Failures
For example, the following pattern allows to search for a possible
assertion violation.  The command will search for one solution and limit
the depth of the search tree to @code{100}.  The command must be adapted
to the particular example.
@example
search [1, 100] in PROGRAM : main(state, "Main", emp) =>+
  < O:Oid : C:String | Att: A:Subst,
                       Pr: @{ L:Subst | failure(E:Expr); SL:StmList @},
                       PrQ: W:MProc, Lcnt: N:Nat >
  conf:Configuration .
@end example

@cindex Searching for Deadlocks
The pattern below is a quite generic pattern that searches for deadlocks
that arise from self-calls.  Again, it needs to be adapted to a particular
program in choosing the right bounds and a proper class name.
@example
search [1,100] in PROGRAM : main(state, "Deadlock", emp) =>+
  < O:Oid : C:String | Att: A:Subst ,
                       Pr: @{ L:Subst | get(Lab:Label ; V:VidList ) ; SL:StmtList @},
                       PrQ: @{ ".label" |-> Lab:Label, L':Subst | SL':StmtList @}, W:MProc,
                       Ev: M:MMsg , Lcnt: F:Nat >
  conf:Configuration .
@end example


@node Meta Execution
@subsection Strategies for Execution

Because the simulation done by Maude often give not the desired
results, a strategy for more random executions is provided.  You can
load and use this strategy from the Maude session in which the program
is to be interpreted with @command{load creol-metaexec}.

This provides one additional term @command{simulate}.  It accepts a
@code{Qid} designating the module on the meta-level, usually
@code{'PROGRAM}, the meta-representation of the initial configuration,
a random @var{seed}, and the number of @var{steps}.  Often, the
command as @command{downTerm(simulate('PROGRAM, upTerm(
main(state, @var{Main}, @var{args})), @var{seed}, @var{steps}))}.

The @var{seed} is used to seed the random generator, which drives the
selection of the successor state.  Different seeds will result in
different runs and configurations, whereas one seed will always
produce the same result.

We encourage you to use @file{creol-metaexec.maude} as a model for
writing your own execution strategies for the CMC.
