@node CMC Grammar
@appendix @acronym{CMC} Grammar

For reference, we summarise the grammar of the @acronym{CMC}.  The
grammar of the @acronym{CMC} is LR(1).  @code{@{...@}} means a list of
symbols, where the optional decorator at the end indicates the
separator.  An optional symbol is enclosed in square brackets like this:
@code{[ ... ]}.  Terminal symbols are printed like this:
@code{terminal}.  Finally, the symbol @var{id}, denoting method names,
functions, and variables, refers to an identifier, which is any string
that matches the regular expression @code{[_a-z][_'0-9A-Za-z]*}, and
@var{cid}, denoting class and type names, refers to any string that
matches the regular expression @code{[A-Z][_0-9A-Za-z]*}.


@section Configuration

A configuration is a multiset of terms.  The different terms are described
below.  It is expected that the kinds of terms and their format is going
to change.  Any program that needs to parse a configuration is advised to
ignore tokens or terms it does not understand.

We specify three classes of terms:  object terms, message terms, and
other terms.

An object term can be identified by the structure
@code{< ... : ... | ... >}.  Object terms may be Creol objects, creol
classes, or any other kind of term.

A message term can be identified by the pattern
@code{... from ... to ...}

Any other term has the format @code{...(...)}.

@format
state ::=
    @code{@{} configuration @code{@}}

configuration ::=
    none
  | (message-term | object-term) @{ message-term | object-term @}
@end format


@section Object Terms

Object terms are described by the grammar below.

@format
object-term ::=
    @code{<} oid @code{:} cid @code{|} attributes @code{>}

attributes ::=
    @code{none}
  | attribute
  | attribute @code{,} attributes
@end format



@subsection Attribute

An attribute is a @emph{key} followed by its @code{value}.

The key is a name that always starts with an upper case letter and
that always ends with a colon (:).

@format
attribute ::=
    @code{Att:} substitution
  | @code{Ev:} messages
  | @code{Inh:} inherits-list
  | @code{Lcnt:} integer
  | @code{Mtds:} methods
  | @code{Param:} vid-list
  | @code{Pr:} process
  | @code{PrQ:} processes
  | @code{Ocnt:} integer
  | unspec-attr-name unspec-attr-value
@end format


@subsection Statements

The merge statement need not be supported by the particular interpreter.
It may be removed in a subsequent release of the tools.

The grammar of statements is:
@format
merge-stmt ::=
    choice-stmt [ @code{|||} merge-stmt ]
  | choice-stmt [ @code{MERGER} merge-stmt ]

choice-stmt ::=
    sequential-stmt [ @code{[]} choice-stmt ]

sequential-stmt ::=
    basic-stmt [ @code{;} sequential-stmt ]

basic-stmt ::=
    @code{skip}
  | @code{commit}
  | @code{release}
  | @code{await} expr
  | @code{posit} expr
  | @code{assert} expr
  | @code{assign (} vid-list @code{;} expr-list @code{)}
  | @code{new (} vid @code{;} cid @code{;} expr-list @code{)}
  | @code{call (} vid @code{;} expr @code{;} string @code{;} expr-list @code{)}
  | @code{static (} vid @code{;} string @code{;} (string | @code{None}) @code{;} (string | @code{None}) @code{;} expr-list @code{)}
  | @code{multicast (} expr @code{;} string @code{;} expr-list @code{)}
  | @code{get (} expr @code{;} vid-list @code{)}
  | @code{return (} expr-list @code{)}
  | @code{free (} vid-list @code{)}
  | @code{tailcall (} expr @code{;} string @code{;} expr-list @code{)}
  | @code{statictail (} string @code{;} (string | @code{None}) @code{;} (string | @code{None}) @code{;} expr-list @code{)}
  | @code{if} expression @code{th} merge-stmt @code{el} merge-stmt @code{fi}
  | @code{while} expression @code{do} merge-stmt @code{od}
  | run-time-stmt
  | @code{(} merge-stmt @code{)}

run-time-stmt ::=
    @code{$accept} label
  | @code{$cont} label
  | @code{$assign (} vid-list @code{;} expr-list @code{)}
  | @code{$multicast (} expr @code{;} string @code{;} expr-list @code{)}
  | @code{failure} expr
@end format


@subsection Expressions


@format
expression ::=
    literal
  | string @code{(} expr-list @code{)}
  | @code{if} expr @code{th} expr @code{el} expr @code{fi}
@end format


@subsection Literals

Literals represent the values used by the interpreter during run-time.
They may be used as constant expressions in statements, but also as
part of object states.

@format
literal ::=
    @code{null}
  | @code{bool(} boolean @code{)}
  | @code{int(} integer @code{)}
  | @code{float(} float @code{)}
  | @code{str(} string @code{)}
  | @code{list(} expr-list @code{)}
  | @code{set(} expr-set @code{)}
  | @code{map(} expr-map @code{)}

boolean ::= @code{true} | @code{false}

expr-list ::= @code{emp} | expr [ @code{::} expr-list ]

expr-set ::= @code{emptyset} | expr [ @code{:} expr-set ]

expr-map ::= @code{empty} | @code{mapentry(} expr @code{,} expr @code{)} [ @code{,} expr-map ]
@end format
