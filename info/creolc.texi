@node creolc
@chapter The @command{creolc} compiler
@cindex @command{creolc}

The @emph{@acronym{CREOL} tools} provide a compiler from the
@acronym{CREOL} language, @pxref{CREOL Language}, into various
other formats, most importantly the @emph{@acronym{CREOL} Machine
Code}, @pxref{CREOL Machine Code}.  In this chapter we describe how
one may use the compiler.

The compiler is a command-line tool.  Its user interface follows the
@emph{Unix}-tradition: it can be integrated into pipes, and will not
output anything except to report errors or if explicitly requested to.

Traditionally, two versions are generated: @code{creolc} and
@code{creolc.opt}.  The first one is an Objective Caml byte code
script, and the second one is a native version.  The most important
differences between the two versions are, that the byte code version
is slower than the native one but gives better error messages in
exceptional situations.

@menu
* Invoking creolc::           Command line arguments.
* Known Limitations::         Issues with using the compiler.
@end menu


@node Invoking creolc
@section @command{creolc} Command Options.

When invoking @command{creolc}, it normally does compile its input
file into one Maude module describing the program.

The @command{creolc} compiler accepts options and file names as
operands.  Many options have multi-letter names; therefore multiple
single-letter options may @emph{not} be grouped:  @option{-dr} is
very different from @option{-d -r}.

You can mix options and other arguments.  for the most part, the order
of arguments does not matter.  Order matters if you use several
options of the same kind.  If you, for example, supply multiple
warning options, they are enabled and disabled in order from left to
right.

@menu
* Overall Options::           Controlling the general behaviour.
* Warning Options::           How picky should the compiler be?
* Debugging Options::         Tables, measurements, and debugging dumps.
* Pass Options::              Which passes should be applied?
* Target Options::            What should be output?
* Environment Variables::     Environment variables.
@end menu


@node Overall Options
@subsection Overall Options

For any given input file, the name of the file suffix determines what
kind of compilation is done:

@table @option
@item FILE.creol
A @acronym{CREOL} program that must be compiled.
@end table

Other options are:
@table @option
@item -help
Print (on standard output) a description of the command line options
understood by @command{creolc}.

@item -version
Print (on standard output) the version number and copyrights of the
invoked @command{creolc} compiler.

@item -v
Print (on standard error) some information on the passes applied to
the input program.  If this option is given multiple times, then more
information is printed.

@item -o FILE
Place the output in file @option{FILE}.  This applies regardless to
whatever sort of output is being produced.

Since only one output file can be specified, it does not make sense to
use @option{-o} multiple times, even if more than one input file is
provided.

If @option{-o} is not provided, the default is to write the output
into @file{creolc.out}.  If a file of the output name already exists,
it may be overwritten.

The file name @file{-} instructs the compiler to write the file to the
standard output.  This allows processing of the output by other tools.

@end table



@node Warning Options
@subsection Warning Options

The @command{creolc} allows to enable or disable certain warnings
which may indicate possible errors in the input program.  @option{-w
@var{NAME}} is used to @emph{enable} are particular warning, whereas
@option{-W @var{NAME}} is used to @emph{disable} the same warning.
The warnings currently understood are:
@table @option
@item all
Enables/disables all the warnings listen below.

@item unused
Warn if a variable is declared but if it is never used.  This warning
only applies to local variables of methods.  No warning will be
emitted if an input variable is never read.

@item undefined
Warn if a variable is used before it is defined.  This will also warn
if there is an output variable to which no assignment has been made
within a method and if an attribute is left unassigned to in the
@code{init} method.

@item init
Warn if the class does not provide an internal @code{init} method.

@item run
Warn if the class does not define an internal run method.

@end table


@node Debugging Options
@subsection Debugging Options

The compiler provides some options which help in debugging the
compiler itself: if you are interested in what the compiler is doing
or if you suspect a bug in the compiler, the following options may
help in understanding what the compiler does and how much time it
spent for what.  However, these options are of little use for normal
users.

@table @option
@item -d @var{name}
Write the tree returned after the pass @var{name} to the file
@file{out.@var{name}} as an XML document.  @xref{Pass Options}.
This option is only understood if the compiler has been built with
support for @emph{libxml2}.  Consult the installation instructions
for details.

@item -times
Measure the time used for a pass and print a summary of time spent for
each pass after finishing the compilation.

@end table



@node Pass Options
@subsection Pass Options

The compiler implements passes and analysis in different passes.  The
option @option{-p @var{name}} enables a particular pass @var{name},
whereas @option{-P @var{name}} disables it.

Some passes, however, have dependencies on other passes, as stated
below.  If you enable such a pass, all the ones it depends on are
enabled.  If you disable a pass in the command line, and there is
another pass enabled that depends on the disabled one, the behaviour
of the compiler is undefined.

@table @option
@item all
Enables all passes.

@item fold
Try to fold all constant expressions into literals.

@item lower
Expand statements and expressions to Core @acronym{CREOL} statements.

@item devirt
Devirtualise attribute access, i.e., replace each access to a variable
name by a static attribute access (@pxref{Static Attribute Access}), if
the name does not refer to a variable that is local to the method.  In
addition, a static attribute access expression is refined to the
super-class that actually defines the attribute, if the class
specified in the expression does not define that attribute.

@item into-ssa
Rewrite a @acronym{CREOL} program into @emph{static single assignment} format.

@item def-vars
Compute ranges of statements at which a variable must be defined.

@item life-vars
Compute ranges of statements at which a variable must be life.

@item bury
Insert statements which bury the value of a dead variable, i.e., which
set that value to @code{null}.  This pass helps in reducing the number
of states to model check by identifying states which are only
distinguished by the value of its dead variables.

@item free
Insert statements which free labels.  Reply messages are usually left
in the state configuration until the reply is consumed.
Alternatively, a @code{free} operation can be used to remove such a
reply if the value is never read.

@item tailcall
Perform tail call optimisations.

@item outof-ssa
Rewrite a Core @acronym{CREOL} program in static single assignment form into its
normal form by merging variables.  Depends on @option{into-ssa} and
@option{life-vars}

@end table


@node Target Options
@subsection Target Options

The @command{creolc} compiler can output the result of its passes into
many output formats.  A target option has the form @option{-T
@var{NAME}}, where @var{NAME} is of the list given below.  If multiple
target options are provided, only the latest one is effective, except
an unknown target is provided.  In that case, the compiler will abort
with an error message.  Currently, the following target languages are
supported:

@table @option
@item none
Only parse and analyse the program but do @emph{not} write any
output.

@item creol
Output the transformed program as a @acronym{CREOL} program.  Without any
passes, this target can be used as a pretty printer for @acronym{CREOL}
programs.  Virtual statements, which may be inserted during the
compiler, are output in comments.

Comments which occurred in the source file are @emph{not} written into
the output, because the compiler ignores comments in the source files
and discards them during parsing.

@item dot
Generate diagrams in dot format, suitable for rendering with graphviz.

@item maude
Output the transformed program as @acronym{CREOL} Machine Code.  In this mode,
the resulting Maude file uses the @emph{interpreter} for @acronym{CREOL}.

@item maudemc
Output the transformed program as @acronym{CREOL} Machine Code.  In this mode,
the resulting Maude file uses the @emph{model checker} for @acronym{CREOL}.

@item maudert
Output the transformed program as @acronym{CREOL} Machine Code.  In this mode,
the resulting Maude file uses the @emph{timed simulator} for @acronym{CREOL}.

@item xml
Output the transformed program as an XML document.  The resulting XML
file is equivalent to the debugging dump after the final pass, but its
name is determined by the @option{-o} option.  This target is only
avaliable if the compiler has been built with support for @emph{libxml2}.
Consult the installation instructions for details.

@end table



@node Environment Variables
@subsection Environment Variables

The @command{creolc} compiler searches for input files in a list of
directories, if the file cannot be found in the current working
directory.  The environment variable @env{CREOL_LIBRARY_PATH} can be
set to a colon-separated list of directories in which the compiler
searches for missing files.

If the name of an input file is given by an absolute path name, the
compiler will not search for that file in the search path.

The search path of the compiler is constructed as follows:
@enumerate
@item
Try to locate the file in the current working directory.

@item
Search the directories specified in @env{CREOL_LIBRARY_PATH} from left
to right.

@item
Search in the compiler's data directory.  This directory is determined
at compile time and is usually set to
@file{@env{$datadir}/creoltools}, where @env{$datadir} usually
evaluates to @file{/usr/local/share}.  Please check with your local
system administrator on the value of that variable.

@item
The compiler tries to locate its own executable, which we denote by
@env{execdir}, and search in the following directories relative to
that location: @file{@env{$execdir}/../share/creoltools},
@file{@env{$execdir}/../share}, and @file{@env{$execdir}}.
@end enumerate

If a file is not mentioned in either of these directories, the
compiler will report an error.



@node Known Limitations
@section Known Limitations

The @acronym{CREOL} compiler is still far from perfection.  In this section we
explain some of the known limitations of the compiler.

@menu
* Constant Folding::
* Bury and Free::
@end menu


@node Constant Folding
@subsection Constant Folding

The current implementation of constant folding does not take laws of
associativity and commutativity into account.  As an example, the
expressions @code{(1 + x) + 1} or @code{1 + (1 + x)} are not folded
into the expression @code{2 + x}.


@node Bury and Free
@subsection Bury and Free Passes

Bury and free statements are inserted according to the results of
a static analysis of a method body.  The method implemented in the
compiler is very simple:
@itemize
@item
The analysis is @emph{flow-sensitive}.  When analysing the program, it
will take the location in the source code into account and compute an
individual result for each statement in the program.

@item
The analysis is @emph{path-insensitive}.  It will not consider
condition predicates of condition statements.  This may result in
missed opportunities when analysing programs like
@code{if x then l!m() end; if x then l?() end}.  For that code, it is
apparent, that the label @code{l} should be freed if @code{x} is
false.  Such information is not yet used and in this example, @code{l}
will never be freed.

@item
The analysis is @emph{context-insensitive}.  When calling methods,
information from the call-site, the context, is not propagated to the
called method.  This is, to some extend, a necessity, since most of
the time, the called method is hidden behind an interface.  Context
information is not used when calling local methods, since the called
methods may be inaccessible because of virtual binding.
@end itemize
