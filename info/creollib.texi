@node CREOL Prelude
@chapter @acronym{CREOL} Prelude

The prelude of @acronym{CREOL} provides the standard library of
@acronym{CREOL}.  It contains all the data types, functions, and
classes defined for all @acronym{CREOL} programs.

@menu
* Data Type Data::               Universal super type.
* Data Type Bool::               Truth values.
* Data Type Float::               Float-valued numbers.
* Data Type Int::                Integer numbers.
* Data Type String::             Strings of characters.
* Data Type List::               Lists of elements.
* Data Type Set::                Sets of elements.
* Data Type Pair::               Pairs.
* Data Type Map::                Maps.
* Data Types Time and Duration:: Time and durations.
* Data Type Event::              Observations and histories.
* Interface Any::                The super type of all references.
@end menu

The subtype relation is displayed in the figure below.

@image{types,5in,,Figure of subtype relation}


@node Data Type Data
@section Data Type Data
@tindex Data

The type @code{Data} is the implicit super-type of all other types.
Two functions are predefined on all instances of @code{Data}: equality
(written as @code{=}) and inequality (written as @code{/=}).

The semantics of equality is a @emph{structural equality} for all
@emph{data types} and @emph{referential equality} for objects.

For data-values, equality is characterised by Leibniz axiom, that two
values @var{x} and @var{y} are equal if and only if all functions
@var{f} applied to @var{x} and @var{y}, including predicates, return
the same value, i.e., @var{f}(@var{x})=@var{f}(@var{y}).

Two objects are equal if they have the same name.  Objects of
different names may behave exactly the same in all circumstances, but
may still be distinguished by their name.

@table @code
@item function = (a: Data, b: Data): Bool
@findex =
This operator represents equality.

@item function /= (a: Data, b: Data): Bool
@findex /=
This operator represents inequality.
@end table


@node Data Type Bool
@section Data Type Bool
@tindex Bool

The type @code{Bool} comprises the truth values.  The literals
@code{true} and @code{false} have the type @code{Bool}.  In addition,
the functions displayed below are defined on values of type
@code{Bool}.

@table @code
@item function ~ (a: Bool) : Bool
@findex ~
The function @code{~} represents negation.

@item function && (a: Bool, b: Bool): Bool
@findex &&
The function @code{&&} represents conjunction.

@item function || (a: Bool, b: Bool): Bool
@findex ||
The function @code{||} represents disjunction.

@item function => (a: Bool, b: Bool): Bool
@findex =>
The function @code{=>} represents implication.

@item function ^ (a: Bool, b: Bool): Bool
@findex ^
The function @code{^} represent exclusive disjunction.  It
is a synonym for inequality (@code{/=}).

@item function <=> (a: Bool, b: Bool): Bool
@findex <=>
The function @code{<=>} represents equivalence or by-implication.  It
is a synonym for equality (@code{=}).
@end table

The functions @code{<=>} and @code{^} are provided, because they have
lower precedence than @code{=} and @code{/=}, making it simpler to
write formulae involving equalities and inequalities: @code{(P(a) =
P(b)) = (a = b)} can be written more nicely as @code{P(a) = P(b) <=> a =
b}.



@node Data Type Float
@section Data Type Float
@tindex Float

The type @code{Float} is supposed to include all values from the real
number field.

@table @code
@item function - (a: Float): Float
@findex -
The unary operator @code{-} represents negation of a real.

@item function + (a: Float, b: Float): Float
@findex +
The binary operator @code{+} represents addition of two reals.

@item function - (a: Float, b: Float): Float
@findex -
The binary operator @code{-} represents subtraction of two reals.

@item function * (a: Float, b: Float): Float
@findex *
The binary operator @code{*} represents multiplication of two reals.

@item function / (a: Float, b: Float): Float
@findex /
The binary operator @code{/} represents division of two
reals.

@c @item function div(a: Float, b: Float): Float
@c @findex div
@c The binary function @code{div} represents Eucledian division of two
@c reals.
@c 
@item function % (a: Float, b: Float): Float
@findex %
The binary operator @code{%} represents Euclidean remainder of two
reals.

@item function ** (a: Float, b: Float): Float
@findex **
The binary operator @code{**} represents exponentiation of two reals.

@item function < (a: Float, b: Float): Bool
@findex <
The binary relation @code{<} represents ``less than''.

@item function <= (a: Float, b: Float): Bool
@findex <=
The binary relation @code{<=} represents ``less than or equal''.

@item function > (a: Float, b: Float): Bool
@findex >
The binary relation @code{>} represents ``greater than''.

@item function >= (a: Float, b: Float): Bool
@findex >=
The binary relation @code{>=} represents ``less than or equal''.
@end table

The compiler encodes literals of type @code{Float} as fractions with
arbitrary precision.



@node Data Type Int
@section Data Type Int
@tindex Int

The data type @code{Int} includes all integer numbers.  It is a subtype
of @code{Float}.

@table @code
@item function - (a: Int): Int
@findex -
The unary operator @code{-} represents negation of an integer.

@item function + (a: Int, b: Int): Int
@findex +
The binary operator @code{+} represents addition of two integers.

@item function - (a: Int, b: Int): Int
@findex -
The binary operator @code{-} represents subtraction of two integers.

@item function * (a: Int, b: Int): Int
@findex *
The binary operator @code{*} represents multiplication of two integers.

@item function / (a: Int, b: Int): Int
@findex /
The binary operator @code{/} represents Euclidean division of two
integers.  In order to have standard division, at least one of the
arguments should be coerced to @code{Float} using @code{real_of_int}.

@item function % (a: Int, b: Int): Int
@findex %
The binary operator @code{%} represents Euclidean remainder of two
integers.

@item function ** (a: Int, b: Int): Int
@findex **
The binary operator @code{**} represents exponentiation of two
integers.

@item function < (a: Int, b: Int): Bool
@findex <
The binary relation @code{<} represents ``less than''.

@item function <= (a: Int, b: Int): Bool
@findex <=
The binary relation @code{<=} represents ``less than or equal''.

@item function > (a: Int, b: Int): Bool
@findex >
The binary relation @code{>} represents ``greater than''.

@item function >= (a: Int, b: Int): Bool
@findex >=
The binary relation @code{>=} represents ``less than or equal''.

@item function real_of_int(a: Int): Float
@findex real_of_int
The function @code{real_of_int} converts an integer value into a real
value such that both represent the same number.

@item rnd(n: Int): Int
@findex rnd
The function @code{rnd} is a pseudo-random generator.  It accepts a
natural number @var{n} as input and generates a number in the range
@math{[0; 2^32-1]} by @var{n} consecutive applications of the
Mersenne Twister Pseudorandom number generator.  Observe that
@code{rnd} is purely functional, i.e., a call @code{rnd(0)} will
always return @code{2357136044} (if the initial seed is @code{0};
please check the Maude manual on how to use a different seed).
@end table

The compiler can represent integer numbers with arbitrary precision.
Different back-ends can impose different limits on the range they can
represent.


@node Data Type String
@section Data Type String
@tindex String

The data type @code{String} represents all character strings.

The binary operators @code{|-}, @code{-|}, and @code{|-|} are
synonymous.  @acronym{CREOL} does not distinguish characters (which
are strings of length 1) from strings.  It is good style to use
@code{|-} to append a character to a string, @code{-|} to prepend one,
and @code{|-|} in any other case.

@table @code
@item function # (a: String): Int
@findex #
The unary operator @code{#} returns the length of the string.

@item function |- (a: String, b: String): String
@findex |-
The binary operator @code{|-} represent string concatenation.

@item function -| (a: String, b: String): String
@findex -|
The binary operator @code{-|} represent string concatenation.

@item function |-| (a: String, b: String): String
@findex |-|
The binary operator @code{|-|} represent string concatenation.

@item function ascii(a: String): Int
@findex ascii
If the string @code{a} has length @code{1}, this function will return
the ASCII code number of the character in the string.  Otherwise, the
behaviour is not defined.

@item function char(a: Int): String
@findex char
If @code{a} is a valid ASCII code number for some character, this
function returnts a string that consists of this character.  Otherwise,
the behaviour is not defined.

@item function substr(a: String, b: Int, c: Int): String
@findex substr
Returns the substring of @code{a} between the positions @code{b} and
@code{c}.

@item function find(a: String, b: String, c: Int): Int
@findex find
Returns the index of the first letter of the first string @code{b} in
the string @code{a} that starts after (or including) position @code{c}.

@item rfind(a: String, b: String, c: Int): Int
@findex rfind
Returns the index of the first letter of the last string @code{b} in the
string @code{a} that starts before (or including) position @code{c}.

@item function < (a: String, b: String): Bool
@findex <
This binary relation compares two strings with respect to their
lexicographic order.

@item function <= (a: String, b: String): Bool
@findex <=
This binary relation compares two strings with respect to their
lexicographic order.

@item function > (a: String, b: String): Bool
@findex >
This binary relation compares two strings with respect to their
lexicographic order.

@item function >= (a: String, b: String): Bool
@findex >=
This binary relation compares two strings with respect to their
lexicographic order.

@item function string_of_int(i: Int): String
@findex string_of_int
Convert the integer @code{i} to a string.

@item function int_of_string(s: String): Int
@findex int_of_string
Convert a string to an integer number.  If @code{s} does not represent
an integer literal, the behaviour is undefined.  Integer literals must,
for now, be recognizable to the @emph{Maude} parser.

@item function string_of_real(r: Float): String
@findex string_of_real
Convert a floating point number @code{r} to a string.

@item function real_of_string(s: String): Float
@findex real_of_string
Convert a string to a floating point number.  If @code{s} does not
represent a floating point literal, the behaviour is undefined.
Floating point literals must, for now, be recognizable to the
@emph{Maude} parser.
@end table

@acronym{CREOL} does not define the representation of strings and does
not specify a lexicographic ordering on strings.  All implementations
will probably behave as expected with all characters from the original
US-ASCII set.


@node Data Type List
@section Data Type List
@tindex List

The type constructor @code{List[`a]} generates monomorphic list
types.  A list that may contain anything has type @code{List[Data]}
and a list of object references has type @code{List[Any]}.

@table @code 
@item function head(l: List[`a]): `a
@findex head
The function @code{head} returns the first element of the list.  If
the list is empty, the result is undefined.@footnote{@acronym{CREOL} does not
yet support exceptions.  For now we suggest a defencive programming
approach.  Later, these functions may raise an exception instead of
having an undefined behaviour.}

@item function tail(l: List[`a]): List[`a]
@findex tail
The function @code{tail} returns a list without its first element.  If
the list is empty, the result is undefined.

@item function last(l: List[`a]): `a
@findex last
The function @code{last} returns the last element of the list.  If
the list is empty, the result is undefined.

@item function rest(l: List[`a]): List[`a]
@findex rest
The function @code{rest} returns a list without its last element.  If
the list is empty, the result is undefined.

@item function nth(l: List[`a], n: Int): `a
@findex nth
The function @code{nth} returns the @code{n}th element of the list.  If
the list has less than @code{n} elements, the result is undefined.

@item function rnth(l: List[`a], n: Int): `a
@findex rnth
The function @code{rnth} returns the @code{n}th element from the back
of the list.  If the list has less than @code{n} elements, the result
is undefined.

@item function reverse(l: List[`a]): List[`a]
@findex reverse
The function @code{reverse} returns a list in which all elements occur
in reverse order.

@item function sub(l: List[`a], i: Int, j: Int): List[`a]
@findex sub
The function @code{sub} returns a slice of the list, beginning at
@code{i} and ending at @code{j}.

@item function after(l: List[`a], n: Int): List[`a]
@findex after
The function @code{after} returns a list containing all elements after
@code{n}.  If @code{n} is larger than the length of the list, the
empty list is returned.

@item function in(e: `a, l: List[`a]): Bool
@findex in
The function @code{in} tests, whether the list @code{l} contains the
element @code{e}.

@item function remove(l: List[`a], e: `a): List[`a]
@findex remove
The function @code{remove} returns the largest sub list @code{l'} of
@code{l} that does not contain @code{e}.

@item function -|(e: `a, l: List[`a]): List[`a]
@findex -|
The operator @code{-|} prepends an element to a list.

@item function |-(l: List[`a], e: `a): List[`a]
@findex |-
The operator @code{|-} appends an element to a list.

@item function |-|(l: List[`a], m: List[`a]): List[`a]
@findex |-|
The operator @code{|-|} results in the concatenation of two list.

@item function #(l: List[`a]): Int
@findex #
The operator @code{#} returns the length of the list.

@item function isempty(l: List[`a]): Bool
@findex isempty
The function @code{isempty} tests, whether the list is empty.  It is
synonymous to @code{l == nil}.

@item function begwith(l: List[`a], m: List[`a]) : Bool
@findex begwith
The function @code{begwith} tests whether a list @code{l} begins with
the list @code{m}.

@item function endswith(l: List[`a], m: List[`a]) : Bool
@findex endswith
The function @code{endswith} tests whether a list @code{l} ends with
the list @code{m}.

@item function index(l: List[`a], e: `a): Int
@findex index
The function @code{index} returns the index of the first occurrence of
an element @code{e}.  If @code{e} does not occur in the list, the
result is undefined.

@item function rindex(l: List[`a], e: `a): Int
@findex rindex
The function @code{rindex} returns the index of the last occurrence of
an element @code{e}.  If @code{e} does not occur in the list, the
result is undefined.

@item function replace(l: List[`a], e: `a, p: Int): List[`a]
@findex replace
The function @code{replace} replaces the @code{p}th item of the list
@code{l} with the data item @code{e}.  If @code{p} is @code{0} or
larger than the length of the list @code{l}, then the result is not
defined.

@item function make_list(e: `a, n: Int): List[`a]
@findex make_list
Make a list that contains @code{n} times the data item @code{e}.  If
@code{n} is @code{0}, the empty list is generated.

@item function make_range(e: Int): List[Int]
@item function make_range(s: Int, e: Int): List[Int]
@item function make_range(s: Int, e: Int, t: Int): List[Int]
@findex make_range
Make a list of integers.  @code{s} represents the initial element of the
list, @code{e} the final element.  @code{t} is a stride value.  The
result is undefined if @code{t} is @code{0}, if @code{s < e} and
@code{t < 0}, or if @code{s > e} and @code{t > 0}.
@end table


@node  Data Type Set
@section Data Type Set
@tindex Set

The type constructor @code{Set[`a]} generates monomorphic set
types.  A set that may contain anything has type @code{Set[Data]}
and a set of object references has type @code{Set[Any]}.

@table @code
@findex #
@item function #(s: Set[`a]): Int
The function @code{#} returns the number of elements contained in the
argument set.

@item function remove(s: Set[`a], e: `a): Set[`a]
@findex remove
The function @code{remove} returns the argument set without element
@code{e}.

@item function add(s: Set[`a], e: `a): Set[`a]
@findex add
The function @code{add} returns the argument set with the addition of
element @code{e}.

@item function in(e: `a, s: Set[`a]): Bool
@findex in
The function @code{in} tests, whether the list @code{s} contains the
element @code{e}.

@item function union(s: Set[`a], t: Set[`a]): Set[`a]
@findex union
The function @code{union} returns the set union of the two argument
sets.

@item function inter(s: Set[`a], t: Set[`a]): Set[`a]
@findex inter
The function @code{inter} returns the set intersection of the two
argument sets.

@item function diff(s: Set[`a], t: Set[`a]): Set[`a]
@findex diff
The function @code{diff} returns the set difference of the two
argument sets.

@item function isempty(s: Set[`a]): Bool
@findex isempty
The predicate @code{isempty} tests, whether the argument set is empty.

@item function choose(s: Set[`a]): `a
@findex choose
The function @code{choose} selects an element from the set @code{s}.
It is not guaranteed that @code{choose} returns the same element each
time it is called for the same set.  If the set is empty, the result
is undefined.
@end table


@node Data Type Pair
@section Data Type Pair
@tindex Pair

The pair type constructor is defined in @ref{Types}.  For example, a
pair of integers has the type @code{[Int, Int]}.  The standard library
defines two projections on pairs:  @code{fst} projects on the first
element and @code{snd} projects on the second element.

@table @code
@item function fst (a: [`a, `b]): `a
@findex fst
Returns the first element of a pair.

@item function snd (a: [`a, `b]): `b
@findex snd
Returns the second element of a pair.
@end table



@node Data Type Map
@section Data Type Map
@tindex Map
@cindex Map Type

The type of @emph{finite maps} is @code{Map[`a, `b]}, where @code{`a}
represents the key type and @var{`b} represents the range type of the
map.  The following functions are defined on maps:

@table @code
@item function empty () : Map[`a, `b]
@findex empty
Generate an empty map.

@item function isempty(m: Map[`a, `b]): Bool
@findex isempty
Tests whether the map @code{m} is empty.

@item function get(m: Map[`a, `b], k: `a): `b
@findex get
Get the value for the key @code{k} from map @code{m}, or @code{null} if
no such value exists in that map.

@item function insert(m: Map[`a, `b], k: `a, v: `b): Map[`a, `b]
@findex insert
Insert a new binding from @code{k} to @code{v} into the map @code{m}.
If @code{k} is already bound, then the value is replaced in the result.

@item function remove(m: Map[`a, `b], k: `a): Map[`a, `b]
@findex remove
Remove any binding of @code{k} from @code{m}.

@item function in(k: `a, m: Map[`a, `b]): Bool
@findex in
Tests whether @code{k} is bound in @code{m}.

@item function keys(m: Map[`a, `b]): Set[`a]
@findex keys
Get the set of all keys used in the map.

@item function values(m: Map[`a, `b]): Set[`b]
@findex values
Get the set of all values used in the map.

@item function #(m: Map[`a, `b]): Int
@findex #
Results in the number of bindings in @code{m}.
@end table




@node Data Types Time and Duration
@section Data Types Time and Duration
@tindex Time
@tindex Duration

The types @code{Time} and @code{Duration} are used for real-time
modelling.  They should not be used in untimed models.  The semantics
of timed constraints in an untimed semantics is currently left
unspecified.  For a detailed explanation of modelling with time, we
refer the reader to @ref{Real-time CREOL}.

The only literal of type @code{Time} is @code{now}, which can be
stored in variables.

On values of type @code{Time} these relations are defined:

@table @code
@item function <(a: Time, b: Time): Bool
@findex <

@item function <=(a: Time, b: Time): Bool
@findex <=

@item function >=(a: Time, b: Time): Bool
@findex >=

@item function >(a: Time, b: Time): Bool
@findex >

@end table

Values of type @code{Time} refer to particular instances of when
events happened.  The type @code{Duration} refers to the difference
between to instances of time.  A @code{Duration} is not ``negative''.

@table @code
@item function dur(a: Float): Duration
@findex dur
The function @code{dur} constructs a new duration from a @code{Float}
value.  The unit of duration is left unspecified.

@item function +(a: Time, d: Duration): Time
@findex +
The operator @code{+(a: Time, d: Duration): Time} returns the time
after @code{d} has elapsed from @code{a}.

@item function -(a: Time, d: Duration): Time
@findex -
The operator @code{-(a: Time, d: Duration): Time} returns the time
before @code{d} has elapsed until @code{a}.

@item function -(a: Time, b: Time): Duration
@findex -
The operator @code{-(a: Time, b: Time): Duration} returns the time
elapsed between @code{a} and @code{b}.  If @code{a} happened before
@code{b}, the result is normalised.  Consequently, for all values of
@code{Time}, we have @code{a - b = b - a}.

@item function +(a: Duration, d: Duration): Duration
@findex +
The operator @code{+(a: Duration, d: Duration): Duration} is the sum
of two durations.

@item function -(a: Duration, d: Duration): Duration
@findex -
The operator @code{-(a: Duration, d: Duration): Duration} is the
difference between two durations.  The result is undefined if @code{d
> a}.

@item function *(a: Duration, s: Float): Duration
@item function *(a: Float, s: Duration): Duration
@findex *
The operators @code{*(a: Duration, s: Float): Duration} and @code{*(a:
Float, s: Duration): Duration} represent @emph{scalar} multiplication
of durations.

@item function /(a: Duration, s: Float): Duration
@findex /
The operator @code{/(a: Duration, s: Float): Duration} is scalar
division.  It is a shorthand for @code{a * (1.0 / s)}.

@item function <(a: Duration, b: Duration): Bool
@findex <

@item function <=(a: Duration, b: Duration): Bool
@findex <=

@item function >=(a: Duration, b: Duration): Bool
@findex >=

@item function >(a: Duration, b: Duration): Bool
@findex >
@end table


@node Data Type Event
@section Data Type Event
@tindex Event

THE INFORMATION IN THIS SECTION IS SUBJECT TO CHANGE.

The type @code{Event} is used in the assertion language.  An event is
the observation of a call or a reply to a call.  Terms of type
@code{Event} must not occur in the context of the program.  Within
assertions, the following functions may be used to query a history:

@table @code
@item function sender(e: Event): Any
@findex sender
The identity of the sender.

@item function receiver(e: Event): Any
@findex receiver
The identity of the receiver.

@item function call(e: Event): Bool
@findex call
Whether the event is observing a call or a reply.

@item function method(e: Event): String
@findex method
The name of the called method.

@item function arguments(e: Event): List[Data]
@findex arguments
This is a list of actual arguments supplied to the call observed by
this event.

@item function results(e: Event): List[Data]
@findex results
If @code{call(e)} is @code{false}, this results in a list of return
values for the event.  If @code{call(e)} is @code{true}, the meaning
is undefined.

@item function id(e: Event): Int
@findex id
A identity of the event.  A globally unique ID for an event is the
triplet @code{(caller(e), call(e), id(e))}.

@item function time(e: Event): Time
@findex time
The time when that event happened.  If this function is used in
untimed models, its meaning is not defined.

@end table


@node Interface Any
@section Interface Any
@tindex Any

The prelude provides the interface @code{Any}, which each class is
implicitly contracting.  The interface @code{Any} does not provide any
methods and allows every behaviour.  This interface has the following
declaration:

@example
interface Any begin inv true end
@end example
