@node creolupdc
@chapter The @command{creolupdc} update compiler
@cindex @command{creolupdc}

The @emph{@acronym{CREOL} tools} provide a compiler for dynamic updates
to @emph{@acronym{CREOL} Machine Code}, @pxref{CREOL Machine
Code}.  In this chapter we describe how one may use the compiler.

The compiler is a command-line tool.  Its user interface follows the
@emph{Unix}-tradition: it can be integrated into pipes, and will not
output anything except to report errors or if explicitly requested to.

Traditionally, two versions are generated: @code{creolupdc} and
@code{creolupdc.opt}.  The first one is an Objective Caml byte code
script, and the second one is a native version.  The most important
differences between the two versions are, that the byte code version
is slower than the native one but gives better error messages in
exceptional situations.

@menu
* creolupdc Command Line Options::    Controlling @command{creolupdc}.
* creolupdc Usage::                   Using @command{creolupdc}.
@end menu

@node creolupdc Command Line Options
@section Command Line Options.

When invoking @command{creolupdc}, it normally does compile its input
file into one Maude module describing the program.

The @command{creolupdc} compiler accepts options and file names as
operands.  Many options have multi-letter names; therefore multiple
single-letter options may @emph{not} be grouped:  @option{-dr} is
very different from @option{-d -r}.

You can mix options and other arguments.  for the most part, the order
of arguments does not matter.  Order matters if you use several
options of the same kind.  If you, for example, supply multiple
warning options, they are enabled and disabled in order from left to
right.

@menu
* creolupdc Overall Options::        Controlling the general behaviour.
* creolupdc Warning Options::        How picky should the compiler be?
* creolupdc Debugging Options::      Tables, measurements, and debugging dumps.
* creolupdc Pass Options::           Which passes should be applied?
* creolupdc Environment Variables::  Environment variables.
@end menu


@node creolupdc Overall Options
@subsection Overall Options

For any given input file, the name of the file suffix determines what
kind of compilation is done:

@table @option
@item -ie FILE.creol
A @acronym{CREOL} program file that describes the environment before
the update.  This argument is mandatory and has no default value.

Only one input environment can be used. It does not make sense to use
@option{-ie} multiple times and only the last one given will be
effective.

@item -oe FILE.creol
The name of a file to which the environment after applying an update is
safed to. It defaults to @file{gamma.creol}.

Only one output environment will be written. It does not make sense to
use @option{-oe} multiple times and only the last one given will be
effective.

@item -state FILE
Read a runtime state of a Maude interpreter from @file{FILE}. If this
argument is missing, the compiler assumes an empty state.

Only one state can be used. It does not make sense to use
@option{-state} multiple times and only the last one given will be
effective.

@item -o FILE
Place the output in file @option{FILE}.

Since only one output file can be specified, it does not make sense to
use @option{-o} multiple times, even if more than one input file is
provided.

If @option{-o} is not provided, the default is to write the output
into @file{creolupdc.out}.  If a file of the output name already exists,
it may be overwritten.

The file name @file{-} instructs the compiler to write the file to the
standard output.  This allows processing of the output by other tools.

@item FILE.creol
A @acronym{CREOL} file containing update terms to compile.
@end table

Other options are:
@table @option
@item -help
Print (on standard output) a description of the command line options
understood by @command{creolupdc}.

@item -version
Print (on standard output) the version number and copyrights of the
invoked @command{creolupdc} compiler.

@item -v
Print (on standard error) some information on the passes applied to
the input program.  If this option is given multiple times, then more
information is printed.

@end table



@node creolupdc Warning Options
@subsection Warning Options

The @command{creolupdc} allows to enable or disable certain warnings
which may indicate possible errors in the input program.  @option{-w
@var{NAME}} is used to @emph{enable} are particular warning, whereas
@option{-W @var{NAME}} is used to @emph{disable} the same warning.
The warnings currently are the same as for the @command{creolc} compiler
and are described in @ref{Warning Options}.


@node creolupdc Debugging Options
@subsection Debugging Options

The compiler provides some options which help in debugging the
compiler itself: if you are interested in what the compiler is doing
or if you suspect a bug in the compiler, the following options may
help in understanding what the compiler does and how much time it
spent for what.  However, these options are of little use for normal
users.

@table @option
@item -d @var{name}
Write the tree returned after the pass @var{name} to the file
@file{out.@var{name}} as an XML document.  @xref{Pass Options}.
This option is only understood if the compiler has been built with
support for @emph{libxml2}.  Consult the installation instructions
for details.

@item -times
Measure the time used for a pass and print a summary of time spent for
each pass after finishing the compilation.

@end table



@node creolupdc Pass Options
@subsection Pass Options

The compiler implements passes and analysis in different passes.  The
option @option{-p @var{name}} enables a particular pass @var{name},
whereas @option{-P @var{name}} disables it.  The passes accepted here
are the same ones as for @command{creolc} and they are listed in
@ref{Pass Options}.


@node creolupdc Environment Variables
@subsection Environment Variables

The @command{creolupdc} compiler searches for input files in a list of
directories, if the file cannot be found in the current working
directory in the same way as @command{creolc}.  The environment variable
@env{CREOL_LIBRARY_PATH} can be set to a colon-separated list of
directories in which the compiler searches for missing files.



@node creolupdc Usage
@section Using @command{creolupdc}

In this section we summarise the steps to perform a dynamic update using
the update compiler.

Let us assume that one has written a @acronym{CREOL} program and safed
it to @file{example.creol}. A suitable Maude input file for simulating
Maude updates can be generated by choosing the sub-target
@code{updates}, that is, by compiling the example thus:
@verbatim
creolc -s updates -o example.maude examble.creol
@end verbatim

Now, we can simulate the example for some steps in Maude, e.g.:
@verbatim
maude example.maude
Maude> frew[1000] main(state, "Example", emp) .
@end verbatim
until suitable a simulation result has been reached. Then, we copy this
result to a file, say @file{example.state}. You should copy the text
starting with the last line marked @code{result State:} up to, but not
including, the next prompt (usually @code{Maude>}) or the end of the
text (sometimes indicated by @code{Bye.}).

Assuming that the file @file{update.creol} contains one or more updates,
we can compile these and insert them into the state that has been
written to @file{example.state} like this:
@verbatim
creolupdc -ie example.creol -oe example2.creol -state example.state \
  -o update.maude update.creol
@end verbatim
This command will check, whether the update in @file{update.creol} is a
type-correct update for a type environment defined by the program in
@file{example.creol}. If type checking is successful, the update is
inserted into the state read from @file{example.state} and the update
state is written into the file @file{update.creol}. The type environment
with the update applied and with additional version information, is then
stored in @file{example2.creol}. This file is needed to type check an
update to any class or object that has been written to
@file{update.maude}.

That resulting state can then be loaded into Maude and rewriting can
proceed by writing, e.g.,
@verbatim
maude update.maude
Maude> frew[1000] state .
@end verbatim

Notice that there is no need to create a new main object using the
@code{main(_,_,_)} function, because all objects still exist in the new
state term. Thus, the new update will be available to all objects.


@subsection Known issues

The update compiler does not check whether the state taken from the
Maude configuration is consistent with the type environment. The
behaviour of this program is undefined, if
@itemize
@item
The state taken from Maude has not been obtained by rewriting from a
state that has been obtained from the type environment given on the
command line.

@item
The update is type checked in a type environment that is type compatible
with the current state but reflects a different version.
@end itemize

Using dynamic updates together with the Maude interpreter involves many
manual steps like copying a state into a file. This cannot be avoided,
since Maude does not provide any input-/output facilities. A new
interpreter for Creol is needed to solve this problem.

@c Local Variables: 
@c mode: texinfo
@c TeX-master: "creoltools"
@c End: 
