*******************************************************************
***       A "more fair" execution strategy for simulating       ***
***       non-deterministic execution.                          ***
***       Einar Broch Johnsen, January 2007.                    ***
*******************************************************************
mod RANDOM-EXEC is
pr PROGRAM .
pr QID-LIST .
pr RANDOM .            *** Maude's built-in random number generator

var MOD : Qid .
vars T T' : Term .
vars LABEL Q Q' : Qid .      
vars LABELS FAILED QL : QidList .
vars I J K RAND : Int .
var N : NzNat .
var R : Rule .               var RS : RuleSet .
var AS : AttrSet .           var COND : Condition .

op getLabelsFromRuleSet : RuleSet -> QidList .
eq getLabelsFromRuleSet(none) = nil .
eq getLabelsFromRuleSet(rl T => T' [label(LABEL) AS] . RS) 
  = LABEL getLabelsFromRuleSet(RS) .
eq getLabelsFromRuleSet(crl T => T' if COND [label(LABEL) AS] . RS) 
 =  LABEL getLabelsFromRuleSet(RS) .

op getRuleLabels : Qid -> QidList .
eq getRuleLabels(MOD) = getLabelsFromRuleSet(upRls(MOD, true)) .

*** Select "random" solution:
op ChooseSolution : Qid Term Qid Int -> Int .
eq ChooseSolution(MOD, T, LABEL, RAND)
  = RAND rem (noOfSolutions(MOD, T, LABEL, 0) + 1) .
     
*** Find number of possible solutions with a given label
*** (If no solutions, -1 is returned.)
op noOfSolutions : Qid Term Qid Int -> Int .
eq noOfSolutions(MOD, T, LABEL, I) =        
if (metaXapply([MOD], T, LABEL, none, 0, unbounded, I) :: Result4Tuple) 
then noOfSolutions(MOD, T, LABEL, I + 1) else _-_(I, 1) fi .

*** select label from list
op select : QidList Int -> Qid .
eq select(Q QL, 0) = Q .
eq select(Q QL, s(I)) = select(QL, I) .

*** remove label from list    
op remove : Qid QidList -> QidList .
eq remove(Q, nil) = nil .
eq remove(Q, Q' QL) = if Q == Q' then QL else Q' remove(Q, QL) fi .

*** Define a metarepresentation for the execution
sort MetaState .
op state[term:_, mod:_, labels:_, failed:_, numRls:_, rand:_, steps:_, max:_ ] :
       Term Qid QidList QidList Int Int Int Int -> MetaState [ctor 
format (o o !rn o o !rn o o !rn o o !rn o o !rn o o !rn o o !rn o o !rn o o o)] .

*** The actual meatexecution rule:
ceq state[term: T , mod: MOD, labels: LABELS, failed: FAILED, 
      numRls: J, rand: RAND, steps: N, max: I ]
=
if noOfSolutions(MOD, T, LABEL, 0) == -1  
then *** the selected rule cannot be applied:
state[term: T , mod: MOD, labels: remove(LABEL, LABELS),
      failed: FAILED LABEL, numRls: _-_(J,1), rand: RAND + 2, 
      steps: N, max: I ] 
else *** the selected rule can be applied:
state[term: getTerm(metaXapply([MOD], T, LABEL, none, 0, unbounded, 
                     ChooseSolution(MOD, T, LABEL, random(RAND + 1)))), 
      mod: MOD, labels: LABELS FAILED, failed: nil, 
      numRls: size(LABELS FAILED), rand: RAND + 2, 
      steps: _-_(N,1), max: I ] fi
if size(LABELS) > 0 /\ LABEL := select(LABELS, random(RAND) rem J) .

*** The execution has terminated
ceq state[term: T , mod: MOD, labels: nil, failed: FAILED, 
      numRls: J, rand: RAND, steps: N, max: I ]
=
state[term: upTerm(warn(downTerm(T, { none }),
                   "Program terminates after " + string(_-_(I,N),10) + " steps")), 
      mod: MOD, labels: nil, failed: FAILED, numRls: J, rand: RAND, steps: 0, max: I ] 
if N =/= I .



*** function to get an initial MetaState
op upState : Qid Term Int Int -> MetaState .
eq upState(MOD, T, I, J) = 
state[term: T, mod: MOD, labels: getRuleLabels(MOD), failed: nil, 
      numRls: size(getRuleLabels(MOD)), rand: I, steps: J, max: J ] .

*** function to return the configuration
*** This function applies when there are no more steps to be done
op downState : MetaState -> Configuration .
eq downState(state[term: T , mod: MOD, labels: LABELS, failed: FAILED, 
      numRls: I, rand: RAND, steps: 0, max: N ])
= downTerm(T, none) .

*** Metaexecution with seed I and steps J
op simulate : Qid Term Int Int -> Configuration .
eq simulate(MOD, T, I, J) = downState(upState(MOD, T, I, J)) .

*** red simulate('PROGRAM, upTerm(init), 5,10) .
endm 

