/*
 * prelude.creol
 *
 * Copyright (c) 2007
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

datatype Data

function = (a: `a, b: `a): Bool == external "="
function /= (a: `a, b: `a): Bool == external "/="

datatype Bool

function ~ (a: Bool) : Bool == external "~"
function && (a: Bool, b: Bool): Bool == external "&&"
function || (a: Bool, b: Bool): Bool == external "||"
function => (a: Bool, b: Bool): Bool == external "=>"
function ^ (a: Bool, b: Bool): Bool == external "^"
function <=> (a: Bool, b: Bool): Bool == external "<=>"

datatype Float

function - (a: Float): Float == external "-"
function + (a: Float, b: Float): Float == external "+"
function - (a: Float, b: Float): Float == external "-"
function * (a: Float, b: Float): Float == external "*"
function / (a: Float, b: Float): Float == external "/"
function % (a: Float, b: Float): Float == external "%"
function ** (a: Float, b: Float): Float == external "**"

function < (a: Float, b: Float): Bool == external "<"
function <= (a: Float, b: Float): Bool == external "<="
function > (a: Float, b: Float): Bool == external ">"
function >= (a: Float, b: Float): Bool == external ">="

datatype Int from Float

function - (a: Int): Int == external "-"
function + (a: Int, b: Int): Int == external "+"
function - (a: Int, b: Int): Int == external "-"
function * (a: Int, b: Int): Int == external "*"
function / (a: Int, b: Int): Int == external "/"
function div(a: Int, b: Int): Int == external "div"
function % (a: Int, b: Int): Int == external "%"
function ** (a: Int, b: Int): Int == external "**"
function random(seed: Int): Int == external "random"

function < (a: Int, b: Int): Bool == external "<"
function <= (a: Int, b: Int): Bool == external "<="
function > (a: Int, b: Int): Bool == external ">"
function >= (a: Int, b: Int): Bool == external ">="
function float_of_int(a: Int) : Float == external "float_of_int"

datatype String

function # (a: String): Int == external "#"
function |- (a: String, b: String): String == external "|-"
function -| (a: String, b: String): String == external "-|"
function |-| (a: String, b: String): String == external "|-|"
function ascii(a: String): Int == external "ascii"
function char(a: Int): String == external "char"
function substr(a: String, b: Int, c: Int): String == external "substr"
function find(a: String, b: String, c: Int): Int == external "find"
function rfind(a: String, b: String, c: Int): Int == external "rfind"

function < (a: String, b: String): Bool == external "<"
function <= (a: String, b: String): Bool == external "<="
function > (a: String, b: String): Bool == external ">"
function >= (a: String, b: String): Bool == external ">="

function string_of_int(i: Int): String == external "string_of_int"
function int_of_string(s: String): Int == external "int_of_string"
function string_of_float(r: Float): String == external "string_of_float"
function float_of_string(s: String): Float == external "float_of_string"

datatype List[`a]

function head(l: List[`a]): `a == external "head"
function tail(l: List[`a]): List[`a] == external "tail"
function last(l: List[`a]): `a == external "last"
function rest(l: List[`a]): List[`a] == external "rest"
function nth(l: List[`a], n: Int): `a == external "nth"
function rnth(l: List[`a], n: Int): `a == external "rnth"
function in(e: `a, l: List[`a]): Bool == external "in"
function remove(l: List[`a], e: `a): List[`a] == external "remove"
function -|(e: `a, l: List[`a]): List[`a] == external "-|"
function |-(l: List[`a], e: `a): List[`a] == external "|-"
function |-|(l: List[`a], m: List[`a]): List[`a] == external "|-|"
function #(l: List[`a]): Int == external "#"
function isempty(l: List[`a]): Bool == external "isempty"
function reverse(l: List[`a]): List[`a] == external "reverse"
function after(l: List[`a], p: Int): List[`a] == external "after"
function sub(l: List[`a], n: Int, m: Int): List[`a] == external "sub"
function begwith(l: List[`a], m: List[`a]): Bool == external "begwith"
function endswith(l: List[`a], m: List[`a]): Bool == external "endswith"
function index(l: List[`a], e: `a): Int == external "index"
function rindex(l: List[`a], e: `a): Int == external "rindex"
function replace(l: List[`a], e: `a, p: Int): List[`a] == external "replace"
function make_list(e: `a, p: Int): List[`a] == external "gen_list"
function make_range(e: Int): List[Int] == external "make_range"
function make_range(s: Int, e: Int): List[Int] == external "make_range"
function make_range(s: Int, e: Int, t: Int): List[Int] == external "make_range"

// More to come.

datatype Set[`a]

function isempty(s: Set[`a]): Bool == external "isempty"
function #(s: Set[`a]): Int == external "#"
function remove(s: Set[`a], e: `a): Set[`a] == external "remove"
function add(s: Set[`a], e: `a): Set[`a] == external "add"
function in(e: `a, s: Set[`a]): Bool == external "in"
function union(s: Set[`a], t: Set[`a]): Set[`a] == external "union"
function inter(s: Set[`a], t: Set[`a]): Set[`a] == external "inter"
function diff(s: Set[`a], t: Set[`a]): Set[`a] == external "diff"
function choose(s: Set[`a]): `a == external "choose"

// More to come.


// datatype Pair

function fst (a: [`a, `b]): `a == external "fst"
function snd (a: [`a, `b]): `b == external "snd"

datatype Map[`a, `b]

function empty () : Map[`a, `b] == external "empty"
function isempty(m: Map[`a, `b]): Bool == external "isempty"
function get(m: Map[`a, `b], k: `a): `b == external "get"
function insert(m: Map[`a, `b], k: `a, v: `b): Map[`a, `b] == external "insert"
function remove(m: Map[`a, `b], k: `a): Map[`a, `b] == external "remove"
function in(k: `a, m: Map[`a, `b]): Bool == external "in"
function keys(m: Map[`a, `b]): Set[`a] == external "keys"
function values(m: Map[`a, `b]): Set[`b] == external "values"
function #(m: Map[`a, `b]): Int == external "#"


datatype Time

function <(a: Time, b: Time): Bool == external "<"
function <=(a: Time, b: Time): Bool == external "<="
function >=(a: Time, b: Time): Bool == external ">="
function >(a: Time, b: Time): Bool == external ">"

datatype Duration

function dur(a: Float): Duration == external "duration"
function +(a: Time, d: Duration): Time == external "+"
function -(a: Time, d: Duration): Time == external "-"
function -(a: Time, b: Time): Duration == external "-"
function +(a: Duration, d: Duration): Duration == external "+"
function -(a: Duration, d: Duration): Duration == external "-"
function *(a: Duration, s: Float): Duration == external "*"
function *(a: Float, s: Duration): Duration == external "*"
function /(a: Duration, s: Float): Duration == external "/"
function <(a: Duration, b: Duration): Bool == external "<"
function <=(a: Duration, b: Duration): Bool == external "<="
function >=(a: Duration, b: Duration): Bool == external ">="
function >(a: Duration, b: Duration): Bool == external ">"

datatype Event

function id(e: Event): Int == external ""
function sender(e: Event): Any == external ""
function receiver(e: Event): Any == external ""
function call(e: Event): Bool == external ""
function name(e: Event): String == external ""
function arguments(e: Event): List[Data] == external ""
function results(e: Event): List[Data] == external ""
function time(e: Event): Time == external ""

interface Any
pragma Hidden
begin
inv true
end
