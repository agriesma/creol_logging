dnl A simple term replacement system for Creol.
dnl
dnl Copyright (c) 2009 by Andreas Griesmayer <gismo@kangaroo.at>
dnl   and Marcel Kyas <kyas@ifi.uio.no>
dnl
dnl Do NOT edit this file.  This file may be overwritten.  It has been
dnl automatically generated from interpreter.m4 using m4.
dnl
dnl This program is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU General Public License as
dnl published by the Free Software Foundation; either version 3 of the
dnl License, or (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.
dnl
mod `CREOL-RENAME' is

    protecting CREOL-REPLACE .

    vars TS1 TS2 : TSubst .
    var V1 : Vid .
    var S L : Subst .
    var Q A : String . 
    vars E1 E2 : Expr .
    var F : Nat .
    var O : Oid .
    var AL : VidList .
    var EL : ExprList .

 op label : Oid Nat -> Label [ctor ``format'' (o o)] .
 eq caller(label(O, F)) = O .


----------------------------------------------------------------------
--- helper functions for creating the log messages
----------------------------------------------------------------------
 op toString : Label -> String .
 eq toString( label(ob(Q), F) ) = Q + "-" + string(F, 10) .

 op toString : Oid -> String .
 eq toString(ob(Q) ) = Q .


 op getThis : Subst -> String .
 ceq getThis(S) = toString(S["this"]) if $hasMapping(S, "this") .
 eq getThis(S) = "global" [owise] .

 op getLabel : Subst -> String .
 ceq getLabel(S) = toString(S[".label"]) if $hasMapping(S, ".label") .
 ceq getLabel(S) = toString(S["this"]) if $hasMapping(S, "this") .
 eq getLabel(S) = "nolabel" [owise] .



--- generate a helper map to rename the variables
 op genRenameHelper : Subst String TSubst -> TSubst .
 eq genRenameHelper (noSubst, Q, TS1) = TS1 .
 eq genRenameHelper ((  V1 |-> E1 , S ), Q, TS1) = genRenameHelper( S, Q, insert(V1, (Q + V1), TS1) ) .

----------------------------------------------------------------------
--- rename variables in a list
----------------------------------------------------------------------
--- renameLHS( S, Q, TS1) = rename the LHS of TS1 by prepending Q if
--- the Vid is in the keyset of S.  Dont change the other keys.
--- EXAMPLE rew renameLHS ( ( "s" |-> int(4), "d" |-> int(4) ) , "pre", ( "s" |> "sd", "ff" |> "fs") ) .
 op renameLHS : Subst String TSubst -> TSubst .
 eq renameLHS( noSubst, Q, TS1 ) = TS1 .
 eq renameLHS( (  V1 |-> E1 , S ), Q, ( TS1, V1 |> E2) ) = renameLHS( S, Q, insert(  ( Q + V1  ) , E2, TS1 ) ) .
 eq renameLHS( (  V1 |-> E1 , S ), Q,  TS1 ) = renameLHS(S, Q, TS1)  [owise] .

--- renameRHS(TS1, TS2) = rename variables in the RHS of TS2 by
--- the replacemap in TS1.
--- example rew renameRHS( genRenameHelper( ("sd" |-> int(0) ), "pre" ) , ( "s" |> "+"( "sd" :: int(2) ), "ff" |> "fs") ) .
 op renameRHS : TSubst TSubst -> TSubst .
 eq renameRHS( TS1,  ( Q |> E1, TS2) ) = insert( Q, replace(E1, TS1), renameRHS(TS1, TS2) ) .
 eq renameRHS( TS1, TnoSubst) = TnoSubst .

--- rename the variables in transitions
 op renTrans1 : Subst String TSubst -> TSubst .
 eq renTrans1(S, Q, TS1) = renameRHS(genRenameHelper(S, Q, TnoSubst), renameLHS(S, Q, TS1) ) .
 eq renTrans1(noSubst, Q, TS1) = TS1 .
--- renTrans( S, Q, TS1) = rename the variables in TS1 according to the local and global variables.
--- EXAMPLE: rew renTrans( "s" |-> int(3), "f" |-> int(4) , ( "s" |> "f" ) ) .
 op renTrans : Subst Subst TSubst -> TSubst . 
 eq renTrans(S, L, TS1) = renTrans1(S, getThis(S)  + ".", renTrans1(L, getLabel((L,S)) + ".", TS1) ) .

----------------------------------------------------------------------
--- rename the variables in a statement (TODO check: only for pretty print?)
----------------------------------------------------------------------
 op renStmt1 : Subst String Stmt -> Stmt .
 eq renStmt1(S, Q, assign(AL ; EL ) ) 
  = assign ( renvlist(genRenameHelper(S, Q, TnoSubst), AL) ; renelist(genRenameHelper(S, Q, TnoSubst), EL) ) .

 op renStmt : Subst Subst Stmt -> Stmt .
 eq renStmt(S, L, assign( AL ; EL ) ) 
  = renStmt1( S, getThis(S) + ".", renStmt1(L, getLabel((L,S)) + ".", assign( AL ; EL ) ) ) .

--- ren the variables in an expressionlist TODO:special case of replace?
 op renelist : TSubst ExprList -> ExprList .
 eq renelist( TS1, emp ) = emp .
 eq renelist( TS1, ( E1 :: EL ) ) = ( replace(E1, TS1) :: renelist(TS1, EL ) ) .

--- ren the variables in an variableslist TODO:special case of replace?
 op renvlist : TSubst VidList -> VidList .
 eq renvlist( TS1, noVid) = noVid .
 eq renvlist( TS1, (V1, AL) ) = ( replace(V1, TS1) , renvlist(TS1, AL) ) .

----------------------------------------------------------------------
--- rename the variables in an expression
----------------------------------------------------------------------

--- Example rew renExpr( "s" |-> int(2), "f" |-> int(3), "+" ( "s" :: "f" ) ) .
--- replace(E, genRenameHelper("f" |-> int(3), getLabel(("f" |-> int(3),"s" |-> int(2)))))
--- rew replace( "+" ("s" :: "f") , genRenameHelper("f" |-> int(3), getLabel(("f" |-> int(3),"s" |-> int(2))), TnoSubst)) .
--- rew renExpr( "mmax" |-> int(2), noSubst,  "&&"("<"("m" :: "mmax") :: "<"("-"("mfree" :: "t") :: "/"("m" :: "mrate"))) ) .
op renExpr : Subst Subst Expr -> Expr .
eq renExpr(S, L, E1) 
 = replace(replace(E1, genRenameHelper(L, getLabel((L,S)) + ".", TnoSubst)), 
               genRenameHelper(S, getThis( (L,S)) + ".", TnoSubst) ) .



endm
