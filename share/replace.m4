dnl A simple term replacement system for Creol.
dnl
dnl Copyright (c) 2009 by Andreas Griesmayer <gismo@kangaroo.at>
dnl   and Marcel Kyas <kyas@ifi.uio.no>
dnl
dnl Do NOT edit this file.  This file may be overwritten.  It has been
dnl automatically generated from interpreter.m4 using m4.
dnl
dnl This program is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU General Public License as
dnl published by the Free Software Foundation; either version 3 of the
dnl License, or (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.
dnl
mod `CREOL-REPLACE' is

    protecting CREOL-CONFIGURATION .

----------------------------------------------------------------------
--- replace variables by their symbolic value
----------------------------------------------------------------------
--- The symbolic value of a variable is stored in TSubst TS1`,' where
--- the variable is the key to the assigned symbolic value.  
--- replace (E1, TS1) iterates through the variables in TS1 and replaces
--- them in E1 by the respective symbolic values. 
---
--- The symbolic values are expressions in the "initial variables"`,' 
--- which currently are ordinary variables with the ending "_init".  
--- Those variables are not replaced when they occur in the expression.
---
--- TODO:  Replace the criteria for "initial" variables by a mark that 
---        is not a legal variable name in Creol.  Introduce a new 
---        mechanism to select those variables (e.g. a plugin in eclipse 
---        that changes the names on the Maude level instead of Creol 
---        code)
---
--- expl: rew replace ("&&"("<"("m" :: "mmax") :: "<"("-"("mfree" :: "t") :: "/"("m" :: "mrate"))), "m", "nte") .
--- op replace : Expr Expr Expr -> Expr .

    var ES : ExprSet .
    var EM : ExprMap .
    var EL : ExprList .
    vars V1 V2 : Vid .
    var TS1 : TSubst .
    var E E1 E2 : Expr .
    var Q : String .
    var AL : VidList .

    op replace : Expr TSubst -> Expr .
    op replace : Expr Vid Expr -> Expr .
    op replaceList : ExprList Vid Expr -> ExprList .
    op replaceSet : ExprSet Vid Expr -> ExprSet .
    op replaceMap : ExprMap Vid Expr -> ExprMap .
    op replaceVidList : VidList Vid Expr -> VidList .
    
    eq replace(EL, (V1 |> E2 , TS1) ) = replace(replace(EL, V1, E2), TS1 ) .
    eq replace(AL, (V1 |> E2 , TS1) ) = replace(replace(AL, V1, E2), TS1 ) .
    eq replace(EL, TnoSubst) = EL .
    eq replace(AL, TnoSubst) = AL .

    eq replace (Q ( EL ), V1, E1) = Q ( replaceList(EL, V1, E1) ) .
    eq replace (list(EL), V1, E1) = list(replaceList(EL, V1, E1) ) .
    eq replace (set(ES), V1, E1)  = set(replaceSet(ES, V1, E1) ) .
    eq replace (map(EM), V1, E1)  = map(replaceMap(EM, V1, E1) ) . 
    eq replace (E, V1, E1) = 
       if E == V1 and ``substr(V1, sd(length(V1),5), 5)'' =/= "_init" then
         E1
       else
         E
       fi .
    eq replace (EL, V1, E1) = replaceList(EL, V1, E1) .
    eq replace (AL, V1, E1) = replaceVidList(AL, V1, E1) .

    eq replaceList (emp, V1, E1) = emp .
    eq replaceList (E :: EL, V1, E1) = replace(E, V1, E1) :: replaceList(EL, V1, E1) .

    eq replaceVidList (V2, V1, E1) = replace(V2, V1, E1) .
    eq replaceVidList ((V2 , AL), V1, E1) = replace(V2, V1, E1) `,' replaceVidList(AL, V1, E1) .

    eq replaceSet (emptyset, V1, E1) = emptyset .
    eq replaceSet (E : ES, V1, E1) = replace(E, V1, E1) : replaceSet(ES, V1, E1) .

    eq replaceMap (empty, V1, E1) = empty .
    eq replaceMap ((mapentry(E, E1), EM), V1, E2) =
       mapentry(replace(E, V1, E2), replace(E1, V1, E2))`,' replaceMap(EM, V1, E2) .

endm
