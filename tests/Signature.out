==========================================
reduce in CREOL-SUBST : insert("var1", bool(true), noSubst) .
result Binding: "var1" |-> bool(true)
==========================================
reduce in CREOL-SUBST : insert("var2", bool(false), insert("var1", bool(true),
    noSubst)) .
result Subst: "var1" |-> bool(true), "var2" |-> bool(false)
==========================================
reduce in CREOL-SUBST : insert("var2", bool(false), insert("var1", bool(true),
    noSubst))["var1"] .
result Data: bool(true)
==========================================
reduce in CREOL-SUBST : upTerm(insert("var1", bool(false), noSubst)) .
result GroundTerm: '_|->_['"var1".String,'bool`(_`)['false.Bool]]
==========================================
reduce in CREOL-SUBST : downTerm(upTerm(insert("var1", bool(false), noSubst)),
    noSubst) .
result Binding: "var1" |-> bool(false)
==========================================
reduce in CREOL-SUBST : downTerm(upTerm(insert("var2", bool(true), insert(
    "var1", bool(false), noSubst))["var1"]), null) .
result Data: bool(false)
==========================================
reduce in CREOL-SUBST : $hasMapping(insert("var2", bool(true), insert("var1",
    bool(false), noSubst)), "var1") .
result Bool: true
==========================================
reduce in CREOL-DATA-BOOL : bool(true) .
result Data: bool(true)
==========================================
reduce in CREOL-DATA-BOOL : upTerm(bool(true)) .
result GroundTerm: 'bool`(_`)['true.Bool]
==========================================
reduce in CREOL-DATA-BOOL : downTerm(upTerm(bool(true)), null) .
result Data: bool(true)
==========================================
reduce in CREOL-EXPRESSION : ?("test") .
result Expr: ?("test")
==========================================
reduce in CREOL-EXPRESSION : upTerm(?("test")) .
result GroundTerm: '?`(_`)['"test".String]
==========================================
reduce in CREOL-EXPRESSION : downTerm(upTerm(?("test")), null) .
result Expr: ?("test")
==========================================
reduce in CREOL-STATEMENT : skip .
result Stmt: skip
==========================================
reduce in CREOL-STATEMENT : upTerm(skip) .
result Constant: 'skip.Stmt
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(skip), assign("a" ; "a")) .
result Stmt: skip
==========================================
reduce in CREOL-STATEMENT : assign("a" ; "a") .
result Stmt: assign("a" ; "a")
==========================================
reduce in CREOL-STATEMENT : upTerm(assign("a" ; "a")) .
result GroundTerm: 'assign`(_;_`)['"a".Char,'"a".Char]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(assign("a" ; "a")), skip) .
result Stmt: assign("a" ; "a")
==========================================
reduce in CREOL-STATEMENT : new("var" ; "C" ; int(5) :: bool(true)) .
result Stmt: new("var" ; "C" ; int(5) :: bool(true))
==========================================
reduce in CREOL-STATEMENT : upTerm(new("var" ; "C" ; int(5) :: bool(true))) .
result GroundTerm: 'new`(_;_;_`)['"var".String,'"C".Char,'_::_['int`(_`)['s_^5[
    '0.Zero]],'bool`(_`)['true.Bool]]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(new("var" ; "C" ; int(5) :: bool(
    true))), skip) .
result Stmt: new("var" ; "C" ; int(5) :: bool(true))
==========================================
reduce in CREOL-STATEMENT : call("l" ; "this" ; "m" ; emp) .
result Stmt: call("l" ; "this" ; "m" ; emp)
==========================================
reduce in CREOL-STATEMENT : upTerm(call("l" ; "this" ; "m" ; emp)) .
result GroundTerm: 'call`(_;_;_;_`)['"l".Char,'"this".String,'"m".Char,
    'emp.DataList]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(call("l" ; "this" ; "m" ; emp)),
    skip) .
result Stmt: call("l" ; "this" ; "m" ; emp)
==========================================
reduce in CREOL-STATEMENT : call("l" ; "this" ; "m" ; null :: null) .
result Stmt: call("l" ; "this" ; "m" ; null :: null)
==========================================
reduce in CREOL-STATEMENT : upTerm(call("l" ; "this" ; "m" ; null :: null)) .
result GroundTerm: 'call`(_;_;_;_`)['"l".Char,'"this".String,'"m".Char,'_::_[
    'null.Data,'null.Data]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(call("l" ; "this" ; "m" ; null ::
    null)), skip) .
result Stmt: call("l" ; "this" ; "m" ; null :: null)
==========================================
reduce in CREOL-STATEMENT : call("l" ; "o" ; "m" ; null :: "a") .
result Stmt: call("l" ; "o" ; "m" ; null :: "a")
==========================================
reduce in CREOL-STATEMENT : upTerm(call("l" ; "o" ; "m" ; null :: "a")) .
result GroundTerm: 'call`(_;_;_;_`)['"l".Char,'"o".Char,'"m".Char,'_::_[
    'null.Data,'"a".Char]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(call("l" ; "o" ; "m" ; null ::
    "a")), skip) .
result Stmt: call("l" ; "o" ; "m" ; null :: "a")
==========================================
reduce in CREOL-STATEMENT : get("l" ; noVid) .
result Stmt: get("l" ; noVid)
==========================================
reduce in CREOL-STATEMENT : upTerm(get("l" ; noVid)) .
result GroundTerm: 'get`(_;_`)['"l".Char,'noVid.VidList]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(get("l" ; noVid)), skip) .
result Stmt: get("l" ; noVid)
==========================================
reduce in CREOL-STATEMENT : get("l" ; "l") .
result Stmt: get("l" ; "l")
==========================================
reduce in CREOL-STATEMENT : upTerm(get("l" ; "l")) .
result GroundTerm: 'get`(_;_`)['"l".Char,'"l".Char]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(get("l" ; "l")), skip) .
result Stmt: get("l" ; "l")
==========================================
reduce in CREOL-STATEMENT : await ?("test") .
result SuspStmt: await ?("test")
==========================================
reduce in CREOL-STATEMENT : upTerm(await ?("test")) .
result GroundTerm: 'await_['?`(_`)['"test".String]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(await ?("test")), skip) .
result SuspStmt: await ?("test")
==========================================
reduce in CREOL-STATEMENT : return(emp) .
result Stmt: return(emp)
==========================================
reduce in CREOL-STATEMENT : upTerm(return(emp)) .
result GroundTerm: 'return`(_`)['emp.DataList]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(return(emp)), skip) .
result Stmt: return(emp)
==========================================
reduce in CREOL-STATEMENT : return("a" :: null :: "c") .
result Stmt: return("a" :: null :: "c")
==========================================
reduce in CREOL-STATEMENT : upTerm(return("a" :: null :: "c")) .
result GroundTerm: 'return`(_`)['_::_['"a".Char,'null.Data,'"c".Char]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(return("a" :: null :: "c")), skip)
    .
result Stmt: return("a" :: null :: "c")
==========================================
reduce in CREOL-STATEMENT : free("a") .
result Stmt: free("a")
==========================================
reduce in CREOL-STATEMENT : upTerm(free("a")) .
result GroundTerm: 'free`(_`)['"a".Char]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(free("a")), skip) .
result Stmt: free("a")
==========================================
reduce in CREOL-STATEMENT : tailcall("this" ; "m" ; emp) .
result Stmt: tailcall("this" ; "m" ; emp)
==========================================
reduce in CREOL-STATEMENT : upTerm(tailcall("this" ; "m" ; emp)) .
result GroundTerm: 'tailcall`(_;_;_`)['"this".String,'"m".Char,'emp.DataList]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(tailcall("this" ; "m" ; emp)),
    skip) .
result Stmt: tailcall("this" ; "m" ; emp)
==========================================
reduce in CREOL-STATEMENT : tailcall("this" ; "m" ; null :: "a") .
result Stmt: tailcall("this" ; "m" ; null :: "a")
==========================================
reduce in CREOL-STATEMENT : upTerm(tailcall("this" ; "m" ; null :: "a")) .
result GroundTerm: 'tailcall`(_;_;_`)['"this".String,'"m".Char,'_::_[
    'null.Data,'"a".Char]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(tailcall("this" ; "m" ; null ::
    "a")), skip) .
result Stmt: tailcall("this" ; "m" ; null :: "a")
==========================================
reduce in CREOL-STATEMENT : assert bool(true) .
result Stmt: assert bool(true)
==========================================
reduce in CREOL-STATEMENT : upTerm(assert bool(true)) .
result GroundTerm: 'assert_['bool`(_`)['true.Bool]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(assert bool(true)), skip) .
result Stmt: assert bool(true)
==========================================
reduce in CREOL-STATEMENT : failure bool(true) .
result [Stmt]: failure bool(true)
==========================================
reduce in CREOL-STATEMENT : upTerm(failure bool(true)) .
result GroundTerm: 'failure_['bool`(_`)['true.Bool]]
==========================================
reduce in CREOL-STATEMENT : downTerm(upTerm(failure bool(true)), skip) .
result [Stmt]: failure bool(true)
==========================================
reduce in CREOL-STM-LIST : noStmt .
result StmtList: noStmt
==========================================
reduce in CREOL-STM-LIST : upTerm(noStmt) .
result Constant: 'noStmt.StmtList
==========================================
reduce in CREOL-STM-LIST : downTerm(upTerm(noStmt), skip) .
result StmtList: noStmt
==========================================
reduce in CREOL-STM-LIST : skip .
result Stmt: skip
==========================================
reduce in CREOL-STM-LIST : upTerm(skip) .
result Constant: 'skip.Stmt
==========================================
reduce in CREOL-STM-LIST : downTerm(upTerm(skip), noStmt) .
result Stmt: skip
==========================================
reduce in CREOL-STM-LIST : skip .
result Stmt: skip
==========================================
reduce in CREOL-STM-LIST : upTerm(skip) .
result Constant: 'skip.Stmt
==========================================
reduce in CREOL-STM-LIST : downTerm(upTerm(skip), noStmt) .
result Stmt: skip
==========================================
reduce in CREOL-STM-LIST : assign("var" ; int(4))[]new("var" ; "C" ; null) .
result SuspStmt: assign("var" ; int(4))[]new("var" ; "C" ; null)
==========================================
reduce in CREOL-STM-LIST : upTerm(assign("var" ; int(4))[]new("var" ; "C" ;
    null)) .
result GroundTerm: '_`[`]_['assign`(_;_`)['"var".String,'int`(_`)['s_^4[
    '0.Zero]]],'new`(_;_;_`)['"var".String,'"C".Char,'null.Data]]
==========================================
reduce in CREOL-STM-LIST : downTerm(upTerm(assign("var" ; int(4))[]new("var" ;
    "C" ; null)), noStmt) .
result SuspStmt: assign("var" ; int(4))[]new("var" ; "C" ; null)
==========================================
reduce in CREOL-PROCESS : idle .
result Process: idle
==========================================
reduce in CREOL-PROCESS : upTerm(idle) .
result Constant: 'idle.Process
==========================================
reduce in CREOL-PROCESS : downTerm(upTerm(idle), idle) .
result Process: idle
==========================================
reduce in CREOL-PROCESS-POOL : noProc .
result MProc: noProc
==========================================
reduce in CREOL-PROCESS-POOL : upTerm(noProc) .
result Constant: 'noProc.MProc
==========================================
reduce in CREOL-PROCESS-POOL : downTerm(upTerm(noProc), idle) .
result MProc: noProc
==========================================
reduce in CREOL-PROCESS-POOL : idle .
result Process: idle
==========================================
reduce in CREOL-PROCESS-POOL : upTerm(idle) .
result Constant: 'idle.Process
==========================================
reduce in CREOL-PROCESS-POOL : downTerm(upTerm(idle), noProc) .
result Process: idle
==========================================
reduce in CREOL-CONFIGURATION : noInh .
result InhList: noInh
==========================================
reduce in CREOL-CONFIGURATION : upTerm(noInh) .
result Constant: 'noInh.InhList
==========================================
reduce in CREOL-CONFIGURATION : downTerm(upTerm(noInh), noInh) .
result InhList: noInh
==========================================
reduce in CREOL-CONFIGURATION : "A" < emp > .
result Inh: "A" < emp >
==========================================
reduce in CREOL-CONFIGURATION : upTerm("A" < emp >) .
result GroundTerm: '_<_>['"A".Char,'emp.DataList]
==========================================
reduce in CREOL-CONFIGURATION : downTerm(upTerm("A" < emp >), noInh) .
result Inh: "A" < emp >
==========================================
reduce in CREOL-CONFIGURATION : "A" < emp >,"B" < "x" > .
result NeInhList: "A" < emp >,"B" < "x" >
==========================================
reduce in CREOL-CONFIGURATION : upTerm("A" < emp >,"B" < "x" >) .
result GroundTerm: '_`,_['_<_>['"A".Char,'emp.DataList],'_<_>['"B".Char,
    '"x".Char]]
==========================================
reduce in CREOL-CONFIGURATION : downTerm(upTerm("A" < emp >,"B" < "x" >),
    noInh) .
result NeInhList: "A" < emp >,"B" < "x" >
==========================================
reduce in CREOL-CONFIGURATION : 
< ob("object1") : "Class" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 0 >
 .
result Object: 
< ob("object1") : "Class" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 0 >

==========================================
reduce in CREOL-CONFIGURATION : upTerm(
< ob("object1") : "Class" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 0 >
) .
result GroundTerm: '<_:_|`Att:_`,Pr:_`,PrQ:_`,Lcnt:_>['ob`(_`)[
    '"object1".String],'"Class".String,'noSubst.Subst,'idle.Process,
    'noProc.MProc,'0.Zero]
==========================================
reduce in CREOL-CONFIGURATION : downTerm(upTerm(
< ob("object1") : "Class" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 0 >
), noObj) .
result Object: 
< ob("object1") : "Class" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 0 >

==========================================
reduce in CREOL-CONFIGURATION : (none).Configuration .
result Configuration: (none).Configuration
==========================================
reduce in CREOL-CONFIGURATION : upTerm((none).Configuration) .
result Constant: 'none.Configuration
==========================================
reduce in CREOL-CONFIGURATION : downTerm(upTerm((none).Configuration), (
    none).Configuration) .
result Configuration: (none).Configuration
==========================================
reduce in CREOL-LABEL-TEST : $cont label(1) .
result Stmt: $cont label(1)
==========================================
reduce in CREOL-LABEL-TEST : upTerm($cont label(1)) .
result GroundTerm: '$cont_['label['s_['0.Zero]]]
==========================================
reduce in CREOL-LABEL-TEST : downTerm(upTerm($cont label(1)), skip) .
result Stmt: $cont label(1)
==========================================
reduce in CREOL-LABEL-TEST : $accept label(1) .
result Stmt: $accept label(1)
==========================================
reduce in CREOL-LABEL-TEST : upTerm($accept label(1)) .
result GroundTerm: '$accept_['label['s_['0.Zero]]]
==========================================
reduce in CREOL-LABEL-TEST : downTerm(upTerm($accept label(1)), skip) .
result Stmt: $accept label(1)
==========================================
reduce in CREOL-LABEL-TEST : $cont label(5) .
result Stmt: $cont label(5)
==========================================
reduce in CREOL-LABEL-TEST : upTerm($cont label(5)) .
result GroundTerm: '$cont_['label['s_^5['0.Zero]]]
==========================================
reduce in CREOL-LABEL-TEST : downTerm(upTerm($cont label(5)), skip) .
result Stmt: $cont label(5)
==========================================
reduce in CREOL-LABEL-TEST : comp(label(5), emp)
 .
result Msg: comp(label(5), emp)

==========================================
reduce in CREOL-LABEL-TEST : upTerm(comp(label(5), emp)
) .
result GroundTerm: 'comp`(_`,_`)['label['s_^5['0.Zero]],'emp.DataList]
==========================================
reduce in CREOL-LABEL-TEST : downTerm(upTerm(comp(label(5), emp)
), 

warning("")

) .
result Msg: comp(label(5), emp)

==========================================
reduce in CREOL-LABEL-TEST : invoc(ob("object1"), ob("object2"), label(5),
    "method1", emp)
 .
result Msg: invoc(ob("object1"), ob("object2"), label(5), "method1", emp)

==========================================
reduce in CREOL-LABEL-TEST : upTerm(invoc(ob("object1"), ob("object2"), label(
    5), "method1", emp)
) .
result GroundTerm: 'invoc`(_`,_`,_`,_`,_`)['ob`(_`)['"object1".String],
    'ob`(_`)['"object2".String],'label['s_^5['0.Zero]],'"method1".String,
    'emp.DataList]
==========================================
reduce in CREOL-LABEL-TEST : downTerm(upTerm(invoc(ob("object1"), ob(
    "object2"), label(5), "method1", emp)
), 

warning("")

) .
result Msg: invoc(ob("object1"), ob("object2"), label(5), "method1", emp)

Bye.
