==========================================
reduce in PROGRAM : classes .
result Configuration: 
< "Init" : Class | Inh: noInh, Param: noVid, Att: "p1" |-> null, "p2" |-> null,
    "p3" |-> null, Mtds:
  < "getNeighbor" : Method | Param: noVid, Att: "_" |-> null, "p" |-> null,
    Code: if "="("caller" :: "p1") th assign("p" ; "p3") el if "="("caller" ::
    "p2") th assign("p" ; "p1") el assign("p" ; "p2") fi fi ; return("p") >, <
    "init" : Method | Param: noVid, Att: "_" |-> null, Code: new("p1" ;
    "Process" ; "this" :: int(1)) ; new("p2" ; "Process" ; "this" :: int(2)) ;
    new("p3" ; "Process" ; "this" :: int(3)) ; return(emp) >, < "run" : Method
    | Param: noVid, Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 0 >
 
< "Process" : Class | Inh: noInh, Param: "i", "u", Att: "i" |-> null,
    "neighbor" |-> null, "status" |-> null, "u" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, "label:0" |-> null,
    "label:1" |-> null, Code: assign("status" ; int(0)) ; call("label:0" ; "i"
    ; "getNeighbor" ; emp) ; get("label:0" ; "neighbor") ; free("label:0") ;
    call("label:1" ; "neighbor" ; "receive" ; "u") ; free("label:1") ; return(
    emp) >, < "receive" : Method | Param: "v", Att: "_" |-> null, "label:0" |->
    null, "v" |-> null, Code: if ">"("v" :: "u") th call("label:0" ; "neighbor"
    ; "receive" ; "v") ; free("label:0") el if "="("v" :: "u") th assign(
    "status" ; int(1)) el skip fi fi ; return(emp) >, < "run" : Method | Param:
    noVid, Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 0 >

==========================================
rewrite in PROGRAM : main(classes, "Init", emp) .
result State: {
< ob("Init0") : "Init" |
  Att: "p1" |-> ob("Process0"), "p2" |-> ob("Process1"), "p3" |-> ob(
    "Process2"), "this" |-> ob("Init0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 2 >
 
< ob("Process0") : "Process" |
  Att: "i" |-> ob("Init0"), "neighbor" |-> ob("Process2"), "status" |-> int(0),
    "this" |-> ob("Process0"), "u" |-> int(1),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 6 >
 
< ob("Process1") : "Process" |
  Att: "i" |-> ob("Init0"), "neighbor" |-> ob("Process0"), "status" |-> int(0),
    "this" |-> ob("Process1"), "u" |-> int(2),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 5 >
 
< ob("Process2") : "Process" |
  Att: "i" |-> ob("Init0"), "neighbor" |-> ob("Process1"), "status" |-> int(1),
    "this" |-> ob("Process2"), "u" |-> int(3),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 4 >
 
< ob("main") : "" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 0 >
 
< "Init" : Class | Inh: noInh, Param: noVid, Att: "p1" |-> null, "p2" |-> null,
    "p3" |-> null, Mtds:
  < "getNeighbor" : Method | Param: noVid, Att: "_" |-> null, "p" |-> null,
    Code: if "="("caller" :: "p1") th assign("p" ; "p3") el if "="("caller" ::
    "p2") th assign("p" ; "p1") el assign("p" ; "p2") fi fi ; return("p") >, <
    "init" : Method | Param: noVid, Att: "_" |-> null, Code: new("p1" ;
    "Process" ; "this" :: int(1)) ; new("p2" ; "Process" ; "this" :: int(2)) ;
    new("p3" ; "Process" ; "this" :: int(3)) ; return(emp) >, < "run" : Method
    | Param: noVid, Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 1 >
 
< "Process" : Class | Inh: noInh, Param: "i", "u", Att: "i" |-> null,
    "neighbor" |-> null, "status" |-> null, "u" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, "label:0" |-> null,
    "label:1" |-> null, Code: assign("status" ; int(0)) ; call("label:0" ; "i"
    ; "getNeighbor" ; emp) ; get("label:0" ; "neighbor") ; free("label:0") ;
    call("label:1" ; "neighbor" ; "receive" ; "u") ; free("label:1") ; return(
    emp) >, < "receive" : Method | Param: "v", Att: "_" |-> null, "label:0" |->
    null, "v" |-> null, Code: if ">"("v" :: "u") th call("label:0" ; "neighbor"
    ; "receive" ; "v") ; free("label:0") el if "="("v" :: "u") th assign(
    "status" ; int(1)) el skip fi fi ; return(emp) >, < "run" : Method | Param:
    noVid, Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 3 >
}
Bye.
