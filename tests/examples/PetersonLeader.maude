load creol-interpreter .
mod PROGRAM is
  protecting CREOL-SIMULATOR .
  op state : -> State [ctor] .
  eq state = {
    < "Process" : Class | Inh: noInh, Param: "i", "main", Att: "i" |-> null,
      "main" |-> null, "neighbour" |-> null, "mode" |-> null, "status" |->
      null, "uid1" |-> null, "uid2" |-> null,
      Mtds: < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "init" : Method | Param: noVid, Att: "ccglab1" |-> null,
              "ccglab0" |-> null, "_" |-> null,
              Code: assign( ( "mode" @ "Process" ), ( "status" @ "Process" ),
              ( "uid1" @ "Process" ) ; bool(true) :: int(0) :: "i" ) ;
              call( "ccglab0" ; "main" ; "getNeighbour" ; emp ) ;
              get( "ccglab0" ; "neighbour" ) ; free( "ccglab0" ) ;
              call( "ccglab1" ; "neighbour" ; "send" ; "i" ) ;
              free( "ccglab1" ) ; return ( emp ) >,
            < "send" : Method | Param: "u", Att: "u" |-> null, "ccglab2" |->
              null, "ccglab1" |-> null, "ccglab0" |-> null, "_" |-> null,
              Code: if "mode" th if "=" ( "uid2" :: null ) th if "=" ( "u" ::
              "uid1" ) th assign( "status" ; int(1) ) el
              assign( "uid2" ; "u" ) ; call( "ccglab0" ; "neighbour" ;
              "send" ; "u" ) ; free( "ccglab0" ) fi el if "&&" ( ">" ( "uid2"
              :: "uid1" ) :: ">" ( "uid2" :: "u" ) ) th assign( "uid1",
              "uid2" ; "uid2" :: null ) ; call( "ccglab1" ; "neighbour" ;
              "send" ; "uid1" ) ; free( "ccglab1" ) el
              assign( "mode" ; bool(false) ) fi fi el call( "ccglab2" ;
              "neighbour" ; "send" ; "u" ) ; free( "ccglab2" ) fi ;
              return ( emp ) >,
      Ocnt: 0 >
    
    < "Main" : Class | Inh: noInh, Param: noVid, Att: "p1" |-> null, "p2" |->
      null, "p3" |-> null, "p4" |-> null, "p5" |-> null,
      Mtds: < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "init" : Method | Param: noVid, Att: "_" |-> null,
              Code: new( "p1" ; "Process" ; int(1) :: "this" ) ;
              new( "p2" ; "Process" ; int(3) :: "this" ) ;
              new( "p3" ; "Process" ; int(5) :: "this" ) ;
              new( "p4" ; "Process" ; int(4) :: "this" ) ;
              new( "p5" ; "Process" ; int(2) :: "this" ) ; return ( emp ) >,
            < "getNeighbour" : Method | Param: noVid, Att: "n" |-> null, "_"
              |-> null, Code: if "=" ( "caller" :: "p1" ) th
              assign( "n" ; "p2" ) el if "=" ( "caller" :: "p2" ) th
              assign( "n" ; "p3" ) el if "=" ( "caller" :: "p3" ) th
              assign( "n" ; "p4" ) el if "=" ( "caller" :: "p4" ) th
              assign( "n" ; "p5" ) el if "=" ( "caller" :: "p5" ) th
              assign( "n" ; "p1" ) el skip fi fi fi fi fi ; return ( "n" ) >,
      Ocnt: 0 > } .
endm

