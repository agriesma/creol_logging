/*
 * SantaClaus.creol -- Santa claus synchronisation problem
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 * Original creol version by Ivar Alm
 *
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
interface SantaClausR
begin with Reindeer
  op backFromHoliday
end

interface SantaClausE
begin with Elf
  op haveProblem
end

interface SantaClaus inherits SantaClausR, SantaClausE
begin
end

interface Reindeer
begin
  with SantaClausR
    op harness
    op unharness
end

interface Elf
begin with SantaClausE
  // op enterOffice
  // op leaveOffice
  op showIn
  op showOut
end



class SantaClaus contracts SantaClaus
begin
  var ctReindeers: Int := 0
  var waitReindeers: List[Reindeer] := nil
  var harnessedReindeers: List[Reindeer] := nil
  var ctElves: Int := 0
  var waitElves: List[Elf] := nil
  var inofficeElves: List[Elf]  := nil

  op run == !loop()

  op loop == begin await ctReindeers = 5; deliverToys(;) []
              await  3 <= ctElves && ~ ctReindeers = 9; talkToElves(;) end ;
             !loop()

  op deliverToys ==
    var t1: Label[ ];
    var t2: Label[ ];
    var t3: Label[ ];
    var t4: Label[ ];
    var t5: Label[ ];
    ctReindeers := 0;
    t1!head(waitReindeers).harness(); 
    harnessedReindeers := harnessedReindeers |- head(waitReindeers); 
    waitReindeers := tail(waitReindeers);
    t2!head(waitReindeers).harness(); 
    harnessedReindeers := harnessedReindeers |- head(waitReindeers); 
    waitReindeers := tail(waitReindeers);
    t3!head(waitReindeers).harness(); 
    harnessedReindeers := harnessedReindeers |- head(waitReindeers); 
    waitReindeers := tail(waitReindeers);
    t4!head(waitReindeers).harness(); 
    harnessedReindeers := harnessedReindeers |- head(waitReindeers); 
    waitReindeers := tail(waitReindeers);
    t5!head(waitReindeers).harness(); 
    harnessedReindeers := harnessedReindeers |- head(waitReindeers); 
    waitReindeers := tail(waitReindeers);
    await t1? && t2? && t3? && t4? && t5?;
    // <Deliver Toys>;
    !head(harnessedReindeers).unharness();
    harnessedReindeers := tail(harnessedReindeers);
    // ....;
    !head(harnessedReindeers).unharness();
    harnessedReindeers := tail(harnessedReindeers)

  op talkToElves ==
        var t1: Label[ ];
        var t2: Label[ ];
        var t3: Label[ ];
	ctElves := ctElves - 3; 
	t1!head(waitElves).showIn();
	inofficeElves := inofficeElves |- head(waitElves);
	waitElves := tail(waitElves);
	t2!head(waitElves).showIn();
	inofficeElves := inofficeElves |- head(waitElves);
	waitElves := tail(waitElves);
	t3!head(waitElves).showIn();
	inofficeElves := inofficeElves |- head(waitElves);
	waitElves := tail(waitElves);
	await t1? && t2? && t3?;
	// <Talk to elves>;
	t1!head(inofficeElves).showOut();
	inofficeElves := tail(inofficeElves);
	t2!head(inofficeElves).showOut();
	inofficeElves := tail(inofficeElves);
	t3!head(inofficeElves).showOut();
	inofficeElves := tail(inofficeElves);
	await t1? && t2? && t3?

with Reindeer
  op backFromHoliday ==
	ctReindeers := ctReindeers + 1; 
	waitReindeers := waitReindeers |- caller

with Elf
  op haveProblem ==
	ctElves := ctElves + 1; 
	waitElves := waitElves |- caller
end


class Reindeer(sc: SantaClaus)
  contracts Reindeer
begin
  op run == !holiday()

  op holiday == /* <go on holiday>; */ !sc.backFromHoliday()

  op deliverToys == skip // <deliver Toys>

  with SantaClausR
    op harness == !deliverToys()
    op unharness == !holiday()
end



class Elf(sc:SantaClaus) contracts Elf
begin 
  op run == !work()
  op work == // <do work>;
		!sc.haveProblem()
  op talkToSanta == skip // <talk to Santa>

with SantaClausE
  op showIn == !talkToSanta()
  op showOut == !work()
end

class LeaderElf(sc:SantaClaus, elves: List[Elf])
  inherits Elf(sc)
  contracts Elf
begin
  op run == run:>Elf(;)
  op work ==
	// (<Lead elves> ||| <Make toys>);
	!sc.haveProblem()
end

class Christmas
begin
  op run == 
	var sc:SantaClaus;
	var r:Reindeer;
	var e:Elf;
	sc := new SantaClaus();
	r := new Reindeer(sc);
	r := new Reindeer(sc);
	r := new Reindeer(sc);
	r := new Reindeer(sc);
	r := new Reindeer(sc);
	e := new Elf(sc);
	e := new Elf(sc);
	e := new Elf(sc);
	e := new Elf(sc);
	e := new Elf(sc);
	e := new Elf(sc);
	e := new Elf(sc)
end

//	#COMMENTS:
//
//	Local synchronous calls: m(...;...) is same as t!m(...;..); t?() //-
//	an abbrevation. 
//
//	!m(..)  || with no arguments  !m  starts the method call m but does
//	~ wait for any answer...
