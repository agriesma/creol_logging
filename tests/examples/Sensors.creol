/*
 * Sensors.creol -- Primitive sensor networks.
 *
 * This file is part of creoltools
 *
 * Written and Copyright (c) 2007 by Marcel Kyas
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

interface Network
begin
  with Radio
    op send (in data: Data)
end

interface Radio
begin
  with Network
    op send (in data: Data)
    op send (in update: Data)
  with Controller
    op write (in data: Data)
    op read (out data: Data)
    op setPower (in power: Int)
    op setState (in state: Int)
    op getChannelStatus (out status: Int)
    op getError (out error: Int)
end

interface Controller
begin
  with Sensor
    op write (in value: Data)
end

interface Sensor
begin
  with Controller
    op setResolution (in res: Data)
    op setEncoding (in encoding: Data)
    op switchOn
    op switchOff
end

interface PassiveSensor inherits Sensor
begin
  with Controller
    op read(out value: Data)
  with Radio
    op setRate (in newRate: Duration)
end

interface ActiveSensor inherits Sensor
begin
  with Controller
    op setRate(in rate: Duration)
end

class PassiveTempSensor contracts PassiveSensor
begin
  with Controller
    op setResolution (in res: Data) == skip
    op setEncoding (in encoding: Data) == skip
    op switchOn == skip
    op switchOff == skip
    op read (out value: Data) == value := 37
  with Radio
    op setRate (in newRate: Duration) == skip
end

class SimpleSensorNode(sensor: PassiveSensor, radio: Radio, size: Int,
		       initialRate: Duration)
  contracts Controller
begin
  var buffer: List[Data]
  var slots: Int
  var t0: Time
  var rate: Duration

  op init == buffer := nil; slots := size; rate := initialRate; t0 := now

  op run == read(;); await now >= t0 + rate; posit now <= t0 + rate; t0 := now;
    !run()

  op read == var temp: Data; sensor.read(; temp); posit now <= t0;
    await slots > 0; buffer := buffer |- temp; slots := slots - 1;
    if slots = 0 then packAndSend(;) end

  op packAndSend == radio.write(this -| now -| buffer;); buffer := nil;
    slots := size

  with Radio
    op setRate(in newRate: Duration) ==
      if newRate < rate && now > t0 + newRate then t0 := now; read(;) end;
      rate := newRate; posit now < t0 + rate

  with Sensor
    op write(in data: Data) == skip
end

class TwoSimpleSensorNode(sensor0: PassiveSensor, sensor1: PassiveSensor,
		          radio: Radio, size: Int,
		          initialRate0: Duration, initialRate1: Duration)
  contracts Controller
begin
  var buffer: List[Data]
  var slots: Int
  var t0: Time
  var t1: Time
  var rate0: Duration
  var rate1: Duration

  op init ==
    buffer, slots, rate0, rate1, t0, t1 :=
      nil, size, initialRate0, initialRate1, now, now

  op run == !run0() ; !run1()

  op run0 == read0(;); await now >= t0 + rate0; posit now <= t0 + rate0;
    t0 := now; !run0()

  op read0 == var temp: Data; sensor0.read(; temp); posit now <= t0;
    await slots > 0; buffer := buffer |- temp; slots := slots - 1;
    if slots = 0 then packAndSend(;) end

  op run1 == read1(;); await now >= t1 + rate1; posit now <= t1 + rate1;
    t1 := now; !run1()

  op read1 == var temp: Data; sensor1.read(; temp); posit now <= t1;
    await slots > 0; buffer := buffer |- temp; slots := slots - 1;
    if slots = 0 then packAndSend(;) end

  op packAndSend == radio.write(this -| now -| buffer;); buffer := nil;
    slots := size

  with Radio
    op setRate(in newRate: Duration) ==
      if newRate < rate0 && now > t0 + newRate then t0 := now; read0(;) end;
      rate0 := newRate; posit now < t0 + rate0

  with Sensor
    op write(in data: Data) == skip
end

class ActiveSensor(controller: Controller, initialRate: Duration)
  contracts Sensor
begin
  var rate: Duration
  var t0: Time

  op init == rate, t0 := initialRate, now

  op run == await now >= t0 + rate; controller.write(37;);
    posit now <= t0 + rate; t0 := now

  with Controller
    op setRate(in newRate: Duration) ==
      if newRate < rate && now > t0 + newRate then
        controller.write(37;); t0 := now
      end;
      rate := newRate; posit now < t0 + rate

    op setResolution(in data: Data) == skip

    op setEncoding(in data: Data) == skip

    op switchOn == skip

    op switchOff == skip
end
