load creol-interpreter .
mod PROGRAM is
  protecting CREOL-SIMULATOR .
  op state : -> State [ctor] .
  eq state = {
    < "Buffer" : Class | Inh: noInh, Param: noVid, Att: "cell" |-> null,
      "ctr" |-> null, "next" |-> null,
      Mtds: < "init" : Method | Param: noVid, Att: "_" |-> null,
              Code: assign( "ctr" ; int(0) ) ; return ( emp ) >,
            < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "put" : Method | Param: "x", Att: "x" |-> null, "ccglab0" |->
              null, "_" |-> null, Code: if "=" ( "ctr" :: int(0) ) th
              assign( "cell" ; "x" ) el if "=" ( "next" :: null ) th
              new( "next" ; "Buffer" ; emp ) el skip fi ; call( "ccglab0" ;
              "next" ; "put" ; "x" ) ; get( "ccglab0" ; noVid ) ;
              free( "ccglab0" ) fi ; assign( "ctr" ; "+" ( "ctr" ::
              int(1) ) ) ; return ( emp ) >,
            < "get" : Method | Param: noVid, Att: "x" |-> null, "ccglab0" |->
              null, "_" |-> null, Code: await ">" ( "ctr" :: int(0) ) ; if
              "/=" ( "cell" :: null ) th assign( "x" ; "cell" ) el
              call( "ccglab0" ; "next" ; "get" ; emp ) ;
              get( "ccglab0" ; "x" ) ; free( "ccglab0" ) fi ;
              assign( "ctr" ; "-" ( "ctr" :: int(1) ) ) ;
              assign( "cell" ; null ) ; return ( "x" ) >,
      Ocnt: 0 > } .
endm

