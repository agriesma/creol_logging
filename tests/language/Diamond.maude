load creol-interpreter .
mod PROGRAM is
  protecting CREOL-SIMULATOR .
  op state : -> State [ctor] .
  eq state = {
    < "A" : Class | Inh: noInh, Param: "a", Att: "a" |-> null,
      Mtds: < "init" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "m" : Method | Param: noVid, Att: "r" |-> null, "_" |-> null,
              Code: assign( "r" ; "a" ) ; return ( "r" ) >,
      Ocnt: 0 >
    
    < "B" : Class | Inh: "A" < "b" >, Param: "b", Att: "b" |-> null,
      Mtds: < "init" : Method | Param: noVid, Att: "_" |-> null, Code: assert
              "=" ( "a" :: "b" ) ; return ( emp ) >,
            < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "n" : Method | Param: noVid, Att: "r" |-> null, "ccglab0" |->
              null, "_" |-> null,
              Code: call( "ccglab0" ; "this" ; "m" ; emp ) ;
              get( "ccglab0" ; "r" ) ; free( "ccglab0" ) ; return ( "r" ) >,
      Ocnt: 0 >
    
    < "C" : Class | Inh: "A" < "c" >, Param: "c", Att: "c" |-> null,
      Mtds: < "init" : Method | Param: noVid, Att: "_" |-> null, Code: assert
              "=" ( "a" :: "c" ) ; return ( emp ) >,
            < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "o" : Method | Param: noVid, Att: "r" |-> null, "ccglab0" |->
              null, "_" |-> null,
              Code: call( "ccglab0" ; "this" ; "m" ; emp ) ;
              get( "ccglab0" ; "r" ) ; free( "ccglab0" ) ; return ( "r" ) >,
      Ocnt: 0 >
    
    < "D" : Class | Inh: "B" < int(1) >, "C" < int(2) >, Param: noVid,
      Att: "x" |-> null, "y" |-> null,
      Mtds: < "init" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
              return ( emp ) >,
            < "run" : Method | Param: noVid, Att: "ccglab1" |-> null,
              "ccglab0" |-> null, "_" |-> null,
              Code: call( "ccglab0" ; "this" ; "n" ; emp ) ;
              get( "ccglab0" ; "x" ) ; free( "ccglab0" ) ;
              call( "ccglab1" ; "this" ; "o" ; emp ) ; get( "ccglab1" ; "y" )
              ; free( "ccglab1" ) ; assert "&&" ( "=" ( "x" :: int(1) ) ::
              "=" ( "y" :: int(2) ) ) ; return ( emp ) >,
      Ocnt: 0 > } .
endm

