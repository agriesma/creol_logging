==========================================
rewrite in PROGRAM : main(state, "Hello", int(2)) .
result State: {
<choice Number: 28 Type: "ifthenelse" Expression: ">"(
    "Hello-0.repetitions_init" :: int(0)) >
 
<choice Number: 37 Type: "ifthenelse" Expression: ">"("-"(
    "Hello-0.repetitions_init" :: int(1)) :: int(0)) >
 
< ob("Console-0") : "Console" |
  Att: "output" |-> list(str("hello, world") :: str("hello, world2")), "this"
    |-> ob("Console-0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 2 >
 
< ob("Hello-0") : "Hello" |
  Att: "console" |-> ob("Console-0"), "repetitions_init" |-> int(2), "this" |->
    ob("Hello-0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 5 >
 
< ob("log") : "" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 47 >
 
< "Console" : Class | Inh: noInh, Param: noVid, Att: "output" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, Code: assign("output" @
    "Console" ; list(emp)) ; return(emp) >, < "print" : Method | Param:
    "newstring", Att: "_" |-> null, "newstring" |-> null, Code: assign("output"
    ; "|-"("output" :: "newstring")) ; return(emp) >, < "run" : Method | Param:
    noVid, Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 1 >
 
< "Hello" : Class | Inh: noInh, Param: "repetitions_init", Att: "console" |->
    null, "repetitions_init" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, Code: new("console" ;
    "Console" ; emp) ; return(emp) >, < "run" : Method | Param: noVid, Att: "_"
    |-> null, "ccglab0" |-> null, "ccglab1" |-> null, "x" |-> null, Code:
    assign("x" ; "repetitions_init") ; if ">"("x" :: int(0)) th call("ccglab0"
    ; "console" ; "print" ; str("hello, world")) ; get("ccglab0" ; noVid) ;
    free("ccglab0") ; assign("x" ; "-"("x" :: int(1))) ; if ">"("x" :: int(0))
    th call("ccglab1" ; "console" ; "print" ; str("hello, world2")) ; get(
    "ccglab1" ; noVid) ; free("ccglab1") ; assign("x" ; "-"("x" :: int(1))) el
    skip fi el skip fi ; return(emp) >,
  Ocnt: 1 >
 
<log From: 0 To: 47 Type: "lastrun"
    Data:{skip ; new("var" ; "Hello" ; int(2)) ; assign("Hello-0.this" ; ob(
    "Hello-0")) ; assign("Hello-0.repetitions_init" ; int(2)) ; call(".anon" ;
    "this" ; "init" ; emp) ; assign("nolabel.var" ; ob("Hello-0")) ; assign(
    "Hello-0-0.caller", "Hello-0-0..class", "Hello-0-0..label",
    "Hello-0-0..method" ; ob("Hello-0") :: str("Hello") :: label(ob("Hello-0"),
    0) :: str("init")) ; new("console" ; "Console" ; emp) ; assign(
    "Console-0.this" ; ob("Console-0")) ; assign("Hello-0.console" ; ob(
    "Console-0")) ; call(".anon" ; "this" ; "init" ; emp) ; return(emp) ;
    assign("Console-0-0.caller", "Console-0-0..class", "Console-0-0..label",
    "Console-0-0..method" ; ob("Console-0") :: str("Console") :: label(ob(
    "Console-0"), 0) :: str("init")) ; assign("output" @ "Console" ; list(emp))
    ; return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "Console-0-1.caller", "Console-0-1..class", "Console-0-1..label",
    "Console-0-1..method" ; ob("Console-0") :: str("Console") :: label(ob(
    "Console-0"), 1) :: str("run")) ; return(emp) ; call(".anon" ; "this" ;
    "run" ; emp) ; assign("Hello-0-2.caller", "Hello-0-2..class",
    "Hello-0-2..label", "Hello-0-2..method" ; ob("Hello-0") :: str("Hello") ::
    label(ob("Hello-0"), 2) :: str("run")) ; assign("Hello-0-2.x" ;
    "Hello-0.repetitions_init") ; if ">"("x" :: int(0)) th skip el skip fi ;
    call("ccglab0" ; "console" ; "print" ; str("hello, world")) ; assign(
    "Hello-0-3.caller", "Hello-0-3..class", "Hello-0-3..label",
    "Hello-0-3..method" ; ob("Hello-0") :: str("Console") :: label(ob(
    "Hello-0"), 3) :: str("print")) ; assign("Hello-0-3.newstring" ; str(
    "hello, world")) ; assign("Console-0.output" ; "|-"("Console-0.output" ::
    "Hello-0-3.newstring")) ; return(emp) ; assign("Hello-0-2.x" ; "-"(
    "Hello-0-2.x" :: int(1))) ; if ">"("x" :: int(0)) th skip el skip fi ;
    call("ccglab1" ; "console" ; "print" ; str("hello, world2")) ; assign(
    "Hello-0-4.caller", "Hello-0-4..class", "Hello-0-4..label",
    "Hello-0-4..method" ; ob("Hello-0") :: str("Console") :: label(ob(
    "Hello-0"), 4) :: str("print")) ; assign("Hello-0-4.newstring" ; str(
    "hello, world2")) ; assign("Console-0.output" ; "|-"("Console-0.output" ::
    "Hello-0-4.newstring")) ; return(emp) ; assign("Hello-0-2.x" ; "-"(
    "Hello-0-2.x" :: int(1))) ; return(emp) | 
  "Console-0-0..class" |> str("Console"), 
  "Console-0-0..label" |> label(ob("Console-0"), 0), 
  "Console-0-0..method" |> str("init"), 
  "Console-0-0.caller" |> ob("Console-0"), 
  "Console-0-1..class" |> str("Console"), 
  "Console-0-1..label" |> label(ob("Console-0"), 1), 
  "Console-0-1..method" |> str("run"), 
  "Console-0-1.caller" |> ob("Console-0"), 
  "Console-0.output" |> list(str("hello, world") :: str("hello, world2")), 
  "Console-0.this" |> ob("Console-0"), 
  "Hello-0-0..class" |> str("Hello"), 
  "Hello-0-0..label" |> label(ob("Hello-0"), 0), 
  "Hello-0-0..method" |> str("init"), 
  "Hello-0-0.caller" |> ob("Hello-0"), 
  "Hello-0-2..class" |> str("Hello"), 
  "Hello-0-2..label" |> label(ob("Hello-0"), 2), 
  "Hello-0-2..method" |> str("run"), 
  "Hello-0-2.caller" |> ob("Hello-0"), 
  "Hello-0-2.x" |> "-"("-"("Hello-0.repetitions_init" :: int(1)) :: int(1)), 
  "Hello-0-3..class" |> str("Console"), 
  "Hello-0-3..label" |> label(ob("Hello-0"), 3), 
  "Hello-0-3..method" |> str("print"), 
  "Hello-0-3.caller" |> ob("Hello-0"), 
  "Hello-0-3.newstring" |> str("hello, world"), 
  "Hello-0-4..class" |> str("Console"), 
  "Hello-0-4..label" |> label(ob("Hello-0"), 4), 
  "Hello-0-4..method" |> str("print"), 
  "Hello-0-4.caller" |> ob("Hello-0"), 
  "Hello-0-4.newstring" |> str("hello, world2"), 
  "Hello-0.console" |> ob("Console-0"), 
  "Hello-0.repetitions_init" |> int(2), 
  "Hello-0.this" |> ob("Hello-0"), 
  "nolabel.var" |> ob("Hello-0") | 
  "Hello-0-3" |> list(str("hello, world")), 
  "Hello-0-4" |> list(str("hello, world2")), 
  "main-0" |> list(int(2))}Att: noSubst Label: "lastrun" >
}
Bye.
