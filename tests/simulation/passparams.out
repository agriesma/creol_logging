==========================================
rewrite in CREOL-SIMULATOR : {(
<log From: 0 To: 0 Type: "lastrun"
    Data:{skip | TnoSubst | TnoSubst}Att: noSubst Label: "lastrun" >
 
<log From: 1 To: 2 Type: "$marker"
    Data:{$marker("call createmarker Hello0", int(2)) | 
  "el" |> int(2) | 
  "dest" |> "main-0"}Att: noSubst Label: "main-0" >
) 
<log From: 0 To: 1 Type: "create"
    Data:{new("var" ; "Hello" ; int(2)) | 
  "0" |> int(2) | 
  "dest" |> "Hello0"}Att: noSubst Label: "nolabel" >
} .
result State: {
<log From: 0 To: 1 Type: "lastrun"
    Data:{skip ; new("var" ; "Hello" ; int(2)) | TnoSubst | 
  "Hello0" |> list(int(2))}Att: noSubst Label: "lastrun" >
 
<log From: 1 To: 2 Type: "$marker"
    Data:{$marker("call createmarker Hello0", int(2)) | 
  "el" |> int(2) | 
  "dest" |> "main-0"}Att: noSubst Label: "main-0" >
}
==========================================
rewrite in CREOL-SIMULATOR : {((
<log From: 1 To: 2 Type: "$marker"
    Data:{$marker("call createmarker Hello0", int(2)) | 
  "el" |> int(2) | 
  "dest" |> "main-0"}Att: noSubst Label: "main-0" >
 
<log From: 2 To: 3 Type: "assign"
    Data:{assign("repetitions_init" ; int(2)) | 
  "repetitions_init" |> int(2) | TnoSubst}Att: noSubst Label: "main-0" >
) 
<log From: 0 To: 0 Type: "lastrun"
    Data:{skip | TnoSubst | TnoSubst}Att: noSubst Label: "lastrun" >
) 
<log From: 0 To: 1 Type: "create"
    Data:{new("var" ; "Hello" ; int(2)) | 
  "0" |> int(2) | 
  "dest" |> "Hello0"}Att: noSubst Label: "nolabel" >
} .
result [State]: {
<log From: 0 To: 2 Type: "lastrun"
    Data:{skip ; new("var" ; "Hello" ; int(2)) | TnoSubst | 
  "Hello0" |> list(int(2))}Att: noSubst Label: "lastrun" >
 
<log From: 2 To: 3 Type: "assign"
    Data:{assign("repetitions_init" ; unpack(undeftrans)) | getTrans(assign(
    "repetitions_init" ; unpack(undeftrans))) | 
  "dest" |> "main-0"}Att: noSubst Label: "main-0" >
}
==========================================
rewrite in CREOL-SIMULATOR : 
  "Console0.output" |> list(emp), 
  "Hello0-2.x" |> "repetitions_init", 
  "Hello0.console" |> ob("Console0"), 
  "nolabel.var" |> ob("Hello0"), 
  "repetitions_init" |> list(int(2)) .
result TSubst: 
  "Console0.output" |> list(emp), 
  "Hello0-2.x" |> "repetitions_init", 
  "Hello0.console" |> ob("Console0"), 
  "nolabel.var" |> ob("Hello0"), 
  "repetitions_init" |> list(int(2))
==========================================
rewrite in CREOL-SIMULATOR : 
  "Hello0-3" |> list(str("hello, world") :: "Hello0-2.x"), 
  "main-0" |> list(int(2)) .
result TSubst: 
  "Hello0-3" |> list(str("hello, world") :: "Hello0-2.x"), 
  "main-0" |> list(int(2))
==========================================
rewrite in CREOL-SIMULATOR : {(
<log From: 23 To: 24 Type: "$marker"
    Data:{$marker("call callmarker", str("hello, world") :: int(2)) | 
  "el" |> list(str("hello, world") :: int(2)) | 
  "dest" |> "Hello0-3"}Att: noSubst Label: "Hello0-3" >
 
<log From: 24 To: 25 Type: "assign"
    Data:{assign("Hello0-3.newstring", "Hello0-3.repetitions" ; str(
    "hello, world") :: int(2)) | 
  "Hello0-3.newstring" |> str("hello, world"), 
  "Hello0-3.repetitions" |> int(2) | TnoSubst}Att: noSubst Label: "Hello0-3" >
) 
<log From: 0 To: 23 Type: "lastrun"
    Data:{skip | 
  "Console0.output" |> list(emp), 
  "Hello0-2.x" |> "repetitions_init", 
  "Hello0.console" |> ob("Console0"), 
  "nolabel.var" |> ob("Hello0"), 
  "repetitions_init" |> list(int(2)) | 
  "Hello0-3" |> list(str("hello, world") :: "Hello0-2.x"), 
  "main-0" |> list(int(2))}Att: noSubst Label: "lastrun" >
} .
result State: {
<log From: 0 To: 25 Type: "lastrun"
    Data:{skip ; assign("Hello0-3.newstring", "Hello0-3.repetitions" ; str(
    "hello, world") :: "Hello0-2.x") | 
  "Console0.output" |> list(emp), 
  "Hello0-2.x" |> "repetitions_init", 
  "Hello0-3.newstring" |> str("hello, world"), 
  "Hello0-3.repetitions" |> "repetitions_init", 
  "Hello0.console" |> ob("Console0"), 
  "nolabel.var" |> ob("Hello0"), 
  "repetitions_init" |> list(int(2)) | 
  "Hello0-3" |> list(str("hello, world") :: "Hello0-2.x"), 
  "main-0" |> list(int(2))}Att: noSubst Label: "lastrun" >
}
Bye.
