==========================================
rewrite [6000] in PROGRAM : main(classes, "Main", int(2) :: int(1)) .
result State: {discard(label(ob("Monk0"), 1))
 discard(label(ob("Monk1"), 1))
 
<choice Number: 45 Type: "ifthenelse" Expression: "<"(int(0) ::
    "Main0.nthreads_init") >
 
<choice Number: 90 Type: "ifthenelse" Expression: "<"(int(1) ::
    "Main0.nthreads_init") >
 
<choice Number: 108 Type: "ifthenelse" Expression: "~"("<"(int(2) ::
    "Main0.nthreads_init")) >
 
<choice Number: 212 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 228 Type: "await" Expression: bool(true) >
 
<choice Number: 247 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 272 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 284 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 316 Type: "blocked await" Expression: "~"("&&"(?("l1") :: ?(
    "l2"))) >
 
<choice Number: 319 Type: "blocked await" Expression: bool(true) >
 
<choice Number: 322 Type: "blocked await" Expression: "~"("&&"("<"(int(2) ::
    "+"("Main0.maxthreads_init" :: int(1))) :: bool(false))) >
 
<choice Number: 325 Type: "await" Expression: bool(true) >
 
<choice Number: 336 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 378 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 390 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 439 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 459 Type: "await" Expression: bool(true) >
 
<choice Number: 470 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 512 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 524 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 573 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 593 Type: "await" Expression: bool(true) >
 
<choice Number: 604 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 646 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 658 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 707 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 727 Type: "await" Expression: bool(true) >
 
<choice Number: 738 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 780 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 792 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 841 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 861 Type: "await" Expression: bool(true) >
 
<choice Number: 872 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 914 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 926 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 975 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 995 Type: "await" Expression: bool(true) >
 
<choice Number: 1006 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1048 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1060 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1109 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1129 Type: "await" Expression: bool(true) >
 
<choice Number: 1140 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1182 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1194 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1243 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1263 Type: "await" Expression: bool(true) >
 
<choice Number: 1274 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1316 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1328 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1377 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1397 Type: "await" Expression: bool(true) >
 
<choice Number: 1408 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1450 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1462 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1511 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1531 Type: "await" Expression: bool(true) >
 
<choice Number: 1542 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-1.caller" :: null) >
 
<choice Number: 1567 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1609 Type: "ifthenelse" Expression: "/="(
    "ShepherdTask0-3.caller" :: null) >
 
<choice Number: 1628 Type: "blocked await" Expression: bool(true) >
 
< ob("Abbey0") : "Abbey" |
  Att: "busyCounter" |-> ob("Counter3"), "maxNofThreads" |-> int(1), "size" |->
    int(2), "taskCounter" |-> ob("Counter1"), "taskQueue" |-> ob("TaskQueue0"),
    "this" |-> ob("Abbey0"), "threadCounter" |-> ob("Counter2"), "threads" |->
    list(ob("Monk0") :: ob("Monk1")),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 24 >
 
< ob("Counter0") : "Counter" |
  Att: "observer" |-> null, "observertoken" |-> str(""), "this" |-> ob(
    "Counter0"), "value" |-> int(10),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 12 >
 
< ob("Counter1") : "Counter" |
  Att: "observer" |-> ob("ShepherdTask0"), "observertoken" |-> str("tasks"),
    "this" |-> ob("Counter1"), "value" |-> int(0),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 46 >
 
< ob("Counter2") : "Counter" |
  Att: "observer" |-> ob("ShepherdTask0"), "observertoken" |-> str("threads"),
    "this" |-> ob("Counter2"), "value" |-> int(2),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 4 >
 
< ob("Counter3") : "Counter" |
  Att: "observer" |-> ob("ShepherdTask0"), "observertoken" |-> str(
    "busythreads"), "this" |-> ob("Counter3"), "value" |-> int(1),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 44 >
 
< ob("CounterTask0") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(0), "this" |-> ob(
    "CounterTask0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask1") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(1), "this" |-> ob(
    "CounterTask1"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask2") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(2), "this" |-> ob(
    "CounterTask2"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask3") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(3), "this" |-> ob(
    "CounterTask3"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask4") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(4), "this" |-> ob(
    "CounterTask4"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask5") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(5), "this" |-> ob(
    "CounterTask5"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask6") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(6), "this" |-> ob(
    "CounterTask6"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask7") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(7), "this" |-> ob(
    "CounterTask7"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask8") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(8), "this" |-> ob(
    "CounterTask8"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask9") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter0"), "taskId" |-> int(9), "this" |-> ob(
    "CounterTask9"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("Main0") : "Main" |
  Att: "executionCounter" |-> ob("Counter0"), "maxthreads_init" |-> int(1),
    "nthreads_init" |-> int(2), "this" |-> ob("Main0"), "threadpool" |-> ob(
    "Abbey0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 24 >
 
< ob("Monk0") : "Monk" |
  Att: "busyCounter" |-> ob("Counter3"), "index" |-> null, "kill" |-> bool(
    false), "queue" |-> ob("TaskQueue0"), "task" |-> ob("ShepherdTask0"),
    "taskHistory" |-> list(int(1)), "taskId" |-> int(1), "this" |-> ob(
    "Monk0"), "threadCounter" |-> ob("Counter2"),
  Pr: {".class" |-> str("Monk"), ".label" |-> label(ob("Monk0"), 1), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk0"), "label:0" |-> null,
    "label:1" |-> null, "label:2" |-> null, "label:3" |-> label(ob("Monk0"),
    5), "label:4" |-> null, "label:5" |-> null, "label:6" |-> null | get(label(
    ob("Monk0"), 5) ; "kill") ; free("label:3") ; call("label:4" ;
    "busyCounter" ; "dec" ; emp) ; get("label:4" ; noVid) ; free("label:4") ;
    if "kill" th call("label:5" ; "threadCounter" ; "dec" ; emp) ; get(
    "label:5" ; noVid) ; free("label:5") el release ; call("label:6" ; "this" ;
    "run" ; emp) ; get("label:6" ; noVid) ; free("label:6") fi ; return(emp)},
  PrQ: noProc,
  Lcnt: 6 >
 
< ob("Monk1") : "Monk" |
  Att: "busyCounter" |-> ob("Counter3"), "index" |-> null, "kill" |-> bool(
    false), "queue" |-> ob("TaskQueue0"), "task" |-> ob("CounterTask9"),
    "taskHistory" |-> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6) :: int(7) :: int(8) :: int(9)), "taskId" |-> int(9),
    "this" |-> ob("Monk1"), "threadCounter" |-> ob("Counter2"),
  Pr: {".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"), 61), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"), "label:0" |->
    label(ob("Monk1"), 62), "label:1" |-> null, "label:2" |-> null, "label:3"
    |-> null, "label:4" |-> null, "label:5" |-> null, "label:6" |-> null | get(
    label(ob("Monk1"), 62) ; "task") ; free("label:0") ; call("label:1" ;
    "busyCounter" ; "inc" ; emp) ; get("label:1" ; noVid) ; free("label:1") ;
    call("label:2" ; "task" ; "getId" ; emp) ; get("label:2" ; "taskId") ;
    free("label:2") ; assign("taskHistory" ; "|-"("taskHistory" :: "taskId")) ;
    call("label:3" ; "task" ; "execute" ; emp) ; get("label:3" ; "kill") ;
    free("label:3") ; call("label:4" ; "busyCounter" ; "dec" ; emp) ; get(
    "label:4" ; noVid) ; free("label:4") ; if "kill" th call("label:5" ;
    "threadCounter" ; "dec" ; emp) ; get("label:5" ; noVid) ; free("label:5")
    el release ; call("label:6" ; "this" ; "run" ; emp) ; get("label:6" ;
    noVid) ; free("label:6") fi ; return(emp) ; $cont label(ob("Monk1"), 61)},
  PrQ: {".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"), 1), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"), "label:0" |-> null,
    "label:1" |-> null, "label:2" |-> null, "label:3" |-> null, "label:4" |->
    null, "label:5" |-> null, "label:6" |-> label(ob("Monk1"), 7) | get(label(
    ob("Monk1"), 7) ; noVid) ; free("label:6") ; return(emp)}, {".class" |->
    str("Monk"), ".label" |-> label(ob("Monk1"), 7), ".method" |-> str("run"),
    "_" |-> null, "caller" |-> ob("Monk1"), "label:0" |-> null, "label:1" |->
    null, "label:2" |-> null, "label:3" |-> null, "label:4" |-> null, "label:5"
    |-> null, "label:6" |-> label(ob("Monk1"), 13) | get(label(ob("Monk1"), 13)
    ; noVid) ; free("label:6") ; return(emp) ; $cont label(ob("Monk1"), 7)}, {
    ".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"), 13), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"), "label:0" |-> null,
    "label:1" |-> null, "label:2" |-> null, "label:3" |-> null, "label:4" |->
    null, "label:5" |-> null, "label:6" |-> label(ob("Monk1"), 19) | get(label(
    ob("Monk1"), 19) ; noVid) ; free("label:6") ; return(emp) ; $cont label(ob(
    "Monk1"), 13)}, {".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"),
    19), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"),
    "label:0" |-> null, "label:1" |-> null, "label:2" |-> null, "label:3" |->
    null, "label:4" |-> null, "label:5" |-> null, "label:6" |-> label(ob(
    "Monk1"), 25) | get(label(ob("Monk1"), 25) ; noVid) ; free("label:6") ;
    return(emp) ; $cont label(ob("Monk1"), 19)}, {".class" |-> str("Monk"),
    ".label" |-> label(ob("Monk1"), 25), ".method" |-> str("run"), "_" |->
    null, "caller" |-> ob("Monk1"), "label:0" |-> null, "label:1" |-> null,
    "label:2" |-> null, "label:3" |-> null, "label:4" |-> null, "label:5" |->
    null, "label:6" |-> label(ob("Monk1"), 31) | get(label(ob("Monk1"), 31) ;
    noVid) ; free("label:6") ; return(emp) ; $cont label(ob("Monk1"), 25)}, {
    ".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"), 31), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"), "label:0" |-> null,
    "label:1" |-> null, "label:2" |-> null, "label:3" |-> null, "label:4" |->
    null, "label:5" |-> null, "label:6" |-> label(ob("Monk1"), 37) | get(label(
    ob("Monk1"), 37) ; noVid) ; free("label:6") ; return(emp) ; $cont label(ob(
    "Monk1"), 31)}, {".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"),
    37), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"),
    "label:0" |-> null, "label:1" |-> null, "label:2" |-> null, "label:3" |->
    null, "label:4" |-> null, "label:5" |-> null, "label:6" |-> label(ob(
    "Monk1"), 43) | get(label(ob("Monk1"), 43) ; noVid) ; free("label:6") ;
    return(emp) ; $cont label(ob("Monk1"), 37)}, {".class" |-> str("Monk"),
    ".label" |-> label(ob("Monk1"), 43), ".method" |-> str("run"), "_" |->
    null, "caller" |-> ob("Monk1"), "label:0" |-> null, "label:1" |-> null,
    "label:2" |-> null, "label:3" |-> null, "label:4" |-> null, "label:5" |->
    null, "label:6" |-> label(ob("Monk1"), 49) | get(label(ob("Monk1"), 49) ;
    noVid) ; free("label:6") ; return(emp) ; $cont label(ob("Monk1"), 43)}, {
    ".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"), 49), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"), "label:0" |-> null,
    "label:1" |-> null, "label:2" |-> null, "label:3" |-> null, "label:4" |->
    null, "label:5" |-> null, "label:6" |-> label(ob("Monk1"), 55) | get(label(
    ob("Monk1"), 55) ; noVid) ; free("label:6") ; return(emp) ; $cont label(ob(
    "Monk1"), 49)}, {".class" |-> str("Monk"), ".label" |-> label(ob("Monk1"),
    55), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob("Monk1"),
    "label:0" |-> null, "label:1" |-> null, "label:2" |-> null, "label:3" |->
    null, "label:4" |-> null, "label:5" |-> null, "label:6" |-> label(ob(
    "Monk1"), 61) | get(label(ob("Monk1"), 61) ; noVid) ; free("label:6") ;
    return(emp) ; $cont label(ob("Monk1"), 55)},
  Lcnt: 63 >
 
< ob("ShepherdTask0") : "ShepherdTask" |
  Att: "busyCounter" |-> ob("Counter3"), "busythreads" |-> int(1), "maxthreads"
    |-> int(2), "mrate" |-> int(5), "taskCounter" |-> ob("Counter1"), "taskId"
    |-> int(1), "taskQueue" |-> ob("TaskQueue0"), "tasks" |-> int(0), "this"
    |-> ob("ShepherdTask0"), "threadCounter" |-> ob("Counter2"), "threadpool"
    |-> ob("Abbey0"), "threads" |-> int(2),
  Pr: idle,
  PrQ: {".class" |-> str("ShepherdTask"), ".label" |-> label(ob("Monk0"), 5),
    ".method" |-> str("execute"), "_" |-> null, "caller" |-> ob("Monk0"),
    "kill" |-> null, "l1" |-> label(ob("ShepherdTask0"), 7), "l2" |-> label(ob(
    "ShepherdTask0"), 8) | $bawait "&&"(?("l1") :: ?("l2")) ; free("l2") ;
    free("l1") ; assign("kill" ; bool(true)) ; return("kill")}, {".class" |->
    str("ShepherdTask"), ".label" |-> label(ob("ShepherdTask0"), 8), ".method"
    |-> str("killThreads"), "_" |-> null, "caller" |-> ob("ShepherdTask0"),
    "idlethreads" |-> int(1), "label:0" |-> null, "label:1" |-> null, "task"
    |-> null | $bawait ">"("idlethreads" :: "/"("threads" :: int(2))) ; new(
    "task" ; "PoisonTask" ; int(0)) ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; get("label:0" ; noVid) ; free("label:0") ; call(
    "label:1" ; "this" ; "killThreads" ; emp) ; get("label:1" ; noVid) ; free(
    "label:1") ; return(emp)}, {".class" |-> str("ShepherdTask"), ".label" |->
    label(ob("ShepherdTask0"), 7), ".method" |-> str("createThreads"), "_" |->
    null, "amountToCreate" |-> null, "caller" |-> ob("ShepherdTask0"),
    "idlethreads" |-> int(1), "l" |-> null, "label:0" |-> null, "task" |-> null
    | $bawait "&&"("<"("threads" :: "maxthreads") :: "<"("-"("idlethreads" ::
    "tasks") :: "/"("threads" :: "mrate"))) ; assign("amountToCreate" ; "+"(
    "-"("tasks" :: "idlethreads") :: "/"("threads" :: "mrate"))) ; if ">"(
    "amountToCreate" :: "-"("maxthreads" :: "threads")) th assign(
    "amountToCreate" ; "-"("maxthreads" :: "threads")) el skip fi ; if ">"(
    "amountToCreate" :: int(0)) th call("l" ; "threadpool" ; "createThreads" ;
    "amountToCreate") ; await ?("l") ; free("l") el skip fi ; call("label:0" ;
    "this" ; "createThreads" ; emp) ; get("label:0" ; noVid) ; free("label:0")
    ; return(emp)},
  Lcnt: 9 >
 
< ob("TaskQueue0") : "TaskQueue" |
  Att: "taskCounter" |-> ob("Counter1"), "tasks" |-> list(emp), "this" |-> ob(
    "TaskQueue0"),
  Pr: idle,
  PrQ: {".class" |-> str("TaskQueue"), ".label" |-> label(ob("Monk1"), 62),
    ".method" |-> str("dequeueTask"), "_" |-> null, "caller" |-> ob("Monk1"),
    "label:0" |-> null, "task" |-> null | $bawait ">"("#"("tasks") :: int(0)) ;
    assign("task" ; "head"("tasks")) ; assign("tasks" ; "tail"("tasks")) ;
    call("label:0" ; "taskCounter" ; "dec" ; emp) ; get("label:0" ; noVid) ;
    free("label:0") ; return("task")},
  Lcnt: 24 >
 
< ob("log") : "" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 1629 >
 
< ob("main") : Start |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 1 >
 
< "Abbey" : Class | Inh: noInh, Param: "size", "maxNofThreads", Att:
    "busyCounter" |-> null, "maxNofThreads" |-> null, "size" |-> null,
    "taskCounter" |-> null, "taskQueue" |-> null, "threadCounter" |-> null,
    "threads" |-> null, Mtds:
  < "createThreads" : Method | Param: "amount", Att: "_" |-> null, "amount" |->
    null, "i" |-> null, "label:0" |-> null, "thread" |-> null, Code: assign("i"
    ; int(0)) ; while "<"("i" :: "amount") do new("thread" ; "Monk" ;
    "taskQueue" :: "busyCounter" :: "threadCounter") ; assign("threads" ; "|-"(
    "threads" :: "thread")) ; call("label:0" ; "threadCounter" ; "inc" ; emp) ;
    get("label:0" ; noVid) ; free("label:0") ; assign("i" ; "+"("i" :: int(1)))
    od ; return(emp) >, < "dispatchTask" : Method | Param: "task", Att: "_" |->
    null, "label:0" |-> null, "task" |-> null, Code: call("label:0" ;
    "taskQueue" ; "enqueueTask" ; "task") ; get("label:0" ; noVid) ; free(
    "label:0") ; return(emp) >, < "init" : Method | Param: noVid, Att: "_" |->
    null, "label:0" |-> null, "label:1" |-> null, "mrate" |-> null, "shepherd"
    |-> null, Code: new("taskCounter" ; "Counter" ; emp) ; new("threadCounter"
    ; "Counter" ; emp) ; new("busyCounter" ; "Counter" ; emp) ; new("taskQueue"
    ; "TaskQueue" ; "taskCounter") ; assign("threads" ; list(emp)) ; assign(
    "mrate" ; int(5)) ; new("shepherd" ; "ShepherdTask" ; int(1) ::
    "taskCounter" :: "threadCounter" :: "busyCounter" :: "maxNofThreads" ::
    "mrate" :: "taskQueue" :: "this") ; call("label:0" ; "this" ;
    "createThreads" ; "size") ; get("label:0" ; noVid) ; free("label:0") ;
    call("label:1" ; "this" ; "dispatchTask" ; "shepherd") ; get("label:1" ;
    noVid) ; free("label:1") ; return(emp) >, < "run" : Method | Param: noVid,
    Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 1 >
 
< "Counter" : Class | Inh: noInh, Param: noVid, Att: "observer" |-> null,
    "observertoken" |-> null, "value" |-> null, Mtds:
  < "dec" : Method | Param: noVid, Att: "_" |-> null, "label:0" |-> null, Code:
    assign("value" ; "-"("value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; get("label:0" ; noVid) ; free("label:0") ;
    return(emp) >, < "inc" : Method | Param: noVid, Att: "_" |-> null,
    "label:0" |-> null, Code: assign("value" ; "+"("value" :: int(1))) ; call(
    "label:0" ; "this" ; "informObserver" ; emp) ; get("label:0" ; noVid) ;
    free("label:0") ; return(emp) >, < "informObserver" : Method | Param:
    noVid, Att: "_" |-> null, "l" |-> null, "label:0" |-> null, Code: if "/="(
    "observer" :: null) th call("label:0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; get("label:0" ; noVid) ; free("label:0") el
    skip fi ; return(emp) >, < "init" : Method | Param: noVid, Att: "_" |->
    null, Code: assign("value" ; int(0)) ; assign("observer" ; null) ; assign(
    "observertoken" ; str("")) ; return(emp) >, < "registerObserver" : Method |
    Param: "token", Att: "_" |-> null, "token" |-> null, Code: assign(
    "observer" ; "caller") ; assign("observertoken" ; "token") ; return(emp) >,
    < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ; return(
    emp) >, < "value" : Method | Param: noVid, Att: "_" |-> null, "val" |->
    null, Code: assign("val" ; "value") ; return("val") >,
  Ocnt: 4 >
 
< "CounterTask" : Class | Inh: noInh, Param: "taskId", "myCounter", Att:
    "myCounter" |-> null, "taskId" |-> null, Mtds:
  < "execute" : Method | Param: noVid, Att: "_" |-> null, "kill" |-> null,
    "label:0" |-> null, Code: call("label:0" ; "myCounter" ; "inc" ; emp) ;
    get("label:0" ; noVid) ; free("label:0") ; assign("kill" ; bool(false)) ;
    return("kill") >, < "getId" : Method | Param: noVid, Att: "_" |-> null,
    "id" |-> null, Code: assign("id" ; "taskId") ; return("id") >, < "init" :
    Method | Param: noVid, Att: "_" |-> null, Code: skip ; return(emp) >, <
    "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ; return(emp)
    >,
  Ocnt: 10 >
 
< "Main" : Class | Inh: noInh, Param: "nthreads_init", "maxthreads_init", Att:
    "executionCounter" |-> null, "maxthreads_init" |-> null, "nthreads_init"
    |-> null, "threadpool" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, Code: new("threadpool" ;
    "Abbey" ; "nthreads_init" :: "maxthreads_init") ; new("executionCounter" ;
    "Counter" ; emp) ; return(emp) >, < "run" : Method | Param: noVid, Att: "_"
    |-> null, "i" |-> null, "label:0" |-> null, "task" |-> null, Code: assign(
    "i" ; int(0)) ; while "<"("i" :: int(10)) do new("task" ; "CounterTask" ;
    "i" :: "executionCounter") ; call("label:0" ; "threadpool" ; "dispatchTask"
    ; "task") ; get("label:0" ; noVid) ; free("label:0") ; assign("i" ; "+"("i"
    :: int(1))) od ; return(emp) >,
  Ocnt: 1 >
 
< "Monk" : Class | Inh: noInh, Param: "queue", "busyCounter", "threadCounter",
    Att: "busyCounter" |-> null, "index" |-> null, "kill" |-> null, "queue" |->
    null, "task" |-> null, "taskHistory" |-> null, "taskId" |-> null,
    "threadCounter" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, Code: assign(
    "taskHistory" ; list(emp)) ; assign("kill" ; bool(false)) ; return(emp) >,
    < "run" : Method | Param: noVid, Att: "_" |-> null, "label:0" |-> null,
    "label:1" |-> null, "label:2" |-> null, "label:3" |-> null, "label:4" |->
    null, "label:5" |-> null, "label:6" |-> null, Code: call("label:0" ;
    "queue" ; "dequeueTask" ; emp) ; get("label:0" ; "task") ; free("label:0")
    ; call("label:1" ; "busyCounter" ; "inc" ; emp) ; get("label:1" ; noVid) ;
    free("label:1") ; call("label:2" ; "task" ; "getId" ; emp) ; get("label:2"
    ; "taskId") ; free("label:2") ; assign("taskHistory" ; "|-"("taskHistory"
    :: "taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; get("label:3"
    ; "kill") ; free("label:3") ; call("label:4" ; "busyCounter" ; "dec" ; emp)
    ; get("label:4" ; noVid) ; free("label:4") ; if "kill" th call("label:5" ;
    "threadCounter" ; "dec" ; emp) ; get("label:5" ; noVid) ; free("label:5")
    el release ; call("label:6" ; "this" ; "run" ; emp) ; get("label:6" ;
    noVid) ; free("label:6") fi ; return(emp) >,
  Ocnt: 2 >
 
< "PoisonTask" : Class | Inh: noInh, Param: "taskId", Att: "taskId" |-> null,
    Mtds:
  < "execute" : Method | Param: noVid, Att: "_" |-> null, "kill" |-> null,
    Code: assign("kill" ; bool(true)) ; return("kill") >, < "getId" : Method |
    Param: noVid, Att: "_" |-> null, "id" |-> null, Code: assign("id" ;
    "taskId") ; return("id") >, < "init" : Method | Param: noVid, Att: "_" |->
    null, Code: skip ; return(emp) >, < "run" : Method | Param: noVid, Att: "_"
    |-> null, Code: skip ; return(emp) >,
  Ocnt: 0 >
 
< "ShepherdTask" : Class | Inh: noInh, Param: "taskId", "taskCounter",
    "threadCounter", "busyCounter", "maxthreads", "mrate", "taskQueue",
    "threadpool", Att: "busyCounter" |-> null, "busythreads" |-> null,
    "maxthreads" |-> null, "mrate" |-> null, "taskCounter" |-> null, "taskId"
    |-> null, "taskQueue" |-> null, "tasks" |-> null, "threadCounter" |-> null,
    "threadpool" |-> null, "threads" |-> null, Mtds:
  < "createThreads" : Method | Param: noVid, Att: "_" |-> null,
    "amountToCreate" |-> null, "idlethreads" |-> null, "l" |-> null, "label:0"
    |-> null, "task" |-> null, Code: assign("idlethreads" ; "-"("threads" ::
    "busythreads")) ; await "&&"("<"("threads" :: "maxthreads") :: "<"("-"(
    "idlethreads" :: "tasks") :: "/"("threads" :: "mrate"))) ; assign(
    "amountToCreate" ; "+"("-"("tasks" :: "idlethreads") :: "/"("threads" ::
    "mrate"))) ; if ">"("amountToCreate" :: "-"("maxthreads" :: "threads")) th
    assign("amountToCreate" ; "-"("maxthreads" :: "threads")) el skip fi ; if
    ">"("amountToCreate" :: int(0)) th call("l" ; "threadpool" ;
    "createThreads" ; "amountToCreate") ; await ?("l") ; free("l") el skip fi ;
    call("label:0" ; "this" ; "createThreads" ; emp) ; get("label:0" ; noVid) ;
    free("label:0") ; return(emp) >, < "execute" : Method | Param: noVid, Att:
    "_" |-> null, "kill" |-> null, "l1" |-> null, "l2" |-> null, Code: call(
    "l1" ; "this" ; "createThreads" ; emp) ; call("l2" ; "this" ; "killThreads"
    ; emp) ; await "&&"(?("l1") :: ?("l2")) ; free("l2") ; free("l1") ; assign(
    "kill" ; bool(true)) ; return("kill") >, < "getId" : Method | Param: noVid,
    Att: "_" |-> null, "id" |-> null, Code: assign("id" ; "taskId") ; return(
    "id") >, < "init" : Method | Param: noVid, Att: "_" |-> null, "label:0" |->
    null, "label:1" |-> null, "label:2" |-> null, "label:3" |-> null, "label:4"
    |-> null, Code: assign("maxthreads" ; "+"("maxthreads" :: int(1))) ; call(
    "label:0" ; "taskCounter" ; "registerObserver" ; str("tasks")) ; get(
    "label:0" ; noVid) ; free("label:0") ; call("label:1" ; "threadCounter" ;
    "registerObserver" ; str("threads")) ; get("label:1" ; noVid) ; free(
    "label:1") ; call("label:2" ; "busyCounter" ; "registerObserver" ; str(
    "busythreads")) ; get("label:2" ; noVid) ; free("label:2") ; call("label:3"
    ; "threadCounter" ; "value" ; emp) ; get("label:3" ; "threads") ; free(
    "label:3") ; call("label:4" ; "busyCounter" ; "value" ; emp) ; get(
    "label:4" ; "busythreads") ; free("label:4") ; return(emp) >, <
    "killThreads" : Method | Param: noVid, Att: "_" |-> null, "idlethreads" |->
    null, "label:0" |-> null, "label:1" |-> null, "task" |-> null, Code:
    assign("idlethreads" ; "-"("threads" :: "busythreads")) ; await ">"(
    "idlethreads" :: "/"("threads" :: int(2))) ; new("task" ; "PoisonTask" ;
    int(0)) ; call("label:0" ; "taskQueue" ; "enqueueTask" ; "task") ; get(
    "label:0" ; noVid) ; free("label:0") ; call("label:1" ; "this" ;
    "killThreads" ; emp) ; get("label:1" ; noVid) ; free("label:1") ; return(
    emp) >, < "newCounterValue" : Method | Param: "token", "val", Att: "_" |->
    null, "token" |-> null, "val" |-> null, Code: if "="("token" :: str(
    "tasks")) th assign("tasks" ; "val") el skip fi ; if "="("token" :: str(
    "threads")) th assign("threads" ; "val") el skip fi ; if "="("token" ::
    str("busythreads")) th assign("busythreads" ; "val") el skip fi ; return(
    emp) >, < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ;
    return(emp) >,
  Ocnt: 1 >
 
< "TaskQueue" : Class | Inh: noInh, Param: "taskCounter", Att: "taskCounter"
    |-> null, "tasks" |-> null, Mtds:
  < "dequeueTask" : Method | Param: noVid, Att: "_" |-> null, "label:0" |->
    null, "task" |-> null, Code: await ">"("#"("tasks") :: int(0)) ; assign(
    "task" ; "head"("tasks")) ; assign("tasks" ; "tail"("tasks")) ; call(
    "label:0" ; "taskCounter" ; "dec" ; emp) ; get("label:0" ; noVid) ; free(
    "label:0") ; return("task") >, < "enqueueTask" : Method | Param: "task",
    Att: "_" |-> null, "label:0" |-> null, "task" |-> null, Code: assign(
    "tasks" ; "|-"("tasks" :: "task")) ; call("label:0" ; "taskCounter" ; "inc"
    ; emp) ; get("label:0" ; noVid) ; free("label:0") ; return(emp) >, < "init"
    : Method | Param: noVid, Att: "_" |-> null, Code: assign("tasks" ; list(
    emp)) ; return(emp) >, < "run" : Method | Param: noVid, Att: "_" |-> null,
    Code: skip ; return(emp) >,
  Ocnt: 1 >
 
<log From: 0 To: 1629 Type: "lastrun"
    Data:{skip ; new("var" ; "Main" ; int(2) :: int(1)) ; assign(
    "Main0.nthreads_init", "Main0.maxthreads_init" ; int(2) :: int(1)) ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("nolabel.var" ; ob("Main0")) ;
    new("threadpool" ; "Abbey" ; "nthreads_init" :: "maxthreads_init") ;
    assign("Abbey0.size", "Abbey0.maxNofThreads" ; "Main0.nthreads_init" ::
    "Main0.maxthreads_init") ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "Main0.threadpool" ; ob("Abbey0")) ; new("executionCounter" ; "Counter" ;
    emp) ; assign("Main0.executionCounter" ; ob("Counter0")) ; call(".anon" ;
    "this" ; "init" ; emp) ; return(emp) ; new("taskCounter" ; "Counter" ; emp)
    ; assign("Abbey0.taskCounter" ; ob("Counter1")) ; call(".anon" ; "this" ;
    "init" ; emp) ; new("threadCounter" ; "Counter" ; emp) ; assign(
    "Abbey0.threadCounter" ; ob("Counter2")) ; call(".anon" ; "this" ; "init" ;
    emp) ; new("busyCounter" ; "Counter" ; emp) ; assign("Abbey0.busyCounter" ;
    ob("Counter3")) ; call(".anon" ; "this" ; "init" ; emp) ; new("taskQueue" ;
    "TaskQueue" ; "taskCounter") ; assign("Abbey0.taskQueue" ; ob(
    "TaskQueue0")) ; assign("Abbey0.threads" ; list(emp)) ; assign(
    "Abbey0-0.mrate" ; int(5)) ; new("shepherd" ; "ShepherdTask" ; int(1) ::
    "taskCounter" :: "threadCounter" :: "busyCounter" :: "maxNofThreads" ::
    "mrate" :: "taskQueue" :: "this") ; assign("Abbey0-0.shepherd" ; ob(
    "ShepherdTask0")) ; call("label:0" ; "this" ; "createThreads" ; "size") ;
    assign("ShepherdTask0.taskId", "ShepherdTask0.taskCounter",
    "ShepherdTask0.threadCounter", "ShepherdTask0.busyCounter",
    "ShepherdTask0.maxthreads", "ShepherdTask0.mrate",
    "ShepherdTask0.taskQueue", "ShepherdTask0.threadpool" ; int(1) ::
    "Abbey0.taskCounter" :: "Abbey0.threadCounter" :: "Abbey0.busyCounter" ::
    "Abbey0.maxNofThreads" :: "Abbey0-0.mrate" :: "Abbey0.taskQueue" ::
    "Abbey0.this") ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "TaskQueue0.taskCounter" ; "Abbey0.taskCounter") ; call(".anon" ; "this" ;
    "init" ; emp) ; assign("Abbey0-6.amount" ; "Abbey0.size") ; assign(
    "Abbey0-6.i" ; int(0)) ; if "<"("i" :: "amount") th skip el skip fi ; new(
    "thread" ; "Monk" ; "taskQueue" :: "busyCounter" :: "threadCounter") ;
    assign("Abbey0-6.thread" ; ob("Monk0")) ; assign("Abbey0.threads" ; "|-"(
    "Abbey0.threads" :: "Abbey0-6.thread")) ; call("label:0" ; "threadCounter"
    ; "inc" ; emp) ; assign("Monk0.queue", "Monk0.busyCounter",
    "Monk0.threadCounter" ; "Abbey0.taskQueue" :: "Abbey0.busyCounter" ::
    "Abbey0.threadCounter") ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "Counter0.value" ; int(0)) ; assign("Counter0.observer" ; null) ; assign(
    "Counter0.observertoken" ; str("")) ; return(emp) ; call(".anon" ; "this" ;
    "run" ; emp) ; return(emp) ; assign("Counter1.value" ; int(0)) ; assign(
    "Counter1.observer" ; null) ; assign("Counter1.observertoken" ; str("")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; return(emp) ; assign(
    "Counter2.value" ; int(0)) ; assign("Counter2.observer" ; null) ; assign(
    "Counter2.observertoken" ; str("")) ; return(emp) ; call(".anon" ; "this" ;
    "run" ; emp) ; return(emp) ; assign("Counter2.value" ; "+"("Counter2.value"
    :: int(1))) ; call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="(
    "observer" :: null) th skip el skip fi ; return(emp) ; return(emp) ;
    assign("Abbey0-6.i" ; "+"("Abbey0-6.i" :: int(1))) ; if "<"("i" ::
    "amount") th skip el skip fi ; new("thread" ; "Monk" ; "taskQueue" ::
    "busyCounter" :: "threadCounter") ; assign("Abbey0-6.thread" ; ob("Monk1"))
    ; assign("Abbey0.threads" ; "|-"("Abbey0.threads" :: "Abbey0-6.thread")) ;
    call("label:0" ; "threadCounter" ; "inc" ; emp) ; assign("Counter2.value" ;
    "+"("Counter2.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; assign("Monk1.queue", "Monk1.busyCounter",
    "Monk1.threadCounter" ; "Abbey0.taskQueue" :: "Abbey0.busyCounter" ::
    "Abbey0.threadCounter") ; call(".anon" ; "this" ; "init" ; emp) ; if "/="(
    "observer" :: null) th skip el skip fi ; return(emp) ; return(emp) ;
    assign("Abbey0-6.i" ; "+"("Abbey0-6.i" :: int(1))) ; if "<"("i" ::
    "amount") th skip el skip fi ; return(emp) ; call("label:1" ; "this" ;
    "dispatchTask" ; "shepherd") ; assign("Abbey0-11.task" ;
    "Abbey0-0.shepherd") ; call("label:0" ; "taskQueue" ; "enqueueTask" ;
    "task") ; assign("Counter3.value" ; int(0)) ; assign("Counter3.observer" ;
    null) ; assign("Counter3.observertoken" ; str("")) ; return(emp) ; call(
    ".anon" ; "this" ; "run" ; emp) ; return(emp) ; call(".anon" ; "this" ;
    "run" ; emp) ; assign("Main0-3.i" ; int(0)) ; if "<"("i" :: int(10)) th
    skip el skip fi ; new("task" ; "CounterTask" ; "i" :: "executionCounter") ;
    assign("CounterTask0.taskId", "CounterTask0.myCounter" ; "Main0-3.i" ::
    "Main0.executionCounter") ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "Main0-3.task" ; ob("CounterTask0")) ; call("label:0" ; "threadpool" ;
    "dispatchTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; assign("Monk0.taskHistory" ; list(emp)) ; assign(
    "Monk0.kill" ; bool(false)) ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; call("label:0" ; "queue" ; "dequeueTask" ; emp) ; assign(
    "Monk1.taskHistory" ; list(emp)) ; assign("Monk1.kill" ; bool(false)) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; call("label:0" ;
    "queue" ; "dequeueTask" ; emp) ; assign("ShepherdTask0.maxthreads" ; "+"(
    "ShepherdTask0.maxthreads" :: int(1))) ; call("label:0" ; "taskCounter" ;
    "registerObserver" ; str("tasks")) ; assign("ShepherdTask0-1.token" ; str(
    "tasks")) ; assign("Counter1.observer" ; "ShepherdTask0-1.caller") ;
    assign("Counter1.observertoken" ; "ShepherdTask0-1.token") ; return(emp) ;
    call("label:1" ; "threadCounter" ; "registerObserver" ; str("threads")) ;
    assign("ShepherdTask0-2.token" ; str("threads")) ; assign(
    "Counter2.observer" ; "ShepherdTask0-2.caller") ; assign(
    "Counter2.observertoken" ; "ShepherdTask0-2.token") ; return(emp) ; call(
    "label:2" ; "busyCounter" ; "registerObserver" ; str("busythreads")) ;
    assign("ShepherdTask0-3.token" ; str("busythreads")) ; assign(
    "Counter3.observer" ; "ShepherdTask0-3.caller") ; assign(
    "Counter3.observertoken" ; "ShepherdTask0-3.token") ; return(emp) ; call(
    "label:3" ; "threadCounter" ; "value" ; emp) ; assign("ShepherdTask0-4.val"
    ; "Counter2.value") ; return("val") ; assign("ShepherdTask0.threads" ;
    "ShepherdTask0-4.val") ; call("label:4" ; "busyCounter" ; "value" ; emp) ;
    assign("ShepherdTask0-5.val" ; "Counter3.value") ; return("val") ; assign(
    "ShepherdTask0.busythreads" ; "ShepherdTask0-5.val") ; return(emp) ; call(
    ".anon" ; "this" ; "run" ; emp) ; return(emp) ; assign("TaskQueue0.tasks" ;
    list(emp)) ; return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; return(
    emp) ; assign("Abbey0-12.task" ; "Abbey0-11.task") ; assign(
    "TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" :: "Abbey0-12.task")) ; call(
    "label:0" ; "taskCounter" ; "inc" ; emp) ; assign("Counter1.value" ; "+"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; call("label:0" ;
    "observer" ; "newCounterValue" ; "observertoken" :: "value") ; assign(
    "Counter1-3.token", "Counter1-3.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-3.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; return(emp) ; return(emp) ; return(emp) ; return(emp) ;
    await ">"("#"("tasks") :: int(0)) ; assign("Monk0-2.task" ; "head"(
    "TaskQueue0.tasks")) ; assign("TaskQueue0.tasks" ; "tail"(
    "TaskQueue0.tasks")) ; call("label:0" ; "taskCounter" ; "dec" ; emp) ;
    assign("Counter1.value" ; "-"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; return(emp) ; return(emp) ; call(
    ".anon" ; "this" ; "run" ; emp) ; return(emp) ; assign("Main0-5.task" ;
    "Main0-3.task") ; call("label:0" ; "taskQueue" ; "enqueueTask" ; "task") ;
    if "/="("observer" :: null) th skip el skip fi ; call("label:0" ;
    "observer" ; "newCounterValue" ; "observertoken" :: "value") ; assign(
    "Counter1-5.token", "Counter1-5.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-5.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; return(emp) ; return(emp) ; return(emp) ; return("task")
    ; assign("Abbey0-14.task" ; "Main0-5.task") ; assign("Monk0.task" ;
    "Monk0-2.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-14.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-7.token", "Counter1-7.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-7.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-3.token", "Counter3-3.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-3.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk0-4.id" ;
    "ShepherdTask0.taskId") ; return("id") ; assign("Monk0.taskId" ;
    "Monk0-4.id") ; assign("Monk0.taskHistory" ; "|-"("Monk0.taskHistory" ::
    "Monk0.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call("l1" ;
    "this" ; "createThreads" ; emp) ; call("l2" ; "this" ; "killThreads" ; emp)
    ; $bawait "&&"(?("l1") :: ?("l2")) ; assign("ShepherdTask0-8.idlethreads" ;
    "-"("ShepherdTask0.threads" :: "ShepherdTask0.busythreads")) ; $bawait ">"(
    "idlethreads" :: "/"("threads" :: int(2))) ; assign(
    "ShepherdTask0-7.idlethreads" ; "-"("ShepherdTask0.threads" ::
    "ShepherdTask0.busythreads")) ; $bawait "&&"("<"("threads" :: "maxthreads")
    :: "<"("-"("idlethreads" :: "tasks") :: "/"("threads" :: "mrate"))) ;
    return(emp) ; await ">"("#"("tasks") :: int(0)) ; assign("Monk1-2.task" ;
    "head"("TaskQueue0.tasks")) ; assign("TaskQueue0.tasks" ; "tail"(
    "TaskQueue0.tasks")) ; call("label:0" ; "taskCounter" ; "dec" ; emp) ;
    assign("Counter1.value" ; "-"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; return(emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter1-9.token", "Counter1-9.val"
    ; "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-9.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    assign("Main0-3.i" ; "+"("Main0-3.i" :: int(1))) ; if "<"("i" :: int(10))
    th skip el skip fi ; new("task" ; "CounterTask" ; "i" ::
    "executionCounter") ; assign("CounterTask1.taskId",
    "CounterTask1.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask1")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-7.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-15.task" ; "Main0-7.task") ; assign("Monk1.task" ; "Monk1-2.task")
    ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" :: "Abbey0-15.task"))
    ; call("label:0" ; "taskCounter" ; "inc" ; emp) ; assign("Counter1.value" ;
    "+"("Counter1.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; assign("Counter1-11.token", "Counter1-11.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-11.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-5.token", "Counter3-5.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-5.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-4.id" ;
    "CounterTask0.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-4.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-5.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-5.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-7.token", "Counter3-7.val"
    ; "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask0.busythreads" ; "Counter3-7.val") ; return(emp) ;
    return(emp) ; return(emp) ; if "kill" th skip el skip fi ; call("label:6" ;
    "this" ; "run" ; emp) ; call("label:0" ; "queue" ; "dequeueTask" ; emp) ;
    return(emp) ; await ">"("#"("tasks") :: int(0)) ; assign("Monk1-8.task" ;
    "head"("TaskQueue0.tasks")) ; assign("TaskQueue0.tasks" ; "tail"(
    "TaskQueue0.tasks")) ; call("label:0" ; "taskCounter" ; "dec" ; emp) ;
    assign("Counter1.value" ; "-"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; return(emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter1-13.token",
    "Counter1-13.val" ; "Counter1.observertoken" :: "Counter1.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks"
    ; "Counter1-13.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; assign("Main0-3.i" ; "+"("Main0-3.i" :: int(1))) ; if "<"("i" :: int(10))
    th skip el skip fi ; new("task" ; "CounterTask" ; "i" ::
    "executionCounter") ; assign("CounterTask2.taskId",
    "CounterTask2.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask2")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-9.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-16.task" ; "Main0-9.task") ; assign("Monk1.task" ; "Monk1-8.task")
    ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" :: "Abbey0-16.task"))
    ; call("label:0" ; "taskCounter" ; "inc" ; emp) ; assign("Counter1.value" ;
    "+"("Counter1.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; assign("Counter1-15.token", "Counter1-15.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-15.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-9.token", "Counter3-9.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-9.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-10.id" ;
    "CounterTask1.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-10.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-11.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-11.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-11.token",
    "Counter3-11.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-11.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-14.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-17.token", "Counter1-17.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-17.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask3.taskId",
    "CounterTask3.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask3")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-11.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-17.task" ; "Main0-11.task") ; assign("Monk1.task" ;
    "Monk1-14.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-17.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-19.token", "Counter1-19.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-19.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-13.token", "Counter3-13.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-13.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-16.id" ;
    "CounterTask2.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-16.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-17.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-17.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-15.token",
    "Counter3-15.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-15.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-20.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-21.token", "Counter1-21.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-21.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask4.taskId",
    "CounterTask4.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask4")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-13.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-18.task" ; "Main0-13.task") ; assign("Monk1.task" ;
    "Monk1-20.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-18.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-23.token", "Counter1-23.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-23.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-17.token", "Counter3-17.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-17.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-22.id" ;
    "CounterTask3.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-22.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-23.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-23.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-19.token",
    "Counter3-19.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-19.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-26.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-25.token", "Counter1-25.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-25.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask5.taskId",
    "CounterTask5.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask5")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-15.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-19.task" ; "Main0-15.task") ; assign("Monk1.task" ;
    "Monk1-26.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-19.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-27.token", "Counter1-27.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-27.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-21.token", "Counter3-21.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-21.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-28.id" ;
    "CounterTask4.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-28.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-29.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-29.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-23.token",
    "Counter3-23.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-23.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-32.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-29.token", "Counter1-29.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-29.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask6.taskId",
    "CounterTask6.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask6")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-17.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-20.task" ; "Main0-17.task") ; assign("Monk1.task" ;
    "Monk1-32.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-20.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-31.token", "Counter1-31.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-31.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-25.token", "Counter3-25.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-25.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-34.id" ;
    "CounterTask5.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-34.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-35.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-35.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-27.token",
    "Counter3-27.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-27.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-38.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-33.token", "Counter1-33.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-33.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask7.taskId",
    "CounterTask7.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask7")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-19.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-21.task" ; "Main0-19.task") ; assign("Monk1.task" ;
    "Monk1-38.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-21.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-35.token", "Counter1-35.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-35.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-29.token", "Counter3-29.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-29.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-40.id" ;
    "CounterTask6.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-40.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-41.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-41.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-31.token",
    "Counter3-31.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-31.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-44.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-37.token", "Counter1-37.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-37.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask8.taskId",
    "CounterTask8.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask8")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-21.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-22.task" ; "Main0-21.task") ; assign("Monk1.task" ;
    "Monk1-44.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-22.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-39.token", "Counter1-39.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-39.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-33.token", "Counter3-33.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-33.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-46.id" ;
    "CounterTask7.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-46.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-47.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-47.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-35.token",
    "Counter3-35.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-35.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-50.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-41.token", "Counter1-41.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-41.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask9.taskId",
    "CounterTask9.myCounter" ; "Main0-3.i" :: "Main0.executionCounter") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("Main0-3.task" ; ob(
    "CounterTask9")) ; call("label:0" ; "threadpool" ; "dispatchTask" ; "task")
    ; assign("Main0-23.task" ; "Main0-3.task") ; call("label:0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip
    fi ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Abbey0-23.task" ; "Main0-23.task") ; assign("Monk1.task" ;
    "Monk1-50.task") ; assign("TaskQueue0.tasks" ; "|-"("TaskQueue0.tasks" ::
    "Abbey0-23.task")) ; call("label:0" ; "taskCounter" ; "inc" ; emp) ;
    assign("Counter1.value" ; "+"("Counter1.value" :: int(1))) ; call("label:0"
    ; "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter1-43.token", "Counter1-43.val" ;
    "Counter1.observertoken" :: "Counter1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask0.tasks" ;
    "Counter1-43.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign("Counter3.value" ;
    "+"("Counter3.value" :: int(1))) ; call("label:0" ; "this" ;
    "informObserver" ; emp) ; if "/="("observer" :: null) th skip el skip fi ;
    call("label:0" ; "observer" ; "newCounterValue" ; "observertoken" ::
    "value") ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    return(emp) ; assign("Counter3-37.token", "Counter3-37.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; if "="("token"
    :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-37.val") ; return(emp) ; return(emp) ; return(emp) ; call(
    "label:2" ; "task" ; "getId" ; emp) ; assign("Monk1-52.id" ;
    "CounterTask8.taskId") ; return("id") ; assign("Monk1.taskId" ;
    "Monk1-52.id") ; assign("Monk1.taskHistory" ; "|-"("Monk1.taskHistory" ::
    "Monk1.taskId")) ; call("label:3" ; "task" ; "execute" ; emp) ; call(
    "label:0" ; "myCounter" ; "inc" ; emp) ; assign("Counter0.value" ; "+"(
    "Counter0.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; return(emp) ;
    return(emp) ; assign("Monk1-53.kill" ; bool(false)) ; return("kill") ;
    assign("Monk1.kill" ; "Monk1-53.kill") ; call("label:4" ; "busyCounter" ;
    "dec" ; emp) ; assign("Counter3.value" ; "-"("Counter3.value" :: int(1))) ;
    call("label:0" ; "this" ; "informObserver" ; emp) ; if "/="("observer" ::
    null) th skip el skip fi ; call("label:0" ; "observer" ; "newCounterValue"
    ; "observertoken" :: "value") ; assign("Counter3-39.token",
    "Counter3-39.val" ; "Counter3.observertoken" :: "Counter3.value") ; if "="(
    "token" :: str("tasks")) th skip el skip fi ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; assign("ShepherdTask0.busythreads" ; "Counter3-39.val") ;
    return(emp) ; return(emp) ; return(emp) ; if "kill" th skip el skip fi ;
    call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ; "queue" ;
    "dequeueTask" ; emp) ; return(emp) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk1-56.task" ; "head"("TaskQueue0.tasks")) ; assign(
    "TaskQueue0.tasks" ; "tail"("TaskQueue0.tasks")) ; call("label:0" ;
    "taskCounter" ; "dec" ; emp) ; assign("Counter1.value" ; "-"(
    "Counter1.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; return(emp) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "label:0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter1-45.token", "Counter1-45.val" ; "Counter1.observertoken" ::
    "Counter1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask0.tasks" ; "Counter1-45.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Main0-3.i" ; "+"("Main0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; return(emp) ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk1.task" ;
    "Monk1-56.task") ; call("label:1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Counter3.value" ; "+"("Counter3.value" :: int(1))) ; call("label:0" ;
    "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; call("label:0" ; "observer" ; "newCounterValue" ; "observertoken"
    :: "value") ; assign("Counter3-41.token", "Counter3-41.val" ;
    "Counter3.observertoken" :: "Counter3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask0.busythreads" ; "Counter3-41.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("label:2" ; "task" ; "getId" ; emp) ;
    assign("Monk1-58.id" ; "CounterTask9.taskId") ; return("id") ; assign(
    "Monk1.taskId" ; "Monk1-58.id") ; assign("Monk1.taskHistory" ; "|-"(
    "Monk1.taskHistory" :: "Monk1.taskId")) ; call("label:3" ; "task" ;
    "execute" ; emp) ; call("label:0" ; "myCounter" ; "inc" ; emp) ; assign(
    "Counter0.value" ; "+"("Counter0.value" :: int(1))) ; call("label:0" ;
    "this" ; "informObserver" ; emp) ; if "/="("observer" :: null) th skip el
    skip fi ; return(emp) ; return(emp) ; assign("Monk1-59.kill" ; bool(false))
    ; return("kill") ; assign("Monk1.kill" ; "Monk1-59.kill") ; call("label:4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Counter3.value" ; "-"(
    "Counter3.value" :: int(1))) ; call("label:0" ; "this" ; "informObserver" ;
    emp) ; if "/="("observer" :: null) th skip el skip fi ; call("label:0" ;
    "observer" ; "newCounterValue" ; "observertoken" :: "value") ; assign(
    "Counter3-43.token", "Counter3-43.val" ; "Counter3.observertoken" ::
    "Counter3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ; if
    "="("token" :: str("threads")) th skip el skip fi ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; assign("ShepherdTask0.busythreads" ;
    "Counter3-43.val") ; return(emp) ; return(emp) ; return(emp) ; if "kill" th
    skip el skip fi ; call("label:6" ; "this" ; "run" ; emp) ; call("label:0" ;
    "queue" ; "dequeueTask" ; emp) ; $bawait ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-20.task" |> ob("CounterTask6"), 
  "Abbey0-21.task" |> ob("CounterTask7"), 
  "Abbey0-22.task" |> ob("CounterTask8"), 
  "Abbey0-23.task" |> ob("CounterTask9"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(10), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-29.token" |> str("tasks"), 
  "Counter1-29.val" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-31.token" |> str("tasks"), 
  "Counter1-31.val" |> int(1), 
  "Counter1-33.token" |> str("tasks"), 
  "Counter1-33.val" |> int(0), 
  "Counter1-35.token" |> str("tasks"), 
  "Counter1-35.val" |> int(1), 
  "Counter1-37.token" |> str("tasks"), 
  "Counter1-37.val" |> int(0), 
  "Counter1-39.token" |> str("tasks"), 
  "Counter1-39.val" |> int(1), 
  "Counter1-41.token" |> str("tasks"), 
  "Counter1-41.val" |> int(0), 
  "Counter1-43.token" |> str("tasks"), 
  "Counter1-43.val" |> int(1), 
  "Counter1-45.token" |> str("tasks"), 
  "Counter1-45.val" |> int(0), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(0), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-25.token" |> str("busythreads"), 
  "Counter3-25.val" |> int(2), 
  "Counter3-27.token" |> str("busythreads"), 
  "Counter3-27.val" |> int(1), 
  "Counter3-29.token" |> str("busythreads"), 
  "Counter3-29.val" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-31.token" |> str("busythreads"), 
  "Counter3-31.val" |> int(1), 
  "Counter3-33.token" |> str("busythreads"), 
  "Counter3-33.val" |> int(2), 
  "Counter3-35.token" |> str("busythreads"), 
  "Counter3-35.val" |> int(1), 
  "Counter3-37.token" |> str("busythreads"), 
  "Counter3-37.val" |> int(2), 
  "Counter3-39.token" |> str("busythreads"), 
  "Counter3-39.val" |> int(1), 
  "Counter3-41.token" |> str("busythreads"), 
  "Counter3-41.val" |> int(2), 
  "Counter3-43.token" |> str("busythreads"), 
  "Counter3-43.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "CounterTask6.myCounter" |> ob("Counter0"), 
  "CounterTask6.taskId" |> int(6), 
  "CounterTask7.myCounter" |> ob("Counter0"), 
  "CounterTask7.taskId" |> int(7), 
  "CounterTask8.myCounter" |> ob("Counter0"), 
  "CounterTask8.taskId" |> int(8), 
  "CounterTask9.myCounter" |> ob("Counter0"), 
  "CounterTask9.taskId" |> int(9), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-17.task" |> ob("CounterTask6"), 
  "Main0-19.task" |> ob("CounterTask7"), 
  "Main0-21.task" |> ob("CounterTask8"), 
  "Main0-23.task" |> ob("CounterTask9"), 
  "Main0-3.i" |> int(10), 
  "Main0-3.task" |> ob("CounterTask9"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-32.task" |> ob("CounterTask5"), 
  "Monk1-34.id" |> int(5), 
  "Monk1-35.kill" |> bool(false), 
  "Monk1-38.task" |> ob("CounterTask6"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-40.id" |> int(6), 
  "Monk1-41.kill" |> bool(false), 
  "Monk1-44.task" |> ob("CounterTask7"), 
  "Monk1-46.id" |> int(7), 
  "Monk1-47.kill" |> bool(false), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-50.task" |> ob("CounterTask8"), 
  "Monk1-52.id" |> int(8), 
  "Monk1-53.kill" |> bool(false), 
  "Monk1-56.task" |> ob("CounterTask9"), 
  "Monk1-58.id" |> int(9), 
  "Monk1-59.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask9"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6) :: int(7) :: int(8) :: int(9)), 
  "Monk1.taskId" |> int(9), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(0), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(emp), 
  "nolabel.var" |> ob("Main0") | 
  "Abbey0-11" |> list("Abbey0-0.shepherd"), 
  "Abbey0-12" |> list("Abbey0-11.task"), 
  "Abbey0-14" |> list("Main0-5.task"), 
  "Abbey0-15" |> list("Main0-7.task"), 
  "Abbey0-16" |> list("Main0-9.task"), 
  "Abbey0-17" |> list("Main0-11.task"), 
  "Abbey0-18" |> list("Main0-13.task"), 
  "Abbey0-19" |> list("Main0-15.task"), 
  "Abbey0-20" |> list("Main0-17.task"), 
  "Abbey0-21" |> list("Main0-19.task"), 
  "Abbey0-22" |> list("Main0-21.task"), 
  "Abbey0-23" |> list("Main0-23.task"), 
  "Abbey0-4" |> list("Abbey0.taskCounter"), 
  "Abbey0-5" |> list(int(1) :: "Abbey0.taskCounter" :: "Abbey0.threadCounter"
    :: "Abbey0.busyCounter" :: "Abbey0.maxNofThreads" :: "Abbey0-0.mrate" ::
    "Abbey0.taskQueue" :: "Abbey0.this"), 
  "Abbey0-6" |> list("Abbey0.size"), 
  "Abbey0-7" |> list("Abbey0.taskQueue" :: "Abbey0.busyCounter" ::
    "Abbey0.threadCounter"), 
  "Abbey0-9" |> list("Abbey0.taskQueue" :: "Abbey0.busyCounter" ::
    "Abbey0.threadCounter"), 
  "Counter1-11" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-13" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-15" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-17" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-19" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-21" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-23" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-25" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-27" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-29" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-3" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-31" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-33" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-35" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-37" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-39" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-41" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-43" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-45" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-5" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-7" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter1-9" |> list("Counter1.observertoken" :: "Counter1.value"), 
  "Counter3-11" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-13" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-15" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-17" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-19" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-21" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-23" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-25" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-27" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-29" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-3" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-31" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-33" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-35" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-37" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-39" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-41" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-43" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-5" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-7" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Counter3-9" |> list("Counter3.observertoken" :: "Counter3.value"), 
  "Main0-1" |> list("Main0.nthreads_init" :: "Main0.maxthreads_init"), 
  "Main0-10" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-11" |> list("Main0-3.task"), 
  "Main0-12" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-13" |> list("Main0-3.task"), 
  "Main0-14" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-15" |> list("Main0-3.task"), 
  "Main0-16" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-17" |> list("Main0-3.task"), 
  "Main0-18" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-19" |> list("Main0-3.task"), 
  "Main0-20" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-21" |> list("Main0-3.task"), 
  "Main0-22" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-23" |> list("Main0-3.task"), 
  "Main0-4" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-5" |> list("Main0-3.task"), 
  "Main0-6" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-7" |> list("Main0-3.task"), 
  "Main0-8" |> list("Main0-3.i" :: "Main0.executionCounter"), 
  "Main0-9" |> list("Main0-3.task"), 
  "ShepherdTask0-1" |> list(str("tasks")), 
  "ShepherdTask0-2" |> list(str("threads")), 
  "ShepherdTask0-3" |> list(str("busythreads")), 
  "main-0" |> list(int(2) :: int(1)), 
  "returnMonk0-2" |> list("Monk0-2.task"), 
  "returnMonk0-4" |> list("Monk0-4.id"), 
  "returnMonk1-10" |> list("Monk1-10.id"), 
  "returnMonk1-11" |> list("Monk1-11.kill"), 
  "returnMonk1-14" |> list("Monk1-14.task"), 
  "returnMonk1-16" |> list("Monk1-16.id"), 
  "returnMonk1-17" |> list("Monk1-17.kill"), 
  "returnMonk1-2" |> list("Monk1-2.task"), 
  "returnMonk1-20" |> list("Monk1-20.task"), 
  "returnMonk1-22" |> list("Monk1-22.id"), 
  "returnMonk1-23" |> list("Monk1-23.kill"), 
  "returnMonk1-26" |> list("Monk1-26.task"), 
  "returnMonk1-28" |> list("Monk1-28.id"), 
  "returnMonk1-29" |> list("Monk1-29.kill"), 
  "returnMonk1-32" |> list("Monk1-32.task"), 
  "returnMonk1-34" |> list("Monk1-34.id"), 
  "returnMonk1-35" |> list("Monk1-35.kill"), 
  "returnMonk1-38" |> list("Monk1-38.task"), 
  "returnMonk1-4" |> list("Monk1-4.id"), 
  "returnMonk1-40" |> list("Monk1-40.id"), 
  "returnMonk1-41" |> list("Monk1-41.kill"), 
  "returnMonk1-44" |> list("Monk1-44.task"), 
  "returnMonk1-46" |> list("Monk1-46.id"), 
  "returnMonk1-47" |> list("Monk1-47.kill"), 
  "returnMonk1-5" |> list("Monk1-5.kill"), 
  "returnMonk1-50" |> list("Monk1-50.task"), 
  "returnMonk1-52" |> list("Monk1-52.id"), 
  "returnMonk1-53" |> list("Monk1-53.kill"), 
  "returnMonk1-56" |> list("Monk1-56.task"), 
  "returnMonk1-58" |> list("Monk1-58.id"), 
  "returnMonk1-59" |> list("Monk1-59.kill"), 
  "returnMonk1-8" |> list("Monk1-8.task"), 
  "returnShepherdTask0-4" |> list("ShepherdTask0-4.val"), 
  "returnShepherdTask0-5" |> list("ShepherdTask0-5.val")}Att: noSubst Label:
    "lastrun" >
 
<log From: 45 To: 46 Type: "ifthenelse"
    Data:{if "<"("i" :: "amount") th skip el skip fi | TnoSubst | 
  "eq" |> "<"(int(0) :: "Main0.nthreads_init")}Att: noSubst Label: "Abbey0-6" >
 
<log From: 90 To: 91 Type: "ifthenelse"
    Data:{if "<"("i" :: "amount") th skip el skip fi | TnoSubst | 
  "eq" |> "<"(int(1) :: "Main0.nthreads_init")}Att: noSubst Label: "Abbey0-6" >
 
<log From: 108 To: 109 Type: "ifthenelse"
    Data:{if "<"("i" :: "amount") th skip el skip fi | TnoSubst | 
  "eq" |> "~"("<"(int(2) :: "Main0.nthreads_init"))}Att: noSubst Label:
    "Abbey0-6" >
 
<log From: 212 To: 213 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-2" >
 
<log From: 228 To: 229 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(0), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "Main0-3.i" |> int(0), 
  "Main0-3.task" |> ob("CounterTask0"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.taskHistory" |> list(emp), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.taskHistory" |> list(emp), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(0), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("ShepherdTask0")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk0-2" >
 
<log From: 247 To: 248 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-4" >
 
<log From: 272 To: 273 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-6" >
 
<log From: 284 To: 285 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-2" >
 
<log From: 316 To: 317 Type: "blocked await"
    Data:{$bawait "&&"(?("l1") :: ?("l2")) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "Main0-3.i" |> int(0), 
  "Main0-3.task" |> ob("CounterTask0"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.taskHistory" |> list(emp), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask0")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> "~"("&&"(?("l1") :: ?("l2")))}Att: noSubst Label: "Monk0-5" >
 
<log From: 319 To: 320 Type: "blocked await"
    Data:{$bawait ">"("idlethreads" :: "/"("threads" :: int(2))) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "Main0-3.i" |> int(0), 
  "Main0-3.task" |> ob("CounterTask0"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.taskHistory" |> list(emp), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask0")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "ShepherdTask0-8" >
 
<log From: 322 To: 323 Type: "blocked await"
    Data:{$bawait "&&"("<"("threads" :: "maxthreads") :: "<"("-"("idlethreads"
    :: "tasks") :: "/"("threads" :: "mrate"))) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "Main0-3.i" |> int(0), 
  "Main0-3.task" |> ob("CounterTask0"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.taskHistory" |> list(emp), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask0")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> "~"("&&"("<"(int(2) :: "+"("Main0.maxthreads_init" :: int(1))) ::
    bool(false)))}Att: noSubst Label: "ShepherdTask0-7" >
 
<log From: 325 To: 326 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "Main0-3.i" |> int(0), 
  "Main0-3.task" |> ob("CounterTask0"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.taskHistory" |> list(emp), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask0")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-2" >
 
<log From: 336 To: 337 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-8" >
 
<log From: 378 To: 379 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-10" >
 
<log From: 390 To: 391 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-4" >
 
<log From: 439 To: 440 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-6" >
 
<log From: 459 To: 460 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(1), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "Main0-3.i" |> int(1), 
  "Main0-3.task" |> ob("CounterTask1"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask0"), 
  "Monk1.taskHistory" |> list(int(0)), 
  "Monk1.taskId" |> int(0), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask1")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-8" >
 
<log From: 470 To: 471 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-12" >
 
<log From: 512 To: 513 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-14" >
 
<log From: 524 To: 525 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-8" >
 
<log From: 573 To: 574 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-10" >
 
<log From: 593 To: 594 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(2), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "Main0-3.i" |> int(2), 
  "Main0-3.task" |> ob("CounterTask2"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask1"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1)), 
  "Monk1.taskId" |> int(1), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask2")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-14" >
 
<log From: 604 To: 605 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-16" >
 
<log From: 646 To: 647 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-18" >
 
<log From: 658 To: 659 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-12" >
 
<log From: 707 To: 708 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-14" >
 
<log From: 727 To: 728 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(3), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-3.i" |> int(3), 
  "Main0-3.task" |> ob("CounterTask3"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask2"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2)), 
  "Monk1.taskId" |> int(2), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask3")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-20" >
 
<log From: 738 To: 739 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-20" >
 
<log From: 780 To: 781 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-22" >
 
<log From: 792 To: 793 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-16" >
 
<log From: 841 To: 842 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-18" >
 
<log From: 861 To: 862 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(4), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-3.i" |> int(4), 
  "Main0-3.task" |> ob("CounterTask4"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-4.id" |> int(0), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask3"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3)), 
  "Monk1.taskId" |> int(3), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask4")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-26" >
 
<log From: 872 To: 873 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-24" >
 
<log From: 914 To: 915 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-26" >
 
<log From: 926 To: 927 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-20" >
 
<log From: 975 To: 976 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-22" >
 
<log From: 995 To: 996 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(5), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-3.i" |> int(5), 
  "Main0-3.task" |> ob("CounterTask5"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-4.id" |> int(0), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask4"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4)), 
  "Monk1.taskId" |> int(4), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask5")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-32" >
 
<log From: 1006 To: 1007 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-28" >
 
<log From: 1048 To: 1049 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-30" >
 
<log From: 1060 To: 1061 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-24" >
 
<log From: 1109 To: 1110 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-26" >
 
<log From: 1129 To: 1130 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-20.task" |> ob("CounterTask6"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(6), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-29.token" |> str("tasks"), 
  "Counter1-29.val" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-31.token" |> str("tasks"), 
  "Counter1-31.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-25.token" |> str("busythreads"), 
  "Counter3-25.val" |> int(2), 
  "Counter3-27.token" |> str("busythreads"), 
  "Counter3-27.val" |> int(1), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "CounterTask6.myCounter" |> ob("Counter0"), 
  "CounterTask6.taskId" |> int(6), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-17.task" |> ob("CounterTask6"), 
  "Main0-3.i" |> int(6), 
  "Main0-3.task" |> ob("CounterTask6"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-32.task" |> ob("CounterTask5"), 
  "Monk1-34.id" |> int(5), 
  "Monk1-35.kill" |> bool(false), 
  "Monk1-4.id" |> int(0), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask5"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5)), 
  "Monk1.taskId" |> int(5), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask6")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-38" >
 
<log From: 1140 To: 1141 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-32" >
 
<log From: 1182 To: 1183 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-34" >
 
<log From: 1194 To: 1195 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-28" >
 
<log From: 1243 To: 1244 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-30" >
 
<log From: 1263 To: 1264 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-20.task" |> ob("CounterTask6"), 
  "Abbey0-21.task" |> ob("CounterTask7"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(7), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-29.token" |> str("tasks"), 
  "Counter1-29.val" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-31.token" |> str("tasks"), 
  "Counter1-31.val" |> int(1), 
  "Counter1-33.token" |> str("tasks"), 
  "Counter1-33.val" |> int(0), 
  "Counter1-35.token" |> str("tasks"), 
  "Counter1-35.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-25.token" |> str("busythreads"), 
  "Counter3-25.val" |> int(2), 
  "Counter3-27.token" |> str("busythreads"), 
  "Counter3-27.val" |> int(1), 
  "Counter3-29.token" |> str("busythreads"), 
  "Counter3-29.val" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-31.token" |> str("busythreads"), 
  "Counter3-31.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "CounterTask6.myCounter" |> ob("Counter0"), 
  "CounterTask6.taskId" |> int(6), 
  "CounterTask7.myCounter" |> ob("Counter0"), 
  "CounterTask7.taskId" |> int(7), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-17.task" |> ob("CounterTask6"), 
  "Main0-19.task" |> ob("CounterTask7"), 
  "Main0-3.i" |> int(7), 
  "Main0-3.task" |> ob("CounterTask7"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-32.task" |> ob("CounterTask5"), 
  "Monk1-34.id" |> int(5), 
  "Monk1-35.kill" |> bool(false), 
  "Monk1-38.task" |> ob("CounterTask6"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-40.id" |> int(6), 
  "Monk1-41.kill" |> bool(false), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask6"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6)), 
  "Monk1.taskId" |> int(6), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask7")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-44" >
 
<log From: 1274 To: 1275 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-36" >
 
<log From: 1316 To: 1317 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-38" >
 
<log From: 1328 To: 1329 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-32" >
 
<log From: 1377 To: 1378 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-34" >
 
<log From: 1397 To: 1398 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-20.task" |> ob("CounterTask6"), 
  "Abbey0-21.task" |> ob("CounterTask7"), 
  "Abbey0-22.task" |> ob("CounterTask8"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(8), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-29.token" |> str("tasks"), 
  "Counter1-29.val" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-31.token" |> str("tasks"), 
  "Counter1-31.val" |> int(1), 
  "Counter1-33.token" |> str("tasks"), 
  "Counter1-33.val" |> int(0), 
  "Counter1-35.token" |> str("tasks"), 
  "Counter1-35.val" |> int(1), 
  "Counter1-37.token" |> str("tasks"), 
  "Counter1-37.val" |> int(0), 
  "Counter1-39.token" |> str("tasks"), 
  "Counter1-39.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-25.token" |> str("busythreads"), 
  "Counter3-25.val" |> int(2), 
  "Counter3-27.token" |> str("busythreads"), 
  "Counter3-27.val" |> int(1), 
  "Counter3-29.token" |> str("busythreads"), 
  "Counter3-29.val" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-31.token" |> str("busythreads"), 
  "Counter3-31.val" |> int(1), 
  "Counter3-33.token" |> str("busythreads"), 
  "Counter3-33.val" |> int(2), 
  "Counter3-35.token" |> str("busythreads"), 
  "Counter3-35.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "CounterTask6.myCounter" |> ob("Counter0"), 
  "CounterTask6.taskId" |> int(6), 
  "CounterTask7.myCounter" |> ob("Counter0"), 
  "CounterTask7.taskId" |> int(7), 
  "CounterTask8.myCounter" |> ob("Counter0"), 
  "CounterTask8.taskId" |> int(8), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-17.task" |> ob("CounterTask6"), 
  "Main0-19.task" |> ob("CounterTask7"), 
  "Main0-21.task" |> ob("CounterTask8"), 
  "Main0-3.i" |> int(8), 
  "Main0-3.task" |> ob("CounterTask8"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-32.task" |> ob("CounterTask5"), 
  "Monk1-34.id" |> int(5), 
  "Monk1-35.kill" |> bool(false), 
  "Monk1-38.task" |> ob("CounterTask6"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-40.id" |> int(6), 
  "Monk1-41.kill" |> bool(false), 
  "Monk1-44.task" |> ob("CounterTask7"), 
  "Monk1-46.id" |> int(7), 
  "Monk1-47.kill" |> bool(false), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask7"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6) :: int(7)), 
  "Monk1.taskId" |> int(7), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask8")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-50" >
 
<log From: 1408 To: 1409 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-40" >
 
<log From: 1450 To: 1451 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-42" >
 
<log From: 1462 To: 1463 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-36" >
 
<log From: 1511 To: 1512 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-38" >
 
<log From: 1531 To: 1532 Type: "await"
    Data:{await ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-20.task" |> ob("CounterTask6"), 
  "Abbey0-21.task" |> ob("CounterTask7"), 
  "Abbey0-22.task" |> ob("CounterTask8"), 
  "Abbey0-23.task" |> ob("CounterTask9"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(9), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-29.token" |> str("tasks"), 
  "Counter1-29.val" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-31.token" |> str("tasks"), 
  "Counter1-31.val" |> int(1), 
  "Counter1-33.token" |> str("tasks"), 
  "Counter1-33.val" |> int(0), 
  "Counter1-35.token" |> str("tasks"), 
  "Counter1-35.val" |> int(1), 
  "Counter1-37.token" |> str("tasks"), 
  "Counter1-37.val" |> int(0), 
  "Counter1-39.token" |> str("tasks"), 
  "Counter1-39.val" |> int(1), 
  "Counter1-41.token" |> str("tasks"), 
  "Counter1-41.val" |> int(0), 
  "Counter1-43.token" |> str("tasks"), 
  "Counter1-43.val" |> int(1), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(1), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-25.token" |> str("busythreads"), 
  "Counter3-25.val" |> int(2), 
  "Counter3-27.token" |> str("busythreads"), 
  "Counter3-27.val" |> int(1), 
  "Counter3-29.token" |> str("busythreads"), 
  "Counter3-29.val" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-31.token" |> str("busythreads"), 
  "Counter3-31.val" |> int(1), 
  "Counter3-33.token" |> str("busythreads"), 
  "Counter3-33.val" |> int(2), 
  "Counter3-35.token" |> str("busythreads"), 
  "Counter3-35.val" |> int(1), 
  "Counter3-37.token" |> str("busythreads"), 
  "Counter3-37.val" |> int(2), 
  "Counter3-39.token" |> str("busythreads"), 
  "Counter3-39.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "CounterTask6.myCounter" |> ob("Counter0"), 
  "CounterTask6.taskId" |> int(6), 
  "CounterTask7.myCounter" |> ob("Counter0"), 
  "CounterTask7.taskId" |> int(7), 
  "CounterTask8.myCounter" |> ob("Counter0"), 
  "CounterTask8.taskId" |> int(8), 
  "CounterTask9.myCounter" |> ob("Counter0"), 
  "CounterTask9.taskId" |> int(9), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-17.task" |> ob("CounterTask6"), 
  "Main0-19.task" |> ob("CounterTask7"), 
  "Main0-21.task" |> ob("CounterTask8"), 
  "Main0-23.task" |> ob("CounterTask9"), 
  "Main0-3.i" |> int(9), 
  "Main0-3.task" |> ob("CounterTask9"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-32.task" |> ob("CounterTask5"), 
  "Monk1-34.id" |> int(5), 
  "Monk1-35.kill" |> bool(false), 
  "Monk1-38.task" |> ob("CounterTask6"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-40.id" |> int(6), 
  "Monk1-41.kill" |> bool(false), 
  "Monk1-44.task" |> ob("CounterTask7"), 
  "Monk1-46.id" |> int(7), 
  "Monk1-47.kill" |> bool(false), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-50.task" |> ob("CounterTask8"), 
  "Monk1-52.id" |> int(8), 
  "Monk1-53.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask8"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6) :: int(7) :: int(8)), 
  "Monk1.taskId" |> int(8), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(1), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(ob("CounterTask9")), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-56" >
 
<log From: 1542 To: 1543 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-1.caller" :: null)}Att: noSubst Label:
    "Counter1-44" >
 
<log From: 1567 To: 1568 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-40" >
 
<log From: 1609 To: 1610 Type: "ifthenelse"
    Data:{if "/="("observer" :: null) th skip el skip fi | TnoSubst | 
  "eq" |> "/="("ShepherdTask0-3.caller" :: null)}Att: noSubst Label:
    "Counter3-42" >
 
<log From: 1628 To: 1629 Type: "blocked await"
    Data:{$bawait ">"("#"("tasks") :: int(0)) | 
  "Abbey0-0.mrate" |> int(5), 
  "Abbey0-0.shepherd" |> ob("ShepherdTask0"), 
  "Abbey0-11.task" |> ob("ShepherdTask0"), 
  "Abbey0-12.task" |> ob("ShepherdTask0"), 
  "Abbey0-14.task" |> ob("CounterTask0"), 
  "Abbey0-15.task" |> ob("CounterTask1"), 
  "Abbey0-16.task" |> ob("CounterTask2"), 
  "Abbey0-17.task" |> ob("CounterTask3"), 
  "Abbey0-18.task" |> ob("CounterTask4"), 
  "Abbey0-19.task" |> ob("CounterTask5"), 
  "Abbey0-20.task" |> ob("CounterTask6"), 
  "Abbey0-21.task" |> ob("CounterTask7"), 
  "Abbey0-22.task" |> ob("CounterTask8"), 
  "Abbey0-23.task" |> ob("CounterTask9"), 
  "Abbey0-6.amount" |> "Main0.nthreads_init", 
  "Abbey0-6.i" |> int(2), 
  "Abbey0-6.thread" |> ob("Monk1"), 
  "Abbey0.busyCounter" |> ob("Counter3"), 
  "Abbey0.maxNofThreads" |> "Main0.maxthreads_init", 
  "Abbey0.size" |> "Main0.nthreads_init", 
  "Abbey0.taskCounter" |> ob("Counter1"), 
  "Abbey0.taskQueue" |> ob("TaskQueue0"), 
  "Abbey0.threadCounter" |> ob("Counter2"), 
  "Abbey0.threads" |> list(ob("Monk0") :: ob("Monk1")), 
  "Counter0.observer" |> null, 
  "Counter0.observertoken" |> str(""), 
  "Counter0.value" |> int(10), 
  "Counter1-11.token" |> str("tasks"), 
  "Counter1-11.val" |> int(1), 
  "Counter1-13.token" |> str("tasks"), 
  "Counter1-13.val" |> int(0), 
  "Counter1-15.token" |> str("tasks"), 
  "Counter1-15.val" |> int(1), 
  "Counter1-17.token" |> str("tasks"), 
  "Counter1-17.val" |> int(0), 
  "Counter1-19.token" |> str("tasks"), 
  "Counter1-19.val" |> int(1), 
  "Counter1-21.token" |> str("tasks"), 
  "Counter1-21.val" |> int(0), 
  "Counter1-23.token" |> str("tasks"), 
  "Counter1-23.val" |> int(1), 
  "Counter1-25.token" |> str("tasks"), 
  "Counter1-25.val" |> int(0), 
  "Counter1-27.token" |> str("tasks"), 
  "Counter1-27.val" |> int(1), 
  "Counter1-29.token" |> str("tasks"), 
  "Counter1-29.val" |> int(0), 
  "Counter1-3.token" |> str("tasks"), 
  "Counter1-3.val" |> int(1), 
  "Counter1-31.token" |> str("tasks"), 
  "Counter1-31.val" |> int(1), 
  "Counter1-33.token" |> str("tasks"), 
  "Counter1-33.val" |> int(0), 
  "Counter1-35.token" |> str("tasks"), 
  "Counter1-35.val" |> int(1), 
  "Counter1-37.token" |> str("tasks"), 
  "Counter1-37.val" |> int(0), 
  "Counter1-39.token" |> str("tasks"), 
  "Counter1-39.val" |> int(1), 
  "Counter1-41.token" |> str("tasks"), 
  "Counter1-41.val" |> int(0), 
  "Counter1-43.token" |> str("tasks"), 
  "Counter1-43.val" |> int(1), 
  "Counter1-45.token" |> str("tasks"), 
  "Counter1-45.val" |> int(0), 
  "Counter1-5.token" |> str("tasks"), 
  "Counter1-5.val" |> int(0), 
  "Counter1-7.token" |> str("tasks"), 
  "Counter1-7.val" |> int(1), 
  "Counter1-9.token" |> str("tasks"), 
  "Counter1-9.val" |> int(0), 
  "Counter1.observer" |> "ShepherdTask0-1.caller", 
  "Counter1.observertoken" |> str("tasks"), 
  "Counter1.value" |> int(0), 
  "Counter2.observer" |> "ShepherdTask0-2.caller", 
  "Counter2.observertoken" |> str("threads"), 
  "Counter2.value" |> int(2), 
  "Counter3-11.token" |> str("busythreads"), 
  "Counter3-11.val" |> int(1), 
  "Counter3-13.token" |> str("busythreads"), 
  "Counter3-13.val" |> int(2), 
  "Counter3-15.token" |> str("busythreads"), 
  "Counter3-15.val" |> int(1), 
  "Counter3-17.token" |> str("busythreads"), 
  "Counter3-17.val" |> int(2), 
  "Counter3-19.token" |> str("busythreads"), 
  "Counter3-19.val" |> int(1), 
  "Counter3-21.token" |> str("busythreads"), 
  "Counter3-21.val" |> int(2), 
  "Counter3-23.token" |> str("busythreads"), 
  "Counter3-23.val" |> int(1), 
  "Counter3-25.token" |> str("busythreads"), 
  "Counter3-25.val" |> int(2), 
  "Counter3-27.token" |> str("busythreads"), 
  "Counter3-27.val" |> int(1), 
  "Counter3-29.token" |> str("busythreads"), 
  "Counter3-29.val" |> int(2), 
  "Counter3-3.token" |> str("busythreads"), 
  "Counter3-3.val" |> int(1), 
  "Counter3-31.token" |> str("busythreads"), 
  "Counter3-31.val" |> int(1), 
  "Counter3-33.token" |> str("busythreads"), 
  "Counter3-33.val" |> int(2), 
  "Counter3-35.token" |> str("busythreads"), 
  "Counter3-35.val" |> int(1), 
  "Counter3-37.token" |> str("busythreads"), 
  "Counter3-37.val" |> int(2), 
  "Counter3-39.token" |> str("busythreads"), 
  "Counter3-39.val" |> int(1), 
  "Counter3-41.token" |> str("busythreads"), 
  "Counter3-41.val" |> int(2), 
  "Counter3-43.token" |> str("busythreads"), 
  "Counter3-43.val" |> int(1), 
  "Counter3-5.token" |> str("busythreads"), 
  "Counter3-5.val" |> int(2), 
  "Counter3-7.token" |> str("busythreads"), 
  "Counter3-7.val" |> int(1), 
  "Counter3-9.token" |> str("busythreads"), 
  "Counter3-9.val" |> int(2), 
  "Counter3.observer" |> "ShepherdTask0-3.caller", 
  "Counter3.observertoken" |> str("busythreads"), 
  "Counter3.value" |> int(1), 
  "CounterTask0.myCounter" |> ob("Counter0"), 
  "CounterTask0.taskId" |> int(0), 
  "CounterTask1.myCounter" |> ob("Counter0"), 
  "CounterTask1.taskId" |> int(1), 
  "CounterTask2.myCounter" |> ob("Counter0"), 
  "CounterTask2.taskId" |> int(2), 
  "CounterTask3.myCounter" |> ob("Counter0"), 
  "CounterTask3.taskId" |> int(3), 
  "CounterTask4.myCounter" |> ob("Counter0"), 
  "CounterTask4.taskId" |> int(4), 
  "CounterTask5.myCounter" |> ob("Counter0"), 
  "CounterTask5.taskId" |> int(5), 
  "CounterTask6.myCounter" |> ob("Counter0"), 
  "CounterTask6.taskId" |> int(6), 
  "CounterTask7.myCounter" |> ob("Counter0"), 
  "CounterTask7.taskId" |> int(7), 
  "CounterTask8.myCounter" |> ob("Counter0"), 
  "CounterTask8.taskId" |> int(8), 
  "CounterTask9.myCounter" |> ob("Counter0"), 
  "CounterTask9.taskId" |> int(9), 
  "Main0-11.task" |> ob("CounterTask3"), 
  "Main0-13.task" |> ob("CounterTask4"), 
  "Main0-15.task" |> ob("CounterTask5"), 
  "Main0-17.task" |> ob("CounterTask6"), 
  "Main0-19.task" |> ob("CounterTask7"), 
  "Main0-21.task" |> ob("CounterTask8"), 
  "Main0-23.task" |> ob("CounterTask9"), 
  "Main0-3.i" |> int(10), 
  "Main0-3.task" |> ob("CounterTask9"), 
  "Main0-5.task" |> ob("CounterTask0"), 
  "Main0-7.task" |> ob("CounterTask1"), 
  "Main0-9.task" |> ob("CounterTask2"), 
  "Main0.executionCounter" |> ob("Counter0"), 
  "Main0.maxthreads_init" |> int(1), 
  "Main0.nthreads_init" |> int(2), 
  "Main0.threadpool" |> ob("Abbey0"), 
  "Monk0-2.task" |> ob("ShepherdTask0"), 
  "Monk0-4.id" |> int(1), 
  "Monk0.busyCounter" |> ob("Counter3"), 
  "Monk0.kill" |> bool(false), 
  "Monk0.queue" |> ob("TaskQueue0"), 
  "Monk0.task" |> ob("ShepherdTask0"), 
  "Monk0.taskHistory" |> list(int(1)), 
  "Monk0.taskId" |> int(1), 
  "Monk0.threadCounter" |> ob("Counter2"), 
  "Monk1-10.id" |> int(1), 
  "Monk1-11.kill" |> bool(false), 
  "Monk1-14.task" |> ob("CounterTask2"), 
  "Monk1-16.id" |> int(2), 
  "Monk1-17.kill" |> bool(false), 
  "Monk1-2.task" |> ob("CounterTask0"), 
  "Monk1-20.task" |> ob("CounterTask3"), 
  "Monk1-22.id" |> int(3), 
  "Monk1-23.kill" |> bool(false), 
  "Monk1-26.task" |> ob("CounterTask4"), 
  "Monk1-28.id" |> int(4), 
  "Monk1-29.kill" |> bool(false), 
  "Monk1-32.task" |> ob("CounterTask5"), 
  "Monk1-34.id" |> int(5), 
  "Monk1-35.kill" |> bool(false), 
  "Monk1-38.task" |> ob("CounterTask6"), 
  "Monk1-4.id" |> int(0), 
  "Monk1-40.id" |> int(6), 
  "Monk1-41.kill" |> bool(false), 
  "Monk1-44.task" |> ob("CounterTask7"), 
  "Monk1-46.id" |> int(7), 
  "Monk1-47.kill" |> bool(false), 
  "Monk1-5.kill" |> bool(false), 
  "Monk1-50.task" |> ob("CounterTask8"), 
  "Monk1-52.id" |> int(8), 
  "Monk1-53.kill" |> bool(false), 
  "Monk1-56.task" |> ob("CounterTask9"), 
  "Monk1-58.id" |> int(9), 
  "Monk1-59.kill" |> bool(false), 
  "Monk1-8.task" |> ob("CounterTask1"), 
  "Monk1.busyCounter" |> ob("Counter3"), 
  "Monk1.kill" |> bool(false), 
  "Monk1.queue" |> ob("TaskQueue0"), 
  "Monk1.task" |> ob("CounterTask9"), 
  "Monk1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6) :: int(7) :: int(8) :: int(9)), 
  "Monk1.taskId" |> int(9), 
  "Monk1.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0-1.token" |> str("tasks"), 
  "ShepherdTask0-2.token" |> str("threads"), 
  "ShepherdTask0-3.token" |> str("busythreads"), 
  "ShepherdTask0-4.val" |> int(2), 
  "ShepherdTask0-5.val" |> int(0), 
  "ShepherdTask0-7.idlethreads" |> int(1), 
  "ShepherdTask0-8.idlethreads" |> int(1), 
  "ShepherdTask0.busyCounter" |> ob("Counter3"), 
  "ShepherdTask0.busythreads" |> int(1), 
  "ShepherdTask0.maxthreads" |> "+"("Main0.maxthreads_init" :: int(1)), 
  "ShepherdTask0.mrate" |> int(5), 
  "ShepherdTask0.taskCounter" |> ob("Counter1"), 
  "ShepherdTask0.taskId" |> int(1), 
  "ShepherdTask0.taskQueue" |> ob("TaskQueue0"), 
  "ShepherdTask0.tasks" |> int(0), 
  "ShepherdTask0.threadCounter" |> ob("Counter2"), 
  "ShepherdTask0.threadpool" |> "Abbey0.this", 
  "ShepherdTask0.threads" |> int(2), 
  "TaskQueue0.taskCounter" |> ob("Counter1"), 
  "TaskQueue0.tasks" |> list(emp), 
  "nolabel.var" |> ob("Main0") | 
  "eq" |> bool(true)}Att: noSubst Label: "Monk1-62" >
}
Bye.
