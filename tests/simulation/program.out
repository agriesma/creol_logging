==========================================
rewrite [6000] in PROGRAM : main(state, "Main", int(2) :: int(1)) .
result State: {
<choice Number: 56 Type: "ifthenelse" Expression: "<"(int(0) ::
    "Main-0.nthreads_init") >
 
<choice Number: 110 Type: "ifthenelse" Expression: "<"(int(1) ::
    "Main-0.nthreads_init") >
 
<choice Number: 131 Type: "ifthenelse" Expression: "~"("<"(int(2) ::
    "Main-0.nthreads_init")) >
 
<choice Number: 427 Type: "blocked await" Expression: "~"("&&"(?("l1") :: ?(
    "l2"))) >
 
<choice Number: 435 Type: "blocked await" Expression: "~"("&&"("<"(int(2) ::
    "+"("Main-0.maxthreads_init" :: int(1))) :: bool(false))) >
 
< label(ob("Monk-0"), 1) : Future |  Completed: false,  References: 0,  Value:
    emp >
 
< label(ob("Monk-0"), 5) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 1) : Future |  Completed: false,  References: 0,  Value:
    emp >
 
< label(ob("Monk-1"), 7) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 13) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 19) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 25) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 31) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 37) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 43) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 49) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 55) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 61) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("Monk-1"), 62) : Future |  Completed: false,  References: 1,  Value:
    emp >
 
< label(ob("ShepherdTask-0"), 7) : Future |  Completed: false,  References: 1, 
    Value: emp >
 
< label(ob("ShepherdTask-0"), 8) : Future |  Completed: false,  References: 1, 
    Value: emp >
 
< ob("Abbey-0") : "Abbey" |
  Att: "busyCounter" |-> ob("Counter-3"), "maxNofThreads" |-> int(1), "size"
    |-> int(2), "taskCounter" |-> ob("Counter-1"), "taskQueue" |-> ob(
    "TaskQueue-0"), "this" |-> ob("Abbey-0"), "threadCounter" |-> ob(
    "Counter-2"), "threads" |-> list(ob("Monk-0") :: ob("Monk-1")),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 24 >
 
< ob("Counter-0") : "Counter" |
  Att: "observer" |-> null, "observertoken" |-> str(""), "this" |-> ob(
    "Counter-0"), "value" |-> int(10),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 12 >
 
< ob("Counter-1") : "Counter" |
  Att: "observer" |-> ob("ShepherdTask-0"), "observertoken" |-> str("tasks"),
    "this" |-> ob("Counter-1"), "value" |-> int(0),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 46 >
 
< ob("Counter-2") : "Counter" |
  Att: "observer" |-> ob("ShepherdTask-0"), "observertoken" |-> str("threads"),
    "this" |-> ob("Counter-2"), "value" |-> int(2),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 4 >
 
< ob("Counter-3") : "Counter" |
  Att: "observer" |-> ob("ShepherdTask-0"), "observertoken" |-> str(
    "busythreads"), "this" |-> ob("Counter-3"), "value" |-> int(1),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 44 >
 
< ob("CounterTask-0") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(0), "this" |-> ob(
    "CounterTask-0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-1") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(1), "this" |-> ob(
    "CounterTask-1"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-2") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(2), "this" |-> ob(
    "CounterTask-2"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-3") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(3), "this" |-> ob(
    "CounterTask-3"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-4") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(4), "this" |-> ob(
    "CounterTask-4"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-5") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(5), "this" |-> ob(
    "CounterTask-5"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-6") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(6), "this" |-> ob(
    "CounterTask-6"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-7") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(7), "this" |-> ob(
    "CounterTask-7"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-8") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(8), "this" |-> ob(
    "CounterTask-8"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("CounterTask-9") : "CounterTask" |
  Att: "myCounter" |-> ob("Counter-0"), "taskId" |-> int(9), "this" |-> ob(
    "CounterTask-9"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 3 >
 
< ob("Main-0") : "Main" |
  Att: "executionCounter" |-> ob("Counter-0"), "maxthreads_init" |-> int(1),
    "nthreads_init" |-> int(2), "this" |-> ob("Main-0"), "threadpool" |-> ob(
    "Abbey-0"),
  Pr: idle,
  PrQ: noProc,
  Lcnt: 24 >
 
< ob("Monk-0") : "Monk" |
  Att: "busyCounter" |-> ob("Counter-3"), "index" |-> null, "kill" |-> bool(
    false), "queue" |-> ob("TaskQueue-0"), "task" |-> ob("ShepherdTask-0"),
    "taskHistory" |-> list(int(1)), "taskId" |-> int(1), "this" |-> ob(
    "Monk-0"), "threadCounter" |-> ob("Counter-2"),
  Pr: {".class" |-> str("Monk"), ".label" |-> label(ob("Monk-0"), 1), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk-0"), "ccglab0" |->
    null, "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> label(ob(
    "Monk-0"), 5), "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6" |-> null |
    get(label(ob("Monk-0"), 5) ; "kill") ; free("ccglab3") ; call("ccglab4" ;
    "busyCounter" ; "dec" ; emp) ; get("ccglab4" ; noVid) ; free("ccglab4") ;
    if "kill" th call("ccglab5" ; "threadCounter" ; "dec" ; emp) ; get(
    "ccglab5" ; noVid) ; free("ccglab5") el release ; call("ccglab6" ; "this" ;
    "run" ; emp) ; get("ccglab6" ; noVid) ; free("ccglab6") fi ; return(emp)},
  PrQ: noProc,
  Lcnt: 6 >
 
< ob("Monk-1") : "Monk" |
  Att: "busyCounter" |-> ob("Counter-3"), "index" |-> null, "kill" |-> bool(
    false), "queue" |-> ob("TaskQueue-0"), "task" |-> ob("CounterTask-9"),
    "taskHistory" |-> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4) ::
    int(5) :: int(6) :: int(7) :: int(8) :: int(9)), "taskId" |-> int(9),
    "this" |-> ob("Monk-1"), "threadCounter" |-> ob("Counter-2"),
  Pr: {".class" |-> str("Monk"), ".label" |-> label(ob("Monk-1"), 61),
    ".method" |-> str("run"), "_" |-> null, "caller" |-> ob("Monk-1"),
    "ccglab0" |-> label(ob("Monk-1"), 62), "ccglab1" |-> null, "ccglab2" |->
    null, "ccglab3" |-> null, "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6"
    |-> null | get(label(ob("Monk-1"), 62) ; "task") ; free("ccglab0") ; call(
    "ccglab1" ; "busyCounter" ; "inc" ; emp) ; get("ccglab1" ; noVid) ; free(
    "ccglab1") ; call("ccglab2" ; "task" ; "getId" ; emp) ; get("ccglab2" ;
    "taskId") ; free("ccglab2") ; assign("taskHistory" ; "|-"("taskHistory" ::
    "taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; get("ccglab3" ;
    "kill") ; free("ccglab3") ; call("ccglab4" ; "busyCounter" ; "dec" ; emp) ;
    get("ccglab4" ; noVid) ; free("ccglab4") ; if "kill" th call("ccglab5" ;
    "threadCounter" ; "dec" ; emp) ; get("ccglab5" ; noVid) ; free("ccglab5")
    el release ; call("ccglab6" ; "this" ; "run" ; emp) ; get("ccglab6" ;
    noVid) ; free("ccglab6") fi ; return(emp) ; $cont label(ob("Monk-1"), 61)},
  PrQ: {".class" |-> str("Monk"), ".label" |-> label(ob("Monk-1"), 1),
    ".method" |-> str("run"), "_" |-> null, "caller" |-> ob("Monk-1"),
    "ccglab0" |-> null, "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |->
    null, "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6" |-> label(ob(
    "Monk-1"), 7) | get(label(ob("Monk-1"), 7) ; noVid) ; free("ccglab6") ;
    return(emp)}, {".class" |-> str("Monk"), ".label" |-> label(ob("Monk-1"),
    7), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob("Monk-1"),
    "ccglab0" |-> null, "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |->
    null, "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6" |-> label(ob(
    "Monk-1"), 13) | get(label(ob("Monk-1"), 13) ; noVid) ; free("ccglab6") ;
    return(emp) ; $cont label(ob("Monk-1"), 7)}, {".class" |-> str("Monk"),
    ".label" |-> label(ob("Monk-1"), 13), ".method" |-> str("run"), "_" |->
    null, "caller" |-> ob("Monk-1"), "ccglab0" |-> null, "ccglab1" |-> null,
    "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4" |-> null, "ccglab5" |->
    null, "ccglab6" |-> label(ob("Monk-1"), 19) | get(label(ob("Monk-1"), 19) ;
    noVid) ; free("ccglab6") ; return(emp) ; $cont label(ob("Monk-1"), 13)}, {
    ".class" |-> str("Monk"), ".label" |-> label(ob("Monk-1"), 19), ".method"
    |-> str("run"), "_" |-> null, "caller" |-> ob("Monk-1"), "ccglab0" |->
    null, "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4"
    |-> null, "ccglab5" |-> null, "ccglab6" |-> label(ob("Monk-1"), 25) | get(
    label(ob("Monk-1"), 25) ; noVid) ; free("ccglab6") ; return(emp) ; $cont
    label(ob("Monk-1"), 19)}, {".class" |-> str("Monk"), ".label" |-> label(ob(
    "Monk-1"), 25), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob(
    "Monk-1"), "ccglab0" |-> null, "ccglab1" |-> null, "ccglab2" |-> null,
    "ccglab3" |-> null, "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6" |->
    label(ob("Monk-1"), 31) | get(label(ob("Monk-1"), 31) ; noVid) ; free(
    "ccglab6") ; return(emp) ; $cont label(ob("Monk-1"), 25)}, {".class" |->
    str("Monk"), ".label" |-> label(ob("Monk-1"), 31), ".method" |-> str(
    "run"), "_" |-> null, "caller" |-> ob("Monk-1"), "ccglab0" |-> null,
    "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4" |->
    null, "ccglab5" |-> null, "ccglab6" |-> label(ob("Monk-1"), 37) | get(
    label(ob("Monk-1"), 37) ; noVid) ; free("ccglab6") ; return(emp) ; $cont
    label(ob("Monk-1"), 31)}, {".class" |-> str("Monk"), ".label" |-> label(ob(
    "Monk-1"), 37), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob(
    "Monk-1"), "ccglab0" |-> null, "ccglab1" |-> null, "ccglab2" |-> null,
    "ccglab3" |-> null, "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6" |->
    label(ob("Monk-1"), 43) | get(label(ob("Monk-1"), 43) ; noVid) ; free(
    "ccglab6") ; return(emp) ; $cont label(ob("Monk-1"), 37)}, {".class" |->
    str("Monk"), ".label" |-> label(ob("Monk-1"), 43), ".method" |-> str(
    "run"), "_" |-> null, "caller" |-> ob("Monk-1"), "ccglab0" |-> null,
    "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4" |->
    null, "ccglab5" |-> null, "ccglab6" |-> label(ob("Monk-1"), 49) | get(
    label(ob("Monk-1"), 49) ; noVid) ; free("ccglab6") ; return(emp) ; $cont
    label(ob("Monk-1"), 43)}, {".class" |-> str("Monk"), ".label" |-> label(ob(
    "Monk-1"), 49), ".method" |-> str("run"), "_" |-> null, "caller" |-> ob(
    "Monk-1"), "ccglab0" |-> null, "ccglab1" |-> null, "ccglab2" |-> null,
    "ccglab3" |-> null, "ccglab4" |-> null, "ccglab5" |-> null, "ccglab6" |->
    label(ob("Monk-1"), 55) | get(label(ob("Monk-1"), 55) ; noVid) ; free(
    "ccglab6") ; return(emp) ; $cont label(ob("Monk-1"), 49)}, {".class" |->
    str("Monk"), ".label" |-> label(ob("Monk-1"), 55), ".method" |-> str(
    "run"), "_" |-> null, "caller" |-> ob("Monk-1"), "ccglab0" |-> null,
    "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4" |->
    null, "ccglab5" |-> null, "ccglab6" |-> label(ob("Monk-1"), 61) | get(
    label(ob("Monk-1"), 61) ; noVid) ; free("ccglab6") ; return(emp) ; $cont
    label(ob("Monk-1"), 55)},
  Lcnt: 63 >
 
< ob("ShepherdTask-0") : "ShepherdTask" |
  Att: "busyCounter" |-> ob("Counter-3"), "busythreads" |-> int(1), "maxt" |->
    int(2), "maxthreads" |-> int(1), "mrate" |-> int(5), "taskCounter" |-> ob(
    "Counter-1"), "taskId" |-> int(1), "taskQueue" |-> ob("TaskQueue-0"),
    "tasks" |-> int(0), "this" |-> ob("ShepherdTask-0"), "threadCounter" |->
    ob("Counter-2"), "threadpool" |-> ob("Abbey-0"), "threads" |-> int(2),
  Pr: idle,
  PrQ: {".class" |-> str("ShepherdTask"), ".label" |-> label(ob("Monk-0"), 5),
    ".method" |-> str("execute"), "_" |-> null, "caller" |-> ob("Monk-0"),
    "kill" |-> null, "l1" |-> label(ob("ShepherdTask-0"), 7), "l2" |-> label(
    ob("ShepherdTask-0"), 8) | $bawait "&&"(?("l1") :: ?("l2")) ; free("l2") ;
    free("l1") ; assign("kill" ; bool(true)) ; return("kill")}, {".class" |->
    str("ShepherdTask"), ".label" |-> label(ob("ShepherdTask-0"), 8), ".method"
    |-> str("killThreads"), "_" |-> null, "caller" |-> ob("ShepherdTask-0"),
    "ccglab0" |-> null, "ccglab1" |-> null, "idlethreads" |-> int(1), "task"
    |-> null | $bawait ">"("idlethreads" :: "/"("threads" :: int(2))) ; new(
    "task" ; "PoisonTask" ; int(0)) ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; get("ccglab0" ; noVid) ; free("ccglab0") ; call(
    "ccglab1" ; "this" ; "killThreads" ; emp) ; get("ccglab1" ; noVid) ; free(
    "ccglab1") ; return(emp)}, {".class" |-> str("ShepherdTask"), ".label" |->
    label(ob("ShepherdTask-0"), 7), ".method" |-> str("createThreads"), "_" |->
    null, "amountToCreate" |-> null, "caller" |-> ob("ShepherdTask-0"),
    "ccglab0" |-> null, "idlethreads" |-> int(1), "l" |-> null, "task" |-> null
    | $bawait "&&"("<"("threads" :: "maxt") :: "<"("-"("idlethreads" ::
    "tasks") :: "/"("threads" :: "mrate"))) ; assign("amountToCreate" ; "+"(
    "-"("tasks" :: "idlethreads") :: "/"("threads" :: "mrate"))) ; if ">"(
    "amountToCreate" :: "-"("maxt" :: "threads")) th assign("amountToCreate" ;
    "-"("maxt" :: "threads")) el skip fi ; if ">"("amountToCreate" :: int(0))
    th call("l" ; "threadpool" ; "createThreads" ; "amountToCreate") ; await ?(
    "l") ; free("l") el skip fi ; call("ccglab0" ; "this" ; "createThreads" ;
    emp) ; get("ccglab0" ; noVid) ; free("ccglab0") ; return(emp)},
  Lcnt: 9 >
 
< ob("TaskQueue-0") : "TaskQueue" |
  Att: "taskCounter" |-> ob("Counter-1"), "tasks" |-> list(emp), "this" |-> ob(
    "TaskQueue-0"),
  Pr: idle,
  PrQ: {".class" |-> str("TaskQueue"), ".label" |-> label(ob("Monk-1"), 62),
    ".method" |-> str("dequeueTask"), "_" |-> null, "caller" |-> ob("Monk-1"),
    "ccglab0" |-> null, "task" |-> null | $bawait ">"("#"("tasks") :: int(0)) ;
    assign("task" ; "head"("tasks")) ; assign("tasks" ; "tail"("tasks")) ;
    call("ccglab0" ; "taskCounter" ; "dec" ; emp) ; get("ccglab0" ; noVid) ;
    free("ccglab0") ; return("task")},
  Lcnt: 24 >
 
< ob("log") : "" |
  Att: noSubst,
  Pr: idle,
  PrQ: noProc,
  Lcnt: 1916 >
 
< "Abbey" : Class | Inh: noInh, Param: "size", "maxNofThreads", Att:
    "busyCounter" |-> null, "maxNofThreads" |-> null, "size" |-> null,
    "taskCounter" |-> null, "taskQueue" |-> null, "threadCounter" |-> null,
    "threads" |-> null, Mtds:
  < "createThreads" : Method | Param: "amount", Att: "_" |-> null, "amount" |->
    null, "ccglab0" |-> null, "i" |-> null, "thread" |-> null, Code: assign("i"
    ; int(0)) ; while "<"("i" :: "amount") do new("thread" ; "Monk" ;
    "taskQueue" :: "busyCounter" :: "threadCounter") ; assign("threads" ; "|-"(
    "threads" :: "thread")) ; call("ccglab0" ; "threadCounter" ; "inc" ; emp) ;
    get("ccglab0" ; noVid) ; free("ccglab0") ; assign("i" ; "+"("i" :: int(1)))
    od ; return(emp) >, < "dispatchTask" : Method | Param: "task", Att: "_" |->
    null, "ccglab0" |-> null, "task" |-> null, Code: call("ccglab0" ;
    "taskQueue" ; "enqueueTask" ; "task") ; get("ccglab0" ; noVid) ; free(
    "ccglab0") ; return(emp) >, < "init" : Method | Param: noVid, Att: "_" |->
    null, "ccglab0" |-> null, "ccglab1" |-> null, "mrate" |-> null, "shepherd"
    |-> null, Code: new("taskCounter" ; "Counter" ; emp) ; new("threadCounter"
    ; "Counter" ; emp) ; new("busyCounter" ; "Counter" ; emp) ; new("taskQueue"
    ; "TaskQueue" ; "taskCounter") ; assign("threads" ; list(emp)) ; assign(
    "mrate" ; int(5)) ; new("shepherd" ; "ShepherdTask" ; int(1) ::
    "taskCounter" :: "threadCounter" :: "busyCounter" :: "maxNofThreads" ::
    "mrate" :: "taskQueue" :: "this") ; call("ccglab0" ; "this" ;
    "createThreads" ; "size") ; get("ccglab0" ; noVid) ; free("ccglab0") ;
    call("ccglab1" ; "this" ; "dispatchTask" ; "shepherd") ; get("ccglab1" ;
    noVid) ; free("ccglab1") ; return(emp) >, < "run" : Method | Param: noVid,
    Att: "_" |-> null, Code: skip ; return(emp) >,
  Ocnt: 1 >
 
< "Counter" : Class | Inh: noInh, Param: noVid, Att: "observer" |-> null,
    "observertoken" |-> null, "value" |-> null, Mtds:
  < "dec" : Method | Param: noVid, Att: "_" |-> null, "ccglab0" |-> null, Code:
    assign("value" ; "-"("value" :: int(1))) ; call("ccglab0" ; "this" ;
    "informObserver" ; emp) ; get("ccglab0" ; noVid) ; free("ccglab0") ;
    return(emp) >, < "inc" : Method | Param: noVid, Att: "_" |-> null,
    "ccglab0" |-> null, Code: assign("value" ; "+"("value" :: int(1))) ; call(
    "ccglab0" ; "this" ; "informObserver" ; emp) ; get("ccglab0" ; noVid) ;
    free("ccglab0") ; return(emp) >, < "informObserver" : Method | Param:
    noVid, Att: "_" |-> null, "ccglab0" |-> null, "l" |-> null, Code: if "/="(
    "observer" :: null) th call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; get("ccglab0" ; noVid) ; free("ccglab0") el
    skip fi ; return(emp) >, < "init" : Method | Param: noVid, Att: "_" |->
    null, Code: assign("value" ; int(0)) ; assign("observer" ; null) ; assign(
    "observertoken" ; str("")) ; return(emp) >, < "registerObserver" : Method |
    Param: "token", Att: "_" |-> null, "token" |-> null, Code: assign(
    "observer" ; "caller") ; assign("observertoken" ; "token") ; return(emp) >,
    < "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ; return(
    emp) >, < "value" : Method | Param: noVid, Att: "_" |-> null, "val" |->
    null, Code: assign("val" ; "value") ; return("val") >,
  Ocnt: 4 >
 
< "CounterTask" : Class | Inh: noInh, Param: "taskId", "myCounter", Att:
    "myCounter" |-> null, "taskId" |-> null, Mtds:
  < "execute" : Method | Param: noVid, Att: "_" |-> null, "ccglab0" |-> null,
    "kill" |-> null, Code: call("ccglab0" ; "myCounter" ; "inc" ; emp) ; get(
    "ccglab0" ; noVid) ; free("ccglab0") ; assign("kill" ; bool(false)) ;
    return("kill") >, < "getId" : Method | Param: noVid, Att: "_" |-> null,
    "id" |-> null, Code: assign("id" ; "taskId") ; return("id") >, < "init" :
    Method | Param: noVid, Att: "_" |-> null, Code: skip ; return(emp) >, <
    "run" : Method | Param: noVid, Att: "_" |-> null, Code: skip ; return(emp)
    >,
  Ocnt: 10 >
 
< "Main" : Class | Inh: noInh, Param: "nthreads_init", "maxthreads_init", Att:
    "executionCounter" |-> null, "maxthreads_init" |-> null, "nthreads_init"
    |-> null, "threadpool" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, Code: new("threadpool" ;
    "Abbey" ; "nthreads_init" :: "maxthreads_init") ; new("executionCounter" ;
    "Counter" ; emp) ; return(emp) >, < "run" : Method | Param: noVid, Att: "_"
    |-> null, "ccglab0" |-> null, "i" |-> null, "task" |-> null, Code: assign(
    "i" ; int(0)) ; while "<"("i" :: int(10)) do new("task" ; "CounterTask" ;
    "i" :: "executionCounter") ; call("ccglab0" ; "threadpool" ; "dispatchTask"
    ; "task") ; get("ccglab0" ; noVid) ; free("ccglab0") ; assign("i" ; "+"("i"
    :: int(1))) od ; return(emp) >,
  Ocnt: 1 >
 
< "Monk" : Class | Inh: noInh, Param: "queue", "busyCounter", "threadCounter",
    Att: "busyCounter" |-> null, "index" |-> null, "kill" |-> null, "queue" |->
    null, "task" |-> null, "taskHistory" |-> null, "taskId" |-> null,
    "threadCounter" |-> null, Mtds:
  < "init" : Method | Param: noVid, Att: "_" |-> null, Code: assign(
    "taskHistory" ; list(emp)) ; assign("kill" ; bool(false)) ; return(emp) >,
    < "run" : Method | Param: noVid, Att: "_" |-> null, "ccglab0" |-> null,
    "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4" |->
    null, "ccglab5" |-> null, "ccglab6" |-> null, Code: call("ccglab0" ;
    "queue" ; "dequeueTask" ; emp) ; get("ccglab0" ; "task") ; free("ccglab0")
    ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; get("ccglab1" ; noVid) ;
    free("ccglab1") ; call("ccglab2" ; "task" ; "getId" ; emp) ; get("ccglab2"
    ; "taskId") ; free("ccglab2") ; assign("taskHistory" ; "|-"("taskHistory"
    :: "taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; get("ccglab3"
    ; "kill") ; free("ccglab3") ; call("ccglab4" ; "busyCounter" ; "dec" ; emp)
    ; get("ccglab4" ; noVid) ; free("ccglab4") ; if "kill" th call("ccglab5" ;
    "threadCounter" ; "dec" ; emp) ; get("ccglab5" ; noVid) ; free("ccglab5")
    el release ; call("ccglab6" ; "this" ; "run" ; emp) ; get("ccglab6" ;
    noVid) ; free("ccglab6") fi ; return(emp) >,
  Ocnt: 2 >
 
< "PoisonTask" : Class | Inh: noInh, Param: "taskId", Att: "taskId" |-> null,
    Mtds:
  < "execute" : Method | Param: noVid, Att: "_" |-> null, "kill" |-> null,
    Code: assign("kill" ; bool(true)) ; return("kill") >, < "getId" : Method |
    Param: noVid, Att: "_" |-> null, "id" |-> null, Code: assign("id" ;
    "taskId") ; return("id") >, < "init" : Method | Param: noVid, Att: "_" |->
    null, Code: skip ; return(emp) >, < "run" : Method | Param: noVid, Att: "_"
    |-> null, Code: skip ; return(emp) >,
  Ocnt: 0 >
 
< "ShepherdTask" : Class | Inh: noInh, Param: "taskId", "taskCounter",
    "threadCounter", "busyCounter", "maxthreads", "mrate", "taskQueue",
    "threadpool", Att: "busyCounter" |-> null, "busythreads" |-> null, "maxt"
    |-> null, "maxthreads" |-> null, "mrate" |-> null, "taskCounter" |-> null,
    "taskId" |-> null, "taskQueue" |-> null, "tasks" |-> null, "threadCounter"
    |-> null, "threadpool" |-> null, "threads" |-> null, Mtds:
  < "createThreads" : Method | Param: noVid, Att: "_" |-> null,
    "amountToCreate" |-> null, "ccglab0" |-> null, "idlethreads" |-> null, "l"
    |-> null, "task" |-> null, Code: assign("idlethreads" ; "-"("threads" ::
    "busythreads")) ; await "&&"("<"("threads" :: "maxt") :: "<"("-"(
    "idlethreads" :: "tasks") :: "/"("threads" :: "mrate"))) ; assign(
    "amountToCreate" ; "+"("-"("tasks" :: "idlethreads") :: "/"("threads" ::
    "mrate"))) ; if ">"("amountToCreate" :: "-"("maxt" :: "threads")) th
    assign("amountToCreate" ; "-"("maxt" :: "threads")) el skip fi ; if ">"(
    "amountToCreate" :: int(0)) th call("l" ; "threadpool" ; "createThreads" ;
    "amountToCreate") ; await ?("l") ; free("l") el skip fi ; call("ccglab0" ;
    "this" ; "createThreads" ; emp) ; get("ccglab0" ; noVid) ; free("ccglab0")
    ; return(emp) >, < "execute" : Method | Param: noVid, Att: "_" |-> null,
    "kill" |-> null, "l1" |-> null, "l2" |-> null, Code: call("l1" ; "this" ;
    "createThreads" ; emp) ; call("l2" ; "this" ; "killThreads" ; emp) ; await
    "&&"(?("l1") :: ?("l2")) ; free("l2") ; free("l1") ; assign("kill" ; bool(
    true)) ; return("kill") >, < "getId" : Method | Param: noVid, Att: "_" |->
    null, "id" |-> null, Code: assign("id" ; "taskId") ; return("id") >, <
    "init" : Method | Param: noVid, Att: "_" |-> null, "ccglab0" |-> null,
    "ccglab1" |-> null, "ccglab2" |-> null, "ccglab3" |-> null, "ccglab4" |->
    null, Code: assign("maxt" ; "+"("maxthreads" :: int(1))) ; call("ccglab0" ;
    "taskCounter" ; "registerObserver" ; str("tasks")) ; get("ccglab0" ; noVid)
    ; free("ccglab0") ; call("ccglab1" ; "threadCounter" ; "registerObserver" ;
    str("threads")) ; get("ccglab1" ; noVid) ; free("ccglab1") ; call("ccglab2"
    ; "busyCounter" ; "registerObserver" ; str("busythreads")) ; get("ccglab2"
    ; noVid) ; free("ccglab2") ; call("ccglab3" ; "threadCounter" ; "value" ;
    emp) ; get("ccglab3" ; "threads") ; free("ccglab3") ; call("ccglab4" ;
    "busyCounter" ; "value" ; emp) ; get("ccglab4" ; "busythreads") ; free(
    "ccglab4") ; return(emp) >, < "killThreads" : Method | Param: noVid, Att:
    "_" |-> null, "ccglab0" |-> null, "ccglab1" |-> null, "idlethreads" |->
    null, "task" |-> null, Code: assign("idlethreads" ; "-"("threads" ::
    "busythreads")) ; await ">"("idlethreads" :: "/"("threads" :: int(2))) ;
    new("task" ; "PoisonTask" ; int(0)) ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; get("ccglab0" ; noVid) ; free("ccglab0") ; call(
    "ccglab1" ; "this" ; "killThreads" ; emp) ; get("ccglab1" ; noVid) ; free(
    "ccglab1") ; return(emp) >, < "newCounterValue" : Method | Param: "token",
    "val", Att: "_" |-> null, "token" |-> null, "val" |-> null, Code: if "="(
    "token" :: str("tasks")) th assign("tasks" ; "val") el skip fi ; if "="(
    "token" :: str("threads")) th assign("threads" ; "val") el skip fi ; if
    "="("token" :: str("busythreads")) th assign("busythreads" ; "val") el skip
    fi ; return(emp) >, < "run" : Method | Param: noVid, Att: "_" |-> null,
    Code: skip ; return(emp) >,
  Ocnt: 1 >
 
< "TaskQueue" : Class | Inh: noInh, Param: "taskCounter", Att: "taskCounter"
    |-> null, "tasks" |-> null, Mtds:
  < "dequeueTask" : Method | Param: noVid, Att: "_" |-> null, "ccglab0" |->
    null, "task" |-> null, Code: await ">"("#"("tasks") :: int(0)) ; assign(
    "task" ; "head"("tasks")) ; assign("tasks" ; "tail"("tasks")) ; call(
    "ccglab0" ; "taskCounter" ; "dec" ; emp) ; get("ccglab0" ; noVid) ; free(
    "ccglab0") ; return("task") >, < "enqueueTask" : Method | Param: "task",
    Att: "_" |-> null, "ccglab0" |-> null, "task" |-> null, Code: assign(
    "tasks" ; "|-"("tasks" :: "task")) ; call("ccglab0" ; "taskCounter" ; "inc"
    ; emp) ; get("ccglab0" ; noVid) ; free("ccglab0") ; return(emp) >, < "init"
    : Method | Param: noVid, Att: "_" |-> null, Code: assign("tasks" ; list(
    emp)) ; return(emp) >, < "run" : Method | Param: noVid, Att: "_" |-> null,
    Code: skip ; return(emp) >,
  Ocnt: 1 >
 
<log From: 0 To: 1916 Type: "lastrun"
    Data:{skip ; new("var" ; "Main" ; int(2) :: int(1)) ; assign("Main-0.this"
    ; ob("Main-0")) ; assign("Main-0.nthreads_init", "Main-0.maxthreads_init" ;
    int(2) :: int(1)) ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "nolabel.var" ; ob("Main-0")) ; assign("Main-0-0.caller",
    "Main-0-0..class", "Main-0-0..label", "Main-0-0..method" ; ob("Main-0") ::
    str("Main") :: label(ob("Main-0"), 0) :: str("init")) ; new("threadpool" ;
    "Abbey" ; "nthreads_init" :: "maxthreads_init") ; assign("Abbey-0.this" ;
    ob("Abbey-0")) ; assign("Abbey-0.size", "Abbey-0.maxNofThreads" ;
    "Main-0.nthreads_init" :: "Main-0.maxthreads_init") ; call(".anon" ; "this"
    ; "init" ; emp) ; assign("Main-0.threadpool" ; ob("Abbey-0")) ; new(
    "executionCounter" ; "Counter" ; emp) ; assign("Counter-0.this" ; ob(
    "Counter-0")) ; assign("Main-0.executionCounter" ; ob("Counter-0")) ; call(
    ".anon" ; "this" ; "init" ; emp) ; return(emp) ; assign("Abbey-0-0.caller",
    "Abbey-0-0..class", "Abbey-0-0..label", "Abbey-0-0..method" ; ob("Abbey-0")
    :: str("Abbey") :: label(ob("Abbey-0"), 0) :: str("init")) ; new(
    "taskCounter" ; "Counter" ; emp) ; assign("Abbey-0.taskCounter" ; ob(
    "Counter-1")) ; new("threadCounter" ; "Counter" ; emp) ; assign(
    "Abbey-0.threadCounter" ; ob("Counter-2")) ; new("busyCounter" ; "Counter"
    ; emp) ; assign("Abbey-0.busyCounter" ; ob("Counter-3")) ; new("taskQueue"
    ; "TaskQueue" ; "taskCounter") ; assign("Abbey-0.taskQueue" ; ob(
    "TaskQueue-0")) ; assign("Abbey-0.threads" ; list(emp)) ; assign(
    "Abbey-0-0.mrate" ; int(5)) ; new("shepherd" ; "ShepherdTask" ; int(1) ::
    "taskCounter" :: "threadCounter" :: "busyCounter" :: "maxNofThreads" ::
    "mrate" :: "taskQueue" :: "this") ; assign("Abbey-0-0.shepherd" ; ob(
    "ShepherdTask-0")) ; call("ccglab0" ; "this" ; "createThreads" ; "size") ;
    assign("Counter-1.this" ; ob("Counter-1")) ; assign("Counter-2.this" ; ob(
    "Counter-2")) ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "Counter-3.this" ; ob("Counter-3")) ; call(".anon" ; "this" ; "init" ; emp)
    ; assign("ShepherdTask-0.this" ; ob("ShepherdTask-0")) ; call(".anon" ;
    "this" ; "init" ; emp) ; assign("ShepherdTask-0.taskId",
    "ShepherdTask-0.taskCounter", "ShepherdTask-0.threadCounter",
    "ShepherdTask-0.busyCounter", "ShepherdTask-0.maxthreads",
    "ShepherdTask-0.mrate", "ShepherdTask-0.taskQueue",
    "ShepherdTask-0.threadpool" ; int(1) :: "Abbey-0.taskCounter" ::
    "Abbey-0.threadCounter" :: "Abbey-0.busyCounter" :: "Abbey-0.maxNofThreads"
    :: "Abbey-0-0.mrate" :: "Abbey-0.taskQueue" :: "Abbey-0.this") ; call(
    ".anon" ; "this" ; "init" ; emp) ; assign("TaskQueue-0.this" ; ob(
    "TaskQueue-0")) ; assign("TaskQueue-0.taskCounter" ; "Abbey-0.taskCounter")
    ; call(".anon" ; "this" ; "init" ; emp) ; assign("Abbey-0-6.caller",
    "Abbey-0-6..class", "Abbey-0-6..label", "Abbey-0-6..method" ; ob("Abbey-0")
    :: str("Abbey") :: label(ob("Abbey-0"), 6) :: str("createThreads")) ;
    assign("Abbey-0-6.amount" ; "Abbey-0.size") ; assign("Abbey-0-6.i" ; int(
    0)) ; if "<"("i" :: "amount") th skip el skip fi ; new("thread" ; "Monk" ;
    "taskQueue" :: "busyCounter" :: "threadCounter") ; assign(
    "Abbey-0-6.thread" ; ob("Monk-0")) ; assign("Abbey-0.threads" ; "|-"(
    "Abbey-0.threads" :: "Abbey-0-6.thread")) ; call("ccglab0" ;
    "threadCounter" ; "inc" ; emp) ; assign("Monk-0.this" ; ob("Monk-0")) ;
    assign("Monk-0.queue", "Monk-0.busyCounter", "Monk-0.threadCounter" ;
    "Abbey-0.taskQueue" :: "Abbey-0.busyCounter" :: "Abbey-0.threadCounter") ;
    call(".anon" ; "this" ; "init" ; emp) ; assign("Counter-0-0.caller",
    "Counter-0-0..class", "Counter-0-0..label", "Counter-0-0..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 0) :: str("init"))
    ; assign("Counter-0.value" ; int(0)) ; assign("Counter-0.observer" ; null)
    ; assign("Counter-0.observertoken" ; str("")) ; return(emp) ; call(".anon"
    ; "this" ; "run" ; emp) ; assign("Counter-0-1.caller",
    "Counter-0-1..class", "Counter-0-1..label", "Counter-0-1..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 1) :: str("run"))
    ; return(emp) ; assign("Counter-1-0.caller", "Counter-1-0..class",
    "Counter-1-0..label", "Counter-1-0..method" ; ob("Counter-1") :: str(
    "Counter") :: label(ob("Counter-1"), 0) :: str("init")) ; assign(
    "Counter-1.value" ; int(0)) ; assign("Counter-1.observer" ; null) ; assign(
    "Counter-1.observertoken" ; str("")) ; return(emp) ; call(".anon" ; "this"
    ; "run" ; emp) ; assign("Counter-1-1.caller", "Counter-1-1..class",
    "Counter-1-1..label", "Counter-1-1..method" ; ob("Counter-1") :: str(
    "Counter") :: label(ob("Counter-1"), 1) :: str("run")) ; return(emp) ;
    assign("Counter-2-0.caller", "Counter-2-0..class", "Counter-2-0..label",
    "Counter-2-0..method" ; ob("Counter-2") :: str("Counter") :: label(ob(
    "Counter-2"), 0) :: str("init")) ; assign("Counter-2.value" ; int(0)) ;
    assign("Counter-2.observer" ; null) ; assign("Counter-2.observertoken" ;
    str("")) ; return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "Counter-2-1.caller", "Counter-2-1..class", "Counter-2-1..label",
    "Counter-2-1..method" ; ob("Counter-2") :: str("Counter") :: label(ob(
    "Counter-2"), 1) :: str("run")) ; return(emp) ; assign("Abbey-0-8.caller",
    "Abbey-0-8..class", "Abbey-0-8..label", "Abbey-0-8..method" ; ob("Abbey-0")
    :: str("Counter") :: label(ob("Abbey-0"), 8) :: str("inc")) ; assign(
    "Counter-2.value" ; "+"("Counter-2.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-2-2.caller",
    "Counter-2-2..class", "Counter-2-2..label", "Counter-2-2..method" ; ob(
    "Counter-2") :: str("Counter") :: label(ob("Counter-2"), 2) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Abbey-0-6.i" ; "+"("Abbey-0-6.i" ::
    int(1))) ; if "<"("i" :: "amount") th skip el skip fi ; new("thread" ;
    "Monk" ; "taskQueue" :: "busyCounter" :: "threadCounter") ; assign(
    "Abbey-0-6.thread" ; ob("Monk-1")) ; assign("Abbey-0.threads" ; "|-"(
    "Abbey-0.threads" :: "Abbey-0-6.thread")) ; call("ccglab0" ;
    "threadCounter" ; "inc" ; emp) ; assign("Abbey-0-10.caller",
    "Abbey-0-10..class", "Abbey-0-10..label", "Abbey-0-10..method" ; ob(
    "Abbey-0") :: str("Counter") :: label(ob("Abbey-0"), 10) :: str("inc")) ;
    assign("Counter-2.value" ; "+"("Counter-2.value" :: int(1))) ; call(
    "ccglab0" ; "this" ; "informObserver" ; emp) ; assign("Monk-1.this" ; ob(
    "Monk-1")) ; assign("Monk-1.queue", "Monk-1.busyCounter",
    "Monk-1.threadCounter" ; "Abbey-0.taskQueue" :: "Abbey-0.busyCounter" ::
    "Abbey-0.threadCounter") ; call(".anon" ; "this" ; "init" ; emp) ; assign(
    "Counter-2-3.caller", "Counter-2-3..class", "Counter-2-3..label",
    "Counter-2-3..method" ; ob("Counter-2") :: str("Counter") :: label(ob(
    "Counter-2"), 3) :: str("informObserver")) ; if "/="("observer" :: null) th
    skip el skip fi ; return(emp) ; return(emp) ; assign("Abbey-0-6.i" ; "+"(
    "Abbey-0-6.i" :: int(1))) ; if "<"("i" :: "amount") th skip el skip fi ;
    return(emp) ; call("ccglab1" ; "this" ; "dispatchTask" ; "shepherd") ;
    assign("Abbey-0-11.caller", "Abbey-0-11..class", "Abbey-0-11..label",
    "Abbey-0-11..method" ; ob("Abbey-0") :: str("Abbey") :: label(ob(
    "Abbey-0"), 11) :: str("dispatchTask")) ; assign("Abbey-0-11.task" ;
    "Abbey-0-0.shepherd") ; call("ccglab0" ; "taskQueue" ; "enqueueTask" ;
    "task") ; assign("Counter-3-0.caller", "Counter-3-0..class",
    "Counter-3-0..label", "Counter-3-0..method" ; ob("Counter-3") :: str(
    "Counter") :: label(ob("Counter-3"), 0) :: str("init")) ; assign(
    "Counter-3.value" ; int(0)) ; assign("Counter-3.observer" ; null) ; assign(
    "Counter-3.observertoken" ; str("")) ; return(emp) ; call(".anon" ; "this"
    ; "run" ; emp) ; assign("Counter-3-1.caller", "Counter-3-1..class",
    "Counter-3-1..label", "Counter-3-1..method" ; ob("Counter-3") :: str(
    "Counter") :: label(ob("Counter-3"), 1) :: str("run")) ; return(emp) ;
    call(".anon" ; "this" ; "run" ; emp) ; assign("Main-0-3.caller",
    "Main-0-3..class", "Main-0-3..label", "Main-0-3..method" ; ob("Main-0") ::
    str("Main") :: label(ob("Main-0"), 3) :: str("run")) ; assign("Main-0-3.i"
    ; int(0)) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask-0.this" ;
    ob("CounterTask-0")) ; assign("CounterTask-0.taskId",
    "CounterTask-0.myCounter" ; "Main-0-3.i" :: "Main-0.executionCounter") ;
    call(".anon" ; "this" ; "init" ; emp) ; assign("Main-0-3.task" ; ob(
    "CounterTask-0")) ; call("ccglab0" ; "threadpool" ; "dispatchTask" ;
    "task") ; assign("CounterTask-0-0.caller", "CounterTask-0-0..class",
    "CounterTask-0-0..label", "CounterTask-0-0..method" ; ob("CounterTask-0")
    :: str("CounterTask") :: label(ob("CounterTask-0"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-0-1.caller", "CounterTask-0-1..class",
    "CounterTask-0-1..label", "CounterTask-0-1..method" ; ob("CounterTask-0")
    :: str("CounterTask") :: label(ob("CounterTask-0"), 1) :: str("run")) ;
    return(emp) ; assign("Monk-0-0.caller", "Monk-0-0..class",
    "Monk-0-0..label", "Monk-0-0..method" ; ob("Monk-0") :: str("Monk") ::
    label(ob("Monk-0"), 0) :: str("init")) ; assign("Monk-0.taskHistory" ;
    list(emp)) ; assign("Monk-0.kill" ; bool(false)) ; return(emp) ; call(
    ".anon" ; "this" ; "run" ; emp) ; assign("Monk-0-1.caller",
    "Monk-0-1..class", "Monk-0-1..label", "Monk-0-1..method" ; ob("Monk-0") ::
    str("Monk") :: label(ob("Monk-0"), 1) :: str("run")) ; call("ccglab0" ;
    "queue" ; "dequeueTask" ; emp) ; assign("Monk-1-0.caller",
    "Monk-1-0..class", "Monk-1-0..label", "Monk-1-0..method" ; ob("Monk-1") ::
    str("Monk") :: label(ob("Monk-1"), 0) :: str("init")) ; assign(
    "Monk-1.taskHistory" ; list(emp)) ; assign("Monk-1.kill" ; bool(false)) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "Monk-1-1.caller", "Monk-1-1..class", "Monk-1-1..label", "Monk-1-1..method"
    ; ob("Monk-1") :: str("Monk") :: label(ob("Monk-1"), 1) :: str("run")) ;
    call("ccglab0" ; "queue" ; "dequeueTask" ; emp) ; assign(
    "ShepherdTask-0-0.caller", "ShepherdTask-0-0..class",
    "ShepherdTask-0-0..label", "ShepherdTask-0-0..method" ; ob(
    "ShepherdTask-0") :: str("ShepherdTask") :: label(ob("ShepherdTask-0"), 0)
    :: str("init")) ; assign("ShepherdTask-0.maxt" ; "+"(
    "ShepherdTask-0.maxthreads" :: int(1))) ; call("ccglab0" ; "taskCounter" ;
    "registerObserver" ; str("tasks")) ; assign("ShepherdTask-0-1.caller",
    "ShepherdTask-0-1..class", "ShepherdTask-0-1..label",
    "ShepherdTask-0-1..method" ; ob("ShepherdTask-0") :: str("Counter") ::
    label(ob("ShepherdTask-0"), 1) :: str("registerObserver")) ; assign(
    "ShepherdTask-0-1.token" ; str("tasks")) ; assign("Counter-1.observer" ;
    "ShepherdTask-0-1.caller") ; assign("Counter-1.observertoken" ;
    "ShepherdTask-0-1.token") ; return(emp) ; call("ccglab1" ; "threadCounter"
    ; "registerObserver" ; str("threads")) ; assign("ShepherdTask-0-2.caller",
    "ShepherdTask-0-2..class", "ShepherdTask-0-2..label",
    "ShepherdTask-0-2..method" ; ob("ShepherdTask-0") :: str("Counter") ::
    label(ob("ShepherdTask-0"), 2) :: str("registerObserver")) ; assign(
    "ShepherdTask-0-2.token" ; str("threads")) ; assign("Counter-2.observer" ;
    "ShepherdTask-0-2.caller") ; assign("Counter-2.observertoken" ;
    "ShepherdTask-0-2.token") ; return(emp) ; call("ccglab2" ; "busyCounter" ;
    "registerObserver" ; str("busythreads")) ; assign(
    "ShepherdTask-0-3.caller", "ShepherdTask-0-3..class",
    "ShepherdTask-0-3..label", "ShepherdTask-0-3..method" ; ob(
    "ShepherdTask-0") :: str("Counter") :: label(ob("ShepherdTask-0"), 3) ::
    str("registerObserver")) ; assign("ShepherdTask-0-3.token" ; str(
    "busythreads")) ; assign("Counter-3.observer" ; "ShepherdTask-0-3.caller")
    ; assign("Counter-3.observertoken" ; "ShepherdTask-0-3.token") ; return(
    emp) ; call("ccglab3" ; "threadCounter" ; "value" ; emp) ; assign(
    "ShepherdTask-0-4.caller", "ShepherdTask-0-4..class",
    "ShepherdTask-0-4..label", "ShepherdTask-0-4..method" ; ob(
    "ShepherdTask-0") :: str("Counter") :: label(ob("ShepherdTask-0"), 4) ::
    str("value")) ; assign("ShepherdTask-0-4.val" ; "Counter-2.value") ;
    return("val") ; assign("ShepherdTask-0.threads" ; "ShepherdTask-0-4.val") ;
    call("ccglab4" ; "busyCounter" ; "value" ; emp) ; assign(
    "ShepherdTask-0-5.caller", "ShepherdTask-0-5..class",
    "ShepherdTask-0-5..label", "ShepherdTask-0-5..method" ; ob(
    "ShepherdTask-0") :: str("Counter") :: label(ob("ShepherdTask-0"), 5) ::
    str("value")) ; assign("ShepherdTask-0-5.val" ; "Counter-3.value") ;
    return("val") ; assign("ShepherdTask-0.busythreads" ;
    "ShepherdTask-0-5.val") ; return(emp) ; call(".anon" ; "this" ; "run" ;
    emp) ; assign("ShepherdTask-0-6.caller", "ShepherdTask-0-6..class",
    "ShepherdTask-0-6..label", "ShepherdTask-0-6..method" ; ob(
    "ShepherdTask-0") :: str("ShepherdTask") :: label(ob("ShepherdTask-0"), 6)
    :: str("run")) ; return(emp) ; assign("TaskQueue-0-0.caller",
    "TaskQueue-0-0..class", "TaskQueue-0-0..label", "TaskQueue-0-0..method" ;
    ob("TaskQueue-0") :: str("TaskQueue") :: label(ob("TaskQueue-0"), 0) ::
    str("init")) ; assign("TaskQueue-0.tasks" ; list(emp)) ; return(emp) ;
    call(".anon" ; "this" ; "run" ; emp) ; assign("TaskQueue-0-1.caller",
    "TaskQueue-0-1..class", "TaskQueue-0-1..label", "TaskQueue-0-1..method" ;
    ob("TaskQueue-0") :: str("TaskQueue") :: label(ob("TaskQueue-0"), 1) ::
    str("run")) ; return(emp) ; assign("Abbey-0-12.caller",
    "Abbey-0-12..class", "Abbey-0-12..label", "Abbey-0-12..method" ; ob(
    "Abbey-0") :: str("TaskQueue") :: label(ob("Abbey-0"), 12) :: str(
    "enqueueTask")) ; assign("Abbey-0-12.task" ; "Abbey-0-11.task") ; assign(
    "TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks" :: "Abbey-0-12.task")) ;
    call("ccglab0" ; "taskCounter" ; "inc" ; emp) ; assign(
    "TaskQueue-0-2.caller", "TaskQueue-0-2..class", "TaskQueue-0-2..label",
    "TaskQueue-0-2..method" ; ob("TaskQueue-0") :: str("Counter") :: label(ob(
    "TaskQueue-0"), 2) :: str("inc")) ; assign("Counter-1.value" ; "+"(
    "Counter-1.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("Counter-1-2.caller", "Counter-1-2..class",
    "Counter-1-2..label", "Counter-1-2..method" ; ob("Counter-1") :: str(
    "Counter") :: label(ob("Counter-1"), 2) :: str("informObserver")) ; if
    "/="("observer" :: null) th skip el skip fi ; call("ccglab0" ; "observer" ;
    "newCounterValue" ; "observertoken" :: "value") ; assign(
    "Counter-1-3.caller", "Counter-1-3..class", "Counter-1-3..label",
    "Counter-1-3..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(ob(
    "Counter-1"), 3) :: str("newCounterValue")) ; assign("Counter-1-3.token",
    "Counter-1-3.val" ; "Counter-1.observertoken" :: "Counter-1.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; assign(
    "ShepherdTask-0.tasks" ; "Counter-1-3.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; if "="("token" :: str("busythreads")) th
    skip el skip fi ; return(emp) ; return(emp) ; return(emp) ; return(emp) ;
    assign("Monk-0-2.caller", "Monk-0-2..class", "Monk-0-2..label",
    "Monk-0-2..method" ; ob("Monk-0") :: str("TaskQueue") :: label(ob(
    "Monk-0"), 2) :: str("dequeueTask")) ; await ">"("#"("tasks") :: int(0)) ;
    assign("Monk-0-2.task" ; "head"("TaskQueue-0.tasks")) ; assign(
    "TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0" ;
    "taskCounter" ; "dec" ; emp) ; return(emp) ; assign("TaskQueue-0-3.caller",
    "TaskQueue-0-3..class", "TaskQueue-0-3..label", "TaskQueue-0-3..method" ;
    ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 3) :: str(
    "dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1))) ;
    call("ccglab0" ; "this" ; "informObserver" ; emp) ; return(emp) ; call(
    ".anon" ; "this" ; "run" ; emp) ; assign("Abbey-0-13.caller",
    "Abbey-0-13..class", "Abbey-0-13..label", "Abbey-0-13..method" ; ob(
    "Abbey-0") :: str("Abbey") :: label(ob("Abbey-0"), 13) :: str("run")) ;
    return(emp) ; assign("Main-0-5.caller", "Main-0-5..class",
    "Main-0-5..label", "Main-0-5..method" ; ob("Main-0") :: str("Abbey") ::
    label(ob("Main-0"), 5) :: str("dispatchTask")) ; assign("Main-0-5.task" ;
    "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ; "enqueueTask" ; "task") ;
    assign("Counter-1-4.caller", "Counter-1-4..class", "Counter-1-4..label",
    "Counter-1-4..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 4) :: str("informObserver")) ; if "/="("observer" :: null) th
    skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-5.caller",
    "Counter-1-5..class", "Counter-1-5..label", "Counter-1-5..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 5) :: str(
    "newCounterValue")) ; assign("Counter-1-5.token", "Counter-1-5.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-5.val") ; if "="("token" :: str("threads")) th skip el skip fi ;
    if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Abbey-0-14.caller",
    "Abbey-0-14..class", "Abbey-0-14..label", "Abbey-0-14..method" ; ob(
    "Abbey-0") :: str("TaskQueue") :: label(ob("Abbey-0"), 14) :: str(
    "enqueueTask")) ; assign("Monk-0.task" ; "Monk-0-2.task") ; assign(
    "Abbey-0-14.task" ; "Main-0-5.task") ; call("ccglab1" ; "busyCounter" ;
    "inc" ; emp) ; assign("Monk-0-3.caller", "Monk-0-3..class",
    "Monk-0-3..label", "Monk-0-3..method" ; ob("Monk-0") :: str("Counter") ::
    label(ob("Monk-0"), 3) :: str("inc")) ; assign("Counter-3.value" ; "+"(
    "Counter-3.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks" ::
    "Abbey-0-14.task")) ; call("ccglab0" ; "taskCounter" ; "inc" ; emp) ;
    assign("TaskQueue-0-4.caller", "TaskQueue-0-4..class",
    "TaskQueue-0-4..label", "TaskQueue-0-4..method" ; ob("TaskQueue-0") :: str(
    "Counter") :: label(ob("TaskQueue-0"), 4) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-6.caller",
    "Counter-1-6..class", "Counter-1-6..label", "Counter-1-6..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 6) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-1-7.caller", "Counter-1-7..class", "Counter-1-7..label",
    "Counter-1-7..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(ob(
    "Counter-1"), 7) :: str("newCounterValue")) ; assign("Counter-1-7.token",
    "Counter-1-7.val" ; "Counter-1.observertoken" :: "Counter-1.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; assign(
    "ShepherdTask-0.tasks" ; "Counter-1-7.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; assign("Counter-3-2.caller",
    "Counter-3-2..class", "Counter-3-2..label", "Counter-3-2..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 2) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    assign("Counter-3-3.caller", "Counter-3-3..class", "Counter-3-3..label",
    "Counter-3-3..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(ob(
    "Counter-3"), 3) :: str("newCounterValue")) ; assign("Counter-3-3.token",
    "Counter-3-3.val" ; "Counter-3.observertoken" :: "Counter-3.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; return(emp) ; return(emp)
    ; return(emp) ; assign("Monk-1-2.caller", "Monk-1-2..class",
    "Monk-1-2..label", "Monk-1-2..method" ; ob("Monk-1") :: str("TaskQueue") ::
    label(ob("Monk-1"), 2) :: str("dequeueTask")) ; await ">"("#"("tasks") ::
    int(0)) ; assign("Monk-1-2.task" ; "head"("TaskQueue-0.tasks")) ; assign(
    "TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0" ;
    "taskCounter" ; "dec" ; emp) ; return(emp) ; assign("TaskQueue-0-5.caller",
    "TaskQueue-0-5..class", "TaskQueue-0-5..label", "TaskQueue-0-5..method" ;
    ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 5) :: str(
    "dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1))) ;
    call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign("Main-0-3.i" ;
    "+"("Main-0-3.i" :: int(1))) ; assign("Counter-1-8.caller",
    "Counter-1-8..class", "Counter-1-8..label", "Counter-1-8..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 8) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    if "<"("i" :: int(10)) th skip el skip fi ; new("task" ; "CounterTask" ;
    "i" :: "executionCounter") ; assign("CounterTask-1.this" ; ob(
    "CounterTask-1")) ; assign("CounterTask-1.taskId",
    "CounterTask-1.myCounter" ; "Main-0-3.i" :: "Main-0.executionCounter") ;
    call(".anon" ; "this" ; "init" ; emp) ; assign("Main-0-3.task" ; ob(
    "CounterTask-1")) ; call("ccglab0" ; "threadpool" ; "dispatchTask" ;
    "task") ; assign("Main-0-7.caller", "Main-0-7..class", "Main-0-7..label",
    "Main-0-7..method" ; ob("Main-0") :: str("Abbey") :: label(ob("Main-0"), 7)
    :: str("dispatchTask")) ; assign("Main-0-7.task" ; "Main-0-3.task") ; call(
    "ccglab0" ; "taskQueue" ; "enqueueTask" ; "task") ; assign(
    "CounterTask-1-0.caller", "CounterTask-1-0..class",
    "CounterTask-1-0..label", "CounterTask-1-0..method" ; ob("CounterTask-1")
    :: str("CounterTask") :: label(ob("CounterTask-1"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-1-1.caller", "CounterTask-1-1..class",
    "CounterTask-1-1..label", "CounterTask-1-1..method" ; ob("CounterTask-1")
    :: str("CounterTask") :: label(ob("CounterTask-1"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-3.val") ; return(emp) ; assign(
    "Counter-1-9.caller", "Counter-1-9..class", "Counter-1-9..label",
    "Counter-1-9..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(ob(
    "Counter-1"), 9) :: str("newCounterValue")) ; assign("Counter-1-9.token",
    "Counter-1-9.val" ; "Counter-1.observertoken" :: "Counter-1.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; assign(
    "ShepherdTask-0.tasks" ; "Counter-1-9.val") ; if "="("token" :: str(
    "threads")) th skip el skip fi ; return(emp) ; return(emp) ; call("ccglab2"
    ; "task" ; "getId" ; emp) ; if "="("token" :: str("busythreads")) th skip
    el skip fi ; return(emp) ; assign("Monk-0-4.caller", "Monk-0-4..class",
    "Monk-0-4..label", "Monk-0-4..method" ; ob("Monk-0") :: str("ShepherdTask")
    :: label(ob("Monk-0"), 4) :: str("getId")) ; assign("Monk-0-4.id" ;
    "ShepherdTask-0.taskId") ; return("id") ; return(emp) ; assign(
    "Monk-0.taskId" ; "Monk-0-4.id") ; assign("Monk-0.taskHistory" ; "|-"(
    "Monk-0.taskHistory" :: "Monk-0.taskId")) ; call("ccglab3" ; "task" ;
    "execute" ; emp) ; assign("Monk-0-5.caller", "Monk-0-5..class",
    "Monk-0-5..label", "Monk-0-5..method" ; ob("Monk-0") :: str("ShepherdTask")
    :: label(ob("Monk-0"), 5) :: str("execute")) ; call("l1" ; "this" ;
    "createThreads" ; emp) ; call("l2" ; "this" ; "killThreads" ; emp) ;
    $bawait "&&"(?("l1") :: ?("l2")) ; assign("ShepherdTask-0-8.caller",
    "ShepherdTask-0-8..class", "ShepherdTask-0-8..label",
    "ShepherdTask-0-8..method" ; ob("ShepherdTask-0") :: str("ShepherdTask") ::
    label(ob("ShepherdTask-0"), 8) :: str("killThreads")) ; assign(
    "ShepherdTask-0-8.idlethreads" ; "-"("ShepherdTask-0.threads" ::
    "ShepherdTask-0.busythreads")) ; $bawait ">"("idlethreads" :: "/"("threads"
    :: int(2))) ; assign("ShepherdTask-0-7.caller", "ShepherdTask-0-7..class",
    "ShepherdTask-0-7..label", "ShepherdTask-0-7..method" ; ob(
    "ShepherdTask-0") :: str("ShepherdTask") :: label(ob("ShepherdTask-0"), 7)
    :: str("createThreads")) ; assign("ShepherdTask-0-7.idlethreads" ; "-"(
    "ShepherdTask-0.threads" :: "ShepherdTask-0.busythreads")) ; $bawait "&&"(
    "<"("threads" :: "maxt") :: "<"("-"("idlethreads" :: "tasks") :: "/"(
    "threads" :: "mrate"))) ; return(emp) ; return("task") ; assign(
    "Abbey-0-15.caller", "Abbey-0-15..class", "Abbey-0-15..label",
    "Abbey-0-15..method" ; ob("Abbey-0") :: str("TaskQueue") :: label(ob(
    "Abbey-0"), 15) :: str("enqueueTask")) ; assign("Monk-1.task" ;
    "Monk-1-2.task") ; assign("Abbey-0-15.task" ; "Main-0-7.task") ; call(
    "ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign("Monk-1-3.caller",
    "Monk-1-3..class", "Monk-1-3..label", "Monk-1-3..method" ; ob("Monk-1") ::
    str("Counter") :: label(ob("Monk-1"), 3) :: str("inc")) ; assign(
    "Counter-3.value" ; "+"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("TaskQueue-0.tasks" ; "|-"(
    "TaskQueue-0.tasks" :: "Abbey-0-15.task")) ; call("ccglab0" ; "taskCounter"
    ; "inc" ; emp) ; assign("TaskQueue-0-6.caller", "TaskQueue-0-6..class",
    "TaskQueue-0-6..label", "TaskQueue-0-6..method" ; ob("TaskQueue-0") :: str(
    "Counter") :: label(ob("TaskQueue-0"), 6) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-10.caller",
    "Counter-1-10..class", "Counter-1-10..label", "Counter-1-10..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 10) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-1-11.caller", "Counter-1-11..class", "Counter-1-11..label",
    "Counter-1-11..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 11) :: str("newCounterValue")) ; assign(
    "Counter-1-11.token", "Counter-1-11.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-11.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; assign("Counter-3-4.caller",
    "Counter-3-4..class", "Counter-3-4..label", "Counter-3-4..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 4) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    assign("Counter-3-5.caller", "Counter-3-5..class", "Counter-3-5..label",
    "Counter-3-5..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(ob(
    "Counter-3"), 5) :: str("newCounterValue")) ; assign("Counter-3-5.token",
    "Counter-3-5.val" ; "Counter-3.observertoken" :: "Counter-3.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; return(emp) ; return(emp)
    ; return(emp) ; return(emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask-2.this" ;
    ob("CounterTask-2")) ; assign("CounterTask-2.taskId",
    "CounterTask-2.myCounter" ; "Main-0-3.i" :: "Main-0.executionCounter") ;
    call(".anon" ; "this" ; "init" ; emp) ; assign("Main-0-3.task" ; ob(
    "CounterTask-2")) ; call("ccglab0" ; "threadpool" ; "dispatchTask" ;
    "task") ; assign("Main-0-9.caller", "Main-0-9..class", "Main-0-9..label",
    "Main-0-9..method" ; ob("Main-0") :: str("Abbey") :: label(ob("Main-0"), 9)
    :: str("dispatchTask")) ; assign("Main-0-9.task" ; "Main-0-3.task") ; call(
    "ccglab0" ; "taskQueue" ; "enqueueTask" ; "task") ; assign(
    "Abbey-0-16.caller", "Abbey-0-16..class", "Abbey-0-16..label",
    "Abbey-0-16..method" ; ob("Abbey-0") :: str("TaskQueue") :: label(ob(
    "Abbey-0"), 16) :: str("enqueueTask")) ; assign("Abbey-0-16.task" ;
    "Main-0-9.task") ; assign("TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks" ::
    "Abbey-0-16.task")) ; call("ccglab0" ; "taskCounter" ; "inc" ; emp) ;
    assign("TaskQueue-0-7.caller", "TaskQueue-0-7..class",
    "TaskQueue-0-7..label", "TaskQueue-0-7..method" ; ob("TaskQueue-0") :: str(
    "Counter") :: label(ob("TaskQueue-0"), 7) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-12.caller",
    "Counter-1-12..class", "Counter-1-12..label", "Counter-1-12..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 12) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("CounterTask-2-0.caller", "CounterTask-2-0..class",
    "CounterTask-2-0..label", "CounterTask-2-0..method" ; ob("CounterTask-2")
    :: str("CounterTask") :: label(ob("CounterTask-2"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-2-1.caller", "CounterTask-2-1..class",
    "CounterTask-2-1..label", "CounterTask-2-1..method" ; ob("CounterTask-2")
    :: str("CounterTask") :: label(ob("CounterTask-2"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-5.val") ; return(emp) ; assign(
    "Counter-1-13.caller", "Counter-1-13..class", "Counter-1-13..label",
    "Counter-1-13..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 13) :: str("newCounterValue")) ; assign(
    "Counter-1-13.token", "Counter-1-13.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-13.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; return(emp) ; return(emp) ; call(
    "ccglab2" ; "task" ; "getId" ; emp) ; assign("Monk-1-4.caller",
    "Monk-1-4..class", "Monk-1-4..label", "Monk-1-4..method" ; ob("Monk-1") ::
    str("CounterTask") :: label(ob("Monk-1"), 4) :: str("getId")) ; assign(
    "Monk-1-4.id" ; "CounterTask-0.taskId") ; return("id") ; assign(
    "Monk-1.taskId" ; "Monk-1-4.id") ; assign("Monk-1.taskHistory" ; "|-"(
    "Monk-1.taskHistory" :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ;
    "execute" ; emp) ; assign("Monk-1-5.caller", "Monk-1-5..class",
    "Monk-1-5..label", "Monk-1-5..method" ; ob("Monk-1") :: str("CounterTask")
    :: label(ob("Monk-1"), 5) :: str("execute")) ; call("ccglab0" ; "myCounter"
    ; "inc" ; emp) ; assign("CounterTask-0-2.caller", "CounterTask-0-2..class",
    "CounterTask-0-2..label", "CounterTask-0-2..method" ; ob("CounterTask-0")
    :: str("Counter") :: label(ob("CounterTask-0"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-2.caller",
    "Counter-0-2..class", "Counter-0-2..label", "Counter-0-2..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 2) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-5.kill" ; bool(false)) ; return(
    "kill") ; assign("Monk-1.kill" ; "Monk-1-5.kill") ; call("ccglab4" ;
    "busyCounter" ; "dec" ; emp) ; assign("Monk-1-6.caller", "Monk-1-6..class",
    "Monk-1-6..label", "Monk-1-6..method" ; ob("Monk-1") :: str("Counter") ::
    label(ob("Monk-1"), 6) :: str("dec")) ; assign("Counter-3.value" ; "-"(
    "Counter-3.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("Counter-3-6.caller", "Counter-3-6..class",
    "Counter-3-6..label", "Counter-3-6..method" ; ob("Counter-3") :: str(
    "Counter") :: label(ob("Counter-3"), 6) :: str("informObserver")) ; if
    "/="("observer" :: null) th skip el skip fi ; call("ccglab0" ; "observer" ;
    "newCounterValue" ; "observertoken" :: "value") ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; return(emp) ; assign(
    "Counter-3-7.caller", "Counter-3-7..class", "Counter-3-7..label",
    "Counter-3-7..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(ob(
    "Counter-3"), 7) :: str("newCounterValue")) ; assign("Counter-3-7.token",
    "Counter-3-7.val" ; "Counter-3.observertoken" :: "Counter-3.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; return(emp) ; return(emp)
    ; return(emp) ; return(emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask-3.this" ;
    ob("CounterTask-3")) ; assign("CounterTask-3.taskId",
    "CounterTask-3.myCounter" ; "Main-0-3.i" :: "Main-0.executionCounter") ;
    call(".anon" ; "this" ; "init" ; emp) ; assign("Main-0-3.task" ; ob(
    "CounterTask-3")) ; call("ccglab0" ; "threadpool" ; "dispatchTask" ;
    "task") ; assign("Main-0-11.caller", "Main-0-11..class",
    "Main-0-11..label", "Main-0-11..method" ; ob("Main-0") :: str("Abbey") ::
    label(ob("Main-0"), 11) :: str("dispatchTask")) ; assign("Main-0-11.task" ;
    "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ; "enqueueTask" ; "task") ;
    assign("Abbey-0-17.caller", "Abbey-0-17..class", "Abbey-0-17..label",
    "Abbey-0-17..method" ; ob("Abbey-0") :: str("TaskQueue") :: label(ob(
    "Abbey-0"), 17) :: str("enqueueTask")) ; assign("Abbey-0-17.task" ;
    "Main-0-11.task") ; assign("TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks"
    :: "Abbey-0-17.task")) ; call("ccglab0" ; "taskCounter" ; "inc" ; emp) ;
    assign("TaskQueue-0-8.caller", "TaskQueue-0-8..class",
    "TaskQueue-0-8..label", "TaskQueue-0-8..method" ; ob("TaskQueue-0") :: str(
    "Counter") :: label(ob("TaskQueue-0"), 8) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-14.caller",
    "Counter-1-14..class", "Counter-1-14..label", "Counter-1-14..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 14) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("CounterTask-3-0.caller", "CounterTask-3-0..class",
    "CounterTask-3-0..label", "CounterTask-3-0..method" ; ob("CounterTask-3")
    :: str("CounterTask") :: label(ob("CounterTask-3"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-3-1.caller", "CounterTask-3-1..class",
    "CounterTask-3-1..label", "CounterTask-3-1..method" ; ob("CounterTask-3")
    :: str("CounterTask") :: label(ob("CounterTask-3"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-7.val") ; return(emp) ; assign(
    "Counter-1-15.caller", "Counter-1-15..class", "Counter-1-15..label",
    "Counter-1-15..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 15) :: str("newCounterValue")) ; assign(
    "Counter-1-15.token", "Counter-1-15.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-15.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; return(emp) ; return(emp) ; if "kill"
    th skip el skip fi ; call("ccglab6" ; "this" ; "run" ; emp) ; assign(
    "Monk-1-7.caller", "Monk-1-7..class", "Monk-1-7..label", "Monk-1-7..method"
    ; ob("Monk-1") :: str("Monk") :: label(ob("Monk-1"), 7) :: str("run")) ;
    call("ccglab0" ; "queue" ; "dequeueTask" ; emp) ; if "="("token" :: str(
    "busythreads")) th skip el skip fi ; return(emp) ; return(emp) ; return(
    emp) ; return(emp) ; assign("Monk-1-8.caller", "Monk-1-8..class",
    "Monk-1-8..label", "Monk-1-8..method" ; ob("Monk-1") :: str("TaskQueue") ::
    label(ob("Monk-1"), 8) :: str("dequeueTask")) ; await ">"("#"("tasks") ::
    int(0)) ; assign("Monk-1-8.task" ; "head"("TaskQueue-0.tasks")) ; assign(
    "TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0" ;
    "taskCounter" ; "dec" ; emp) ; return(emp) ; assign("TaskQueue-0-9.caller",
    "TaskQueue-0-9..class", "TaskQueue-0-9..label", "TaskQueue-0-9..method" ;
    ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 9) :: str(
    "dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1))) ;
    call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign("Main-0-3.i" ;
    "+"("Main-0-3.i" :: int(1))) ; assign("Counter-1-16.caller",
    "Counter-1-16..class", "Counter-1-16..label", "Counter-1-16..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 16) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-1-17.caller", "Counter-1-17..class", "Counter-1-17..label",
    "Counter-1-17..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 17) :: str("newCounterValue")) ; assign(
    "Counter-1-17.token", "Counter-1-17.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-17.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; if "<"("i" :: int(10)) th skip el skip
    fi ; new("task" ; "CounterTask" ; "i" :: "executionCounter") ; assign(
    "CounterTask-4.this" ; ob("CounterTask-4")) ; assign(
    "CounterTask-4.taskId", "CounterTask-4.myCounter" ; "Main-0-3.i" ::
    "Main-0.executionCounter") ; call(".anon" ; "this" ; "init" ; emp) ;
    assign("Main-0-3.task" ; ob("CounterTask-4")) ; call("ccglab0" ;
    "threadpool" ; "dispatchTask" ; "task") ; assign("Main-0-13.caller",
    "Main-0-13..class", "Main-0-13..label", "Main-0-13..method" ; ob("Main-0")
    :: str("Abbey") :: label(ob("Main-0"), 13) :: str("dispatchTask")) ;
    assign("Main-0-13.task" ; "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; assign("CounterTask-4-0.caller",
    "CounterTask-4-0..class", "CounterTask-4-0..label",
    "CounterTask-4-0..method" ; ob("CounterTask-4") :: str("CounterTask") ::
    label(ob("CounterTask-4"), 0) :: str("init")) ; return(emp) ; call(".anon"
    ; "this" ; "run" ; emp) ; assign("CounterTask-4-1.caller",
    "CounterTask-4-1..class", "CounterTask-4-1..label",
    "CounterTask-4-1..method" ; ob("CounterTask-4") :: str("CounterTask") ::
    label(ob("CounterTask-4"), 1) :: str("run")) ; return(emp) ; if "="("token"
    :: str("busythreads")) th skip el skip fi ; return(emp) ; return(emp) ;
    return(emp) ; return("task") ; assign("Abbey-0-18.caller",
    "Abbey-0-18..class", "Abbey-0-18..label", "Abbey-0-18..method" ; ob(
    "Abbey-0") :: str("TaskQueue") :: label(ob("Abbey-0"), 18) :: str(
    "enqueueTask")) ; assign("Monk-1.task" ; "Monk-1-8.task") ; assign(
    "Abbey-0-18.task" ; "Main-0-13.task") ; call("ccglab1" ; "busyCounter" ;
    "inc" ; emp) ; assign("Monk-1-9.caller", "Monk-1-9..class",
    "Monk-1-9..label", "Monk-1-9..method" ; ob("Monk-1") :: str("Counter") ::
    label(ob("Monk-1"), 9) :: str("inc")) ; assign("Counter-3.value" ; "+"(
    "Counter-3.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks" ::
    "Abbey-0-18.task")) ; call("ccglab0" ; "taskCounter" ; "inc" ; emp) ;
    assign("TaskQueue-0-10.caller", "TaskQueue-0-10..class",
    "TaskQueue-0-10..label", "TaskQueue-0-10..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 10) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-18.caller",
    "Counter-1-18..class", "Counter-1-18..label", "Counter-1-18..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 18) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-1-19.caller", "Counter-1-19..class", "Counter-1-19..label",
    "Counter-1-19..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 19) :: str("newCounterValue")) ; assign(
    "Counter-1-19.token", "Counter-1-19.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-19.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; assign("Counter-3-8.caller",
    "Counter-3-8..class", "Counter-3-8..label", "Counter-3-8..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 8) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    assign("Counter-3-9.caller", "Counter-3-9..class", "Counter-3-9..label",
    "Counter-3-9..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(ob(
    "Counter-3"), 9) :: str("newCounterValue")) ; assign("Counter-3-9.token",
    "Counter-3-9.val" ; "Counter-3.observertoken" :: "Counter-3.value") ; if
    "="("token" :: str("tasks")) th skip el skip fi ; return(emp) ; return(emp)
    ; return(emp) ; return(emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i" ::
    int(1))) ; if "<"("i" :: int(10)) th skip el skip fi ; new("task" ;
    "CounterTask" ; "i" :: "executionCounter") ; assign("CounterTask-5.this" ;
    ob("CounterTask-5")) ; assign("CounterTask-5.taskId",
    "CounterTask-5.myCounter" ; "Main-0-3.i" :: "Main-0.executionCounter") ;
    call(".anon" ; "this" ; "init" ; emp) ; assign("Main-0-3.task" ; ob(
    "CounterTask-5")) ; call("ccglab0" ; "threadpool" ; "dispatchTask" ;
    "task") ; assign("Main-0-15.caller", "Main-0-15..class",
    "Main-0-15..label", "Main-0-15..method" ; ob("Main-0") :: str("Abbey") ::
    label(ob("Main-0"), 15) :: str("dispatchTask")) ; assign("Main-0-15.task" ;
    "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ; "enqueueTask" ; "task") ;
    assign("Abbey-0-19.caller", "Abbey-0-19..class", "Abbey-0-19..label",
    "Abbey-0-19..method" ; ob("Abbey-0") :: str("TaskQueue") :: label(ob(
    "Abbey-0"), 19) :: str("enqueueTask")) ; assign("Abbey-0-19.task" ;
    "Main-0-15.task") ; assign("TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks"
    :: "Abbey-0-19.task")) ; call("ccglab0" ; "taskCounter" ; "inc" ; emp) ;
    assign("TaskQueue-0-11.caller", "TaskQueue-0-11..class",
    "TaskQueue-0-11..label", "TaskQueue-0-11..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 11) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-20.caller",
    "Counter-1-20..class", "Counter-1-20..label", "Counter-1-20..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 20) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("CounterTask-5-0.caller", "CounterTask-5-0..class",
    "CounterTask-5-0..label", "CounterTask-5-0..method" ; ob("CounterTask-5")
    :: str("CounterTask") :: label(ob("CounterTask-5"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-5-1.caller", "CounterTask-5-1..class",
    "CounterTask-5-1..label", "CounterTask-5-1..method" ; ob("CounterTask-5")
    :: str("CounterTask") :: label(ob("CounterTask-5"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-9.val") ; return(emp) ; assign(
    "Counter-1-21.caller", "Counter-1-21..class", "Counter-1-21..label",
    "Counter-1-21..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 21) :: str("newCounterValue")) ; assign(
    "Counter-1-21.token", "Counter-1-21.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-21.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; return(emp) ; return(emp) ; call(
    "ccglab2" ; "task" ; "getId" ; emp) ; assign("Monk-1-10.caller",
    "Monk-1-10..class", "Monk-1-10..label", "Monk-1-10..method" ; ob("Monk-1")
    :: str("CounterTask") :: label(ob("Monk-1"), 10) :: str("getId")) ; assign(
    "Monk-1-10.id" ; "CounterTask-1.taskId") ; return("id") ; assign(
    "Monk-1.taskId" ; "Monk-1-10.id") ; assign("Monk-1.taskHistory" ; "|-"(
    "Monk-1.taskHistory" :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ;
    "execute" ; emp) ; assign("Monk-1-11.caller", "Monk-1-11..class",
    "Monk-1-11..label", "Monk-1-11..method" ; ob("Monk-1") :: str(
    "CounterTask") :: label(ob("Monk-1"), 11) :: str("execute")) ; call(
    "ccglab0" ; "myCounter" ; "inc" ; emp) ; assign("CounterTask-1-2.caller",
    "CounterTask-1-2..class", "CounterTask-1-2..label",
    "CounterTask-1-2..method" ; ob("CounterTask-1") :: str("Counter") :: label(
    ob("CounterTask-1"), 2) :: str("inc")) ; assign("Counter-0.value" ; "+"(
    "Counter-0.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("Counter-0-3.caller", "Counter-0-3..class",
    "Counter-0-3..label", "Counter-0-3..method" ; ob("Counter-0") :: str(
    "Counter") :: label(ob("Counter-0"), 3) :: str("informObserver")) ; if
    "/="("observer" :: null) th skip el skip fi ; return(emp) ; return(emp) ;
    assign("Monk-1-11.kill" ; bool(false)) ; return("kill") ; assign(
    "Monk-1.kill" ; "Monk-1-11.kill") ; call("ccglab4" ; "busyCounter" ; "dec"
    ; emp) ; assign("Monk-1-12.caller", "Monk-1-12..class", "Monk-1-12..label",
    "Monk-1-12..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    12) :: str("dec")) ; assign("Counter-3.value" ; "-"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-10.caller", "Counter-3-10..class", "Counter-3-10..label",
    "Counter-3-10..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 10) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; if "="("token" :: str("busythreads")) th skip
    el skip fi ; return(emp) ; assign("Counter-3-11.caller",
    "Counter-3-11..class", "Counter-3-11..label", "Counter-3-11..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 11) :: str(
    "newCounterValue")) ; assign("Counter-3-11.token", "Counter-3-11.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; return(emp) ;
    return(emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i" :: int(1))) ; if "<"(
    "i" :: int(10)) th skip el skip fi ; new("task" ; "CounterTask" ; "i" ::
    "executionCounter") ; assign("CounterTask-6.this" ; ob("CounterTask-6")) ;
    assign("CounterTask-6.taskId", "CounterTask-6.myCounter" ; "Main-0-3.i" ::
    "Main-0.executionCounter") ; call(".anon" ; "this" ; "init" ; emp) ;
    assign("Main-0-3.task" ; ob("CounterTask-6")) ; call("ccglab0" ;
    "threadpool" ; "dispatchTask" ; "task") ; assign("Main-0-17.caller",
    "Main-0-17..class", "Main-0-17..label", "Main-0-17..method" ; ob("Main-0")
    :: str("Abbey") :: label(ob("Main-0"), 17) :: str("dispatchTask")) ;
    assign("Main-0-17.task" ; "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; assign("Abbey-0-20.caller", "Abbey-0-20..class",
    "Abbey-0-20..label", "Abbey-0-20..method" ; ob("Abbey-0") :: str(
    "TaskQueue") :: label(ob("Abbey-0"), 20) :: str("enqueueTask")) ; assign(
    "Abbey-0-20.task" ; "Main-0-17.task") ; assign("TaskQueue-0.tasks" ; "|-"(
    "TaskQueue-0.tasks" :: "Abbey-0-20.task")) ; call("ccglab0" ; "taskCounter"
    ; "inc" ; emp) ; assign("TaskQueue-0-12.caller", "TaskQueue-0-12..class",
    "TaskQueue-0-12..label", "TaskQueue-0-12..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 12) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-22.caller",
    "Counter-1-22..class", "Counter-1-22..label", "Counter-1-22..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 22) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("CounterTask-6-0.caller", "CounterTask-6-0..class",
    "CounterTask-6-0..label", "CounterTask-6-0..method" ; ob("CounterTask-6")
    :: str("CounterTask") :: label(ob("CounterTask-6"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-6-1.caller", "CounterTask-6-1..class",
    "CounterTask-6-1..label", "CounterTask-6-1..method" ; ob("CounterTask-6")
    :: str("CounterTask") :: label(ob("CounterTask-6"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-11.val") ; return(emp) ; assign(
    "Counter-1-23.caller", "Counter-1-23..class", "Counter-1-23..label",
    "Counter-1-23..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 23) :: str("newCounterValue")) ; assign(
    "Counter-1-23.token", "Counter-1-23.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-23.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; return(emp) ; return(emp) ; if "kill"
    th skip el skip fi ; call("ccglab6" ; "this" ; "run" ; emp) ; assign(
    "Monk-1-13.caller", "Monk-1-13..class", "Monk-1-13..label",
    "Monk-1-13..method" ; ob("Monk-1") :: str("Monk") :: label(ob("Monk-1"),
    13) :: str("run")) ; call("ccglab0" ; "queue" ; "dequeueTask" ; emp) ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return(emp) ; assign("Monk-1-14.caller",
    "Monk-1-14..class", "Monk-1-14..label", "Monk-1-14..method" ; ob("Monk-1")
    :: str("TaskQueue") :: label(ob("Monk-1"), 14) :: str("dequeueTask")) ;
    await ">"("#"("tasks") :: int(0)) ; assign("Monk-1-14.task" ; "head"(
    "TaskQueue-0.tasks")) ; assign("TaskQueue-0.tasks" ; "tail"(
    "TaskQueue-0.tasks")) ; call("ccglab0" ; "taskCounter" ; "dec" ; emp) ;
    return(emp) ; assign("TaskQueue-0-13.caller", "TaskQueue-0-13..class",
    "TaskQueue-0-13..label", "TaskQueue-0-13..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 13) :: str("dec")) ; assign(
    "Counter-1.value" ; "-"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i"
    :: int(1))) ; assign("Counter-1-24.caller", "Counter-1-24..class",
    "Counter-1-24..label", "Counter-1-24..method" ; ob("Counter-1") :: str(
    "Counter") :: label(ob("Counter-1"), 24) :: str("informObserver")) ; if
    "/="("observer" :: null) th skip el skip fi ; call("ccglab0" ; "observer" ;
    "newCounterValue" ; "observertoken" :: "value") ; assign(
    "Counter-1-25.caller", "Counter-1-25..class", "Counter-1-25..label",
    "Counter-1-25..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 25) :: str("newCounterValue")) ; assign(
    "Counter-1-25.token", "Counter-1-25.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-25.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; if "<"("i" :: int(10)) th skip el skip
    fi ; new("task" ; "CounterTask" ; "i" :: "executionCounter") ; assign(
    "CounterTask-7.this" ; ob("CounterTask-7")) ; assign(
    "CounterTask-7.taskId", "CounterTask-7.myCounter" ; "Main-0-3.i" ::
    "Main-0.executionCounter") ; call(".anon" ; "this" ; "init" ; emp) ;
    assign("Main-0-3.task" ; ob("CounterTask-7")) ; call("ccglab0" ;
    "threadpool" ; "dispatchTask" ; "task") ; assign("Main-0-19.caller",
    "Main-0-19..class", "Main-0-19..label", "Main-0-19..method" ; ob("Main-0")
    :: str("Abbey") :: label(ob("Main-0"), 19) :: str("dispatchTask")) ;
    assign("Main-0-19.task" ; "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; assign("CounterTask-7-0.caller",
    "CounterTask-7-0..class", "CounterTask-7-0..label",
    "CounterTask-7-0..method" ; ob("CounterTask-7") :: str("CounterTask") ::
    label(ob("CounterTask-7"), 0) :: str("init")) ; return(emp) ; call(".anon"
    ; "this" ; "run" ; emp) ; assign("CounterTask-7-1.caller",
    "CounterTask-7-1..class", "CounterTask-7-1..label",
    "CounterTask-7-1..method" ; ob("CounterTask-7") :: str("CounterTask") ::
    label(ob("CounterTask-7"), 1) :: str("run")) ; return(emp) ; if "="("token"
    :: str("busythreads")) th skip el skip fi ; return(emp) ; return(emp) ;
    return(emp) ; return("task") ; assign("Abbey-0-21.caller",
    "Abbey-0-21..class", "Abbey-0-21..label", "Abbey-0-21..method" ; ob(
    "Abbey-0") :: str("TaskQueue") :: label(ob("Abbey-0"), 21) :: str(
    "enqueueTask")) ; assign("Monk-1.task" ; "Monk-1-14.task") ; assign(
    "Abbey-0-21.task" ; "Main-0-19.task") ; call("ccglab1" ; "busyCounter" ;
    "inc" ; emp) ; assign("Monk-1-15.caller", "Monk-1-15..class",
    "Monk-1-15..label", "Monk-1-15..method" ; ob("Monk-1") :: str("Counter") ::
    label(ob("Monk-1"), 15) :: str("inc")) ; assign("Counter-3.value" ; "+"(
    "Counter-3.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("TaskQueue-0.tasks" ; "|-"("TaskQueue-0.tasks" ::
    "Abbey-0-21.task")) ; call("ccglab0" ; "taskCounter" ; "inc" ; emp) ;
    assign("TaskQueue-0-14.caller", "TaskQueue-0-14..class",
    "TaskQueue-0-14..label", "TaskQueue-0-14..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 14) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-26.caller",
    "Counter-1-26..class", "Counter-1-26..label", "Counter-1-26..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 26) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-1-27.caller", "Counter-1-27..class", "Counter-1-27..label",
    "Counter-1-27..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 27) :: str("newCounterValue")) ; assign(
    "Counter-1-27.token", "Counter-1-27.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-27.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; assign("Counter-3-12.caller",
    "Counter-3-12..class", "Counter-3-12..label", "Counter-3-12..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 12) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    assign("Counter-3-13.caller", "Counter-3-13..class", "Counter-3-13..label",
    "Counter-3-13..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 13) :: str("newCounterValue")) ; assign(
    "Counter-3-13.token", "Counter-3-13.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    return(emp) ; return(emp) ; return(emp) ; return(emp) ; assign("Main-0-3.i"
    ; "+"("Main-0-3.i" :: int(1))) ; if "<"("i" :: int(10)) th skip el skip fi
    ; new("task" ; "CounterTask" ; "i" :: "executionCounter") ; assign(
    "CounterTask-8.this" ; ob("CounterTask-8")) ; assign(
    "CounterTask-8.taskId", "CounterTask-8.myCounter" ; "Main-0-3.i" ::
    "Main-0.executionCounter") ; call(".anon" ; "this" ; "init" ; emp) ;
    assign("Main-0-3.task" ; ob("CounterTask-8")) ; call("ccglab0" ;
    "threadpool" ; "dispatchTask" ; "task") ; assign("Main-0-21.caller",
    "Main-0-21..class", "Main-0-21..label", "Main-0-21..method" ; ob("Main-0")
    :: str("Abbey") :: label(ob("Main-0"), 21) :: str("dispatchTask")) ;
    assign("Main-0-21.task" ; "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; assign("Abbey-0-22.caller", "Abbey-0-22..class",
    "Abbey-0-22..label", "Abbey-0-22..method" ; ob("Abbey-0") :: str(
    "TaskQueue") :: label(ob("Abbey-0"), 22) :: str("enqueueTask")) ; assign(
    "Abbey-0-22.task" ; "Main-0-21.task") ; assign("TaskQueue-0.tasks" ; "|-"(
    "TaskQueue-0.tasks" :: "Abbey-0-22.task")) ; call("ccglab0" ; "taskCounter"
    ; "inc" ; emp) ; assign("TaskQueue-0-15.caller", "TaskQueue-0-15..class",
    "TaskQueue-0-15..label", "TaskQueue-0-15..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 15) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-28.caller",
    "Counter-1-28..class", "Counter-1-28..label", "Counter-1-28..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 28) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("CounterTask-8-0.caller", "CounterTask-8-0..class",
    "CounterTask-8-0..label", "CounterTask-8-0..method" ; ob("CounterTask-8")
    :: str("CounterTask") :: label(ob("CounterTask-8"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-8-1.caller", "CounterTask-8-1..class",
    "CounterTask-8-1..label", "CounterTask-8-1..method" ; ob("CounterTask-8")
    :: str("CounterTask") :: label(ob("CounterTask-8"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-13.val") ; return(emp) ; assign(
    "Counter-1-29.caller", "Counter-1-29..class", "Counter-1-29..label",
    "Counter-1-29..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 29) :: str("newCounterValue")) ; assign(
    "Counter-1-29.token", "Counter-1-29.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-29.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; return(emp) ; return(emp) ; call(
    "ccglab2" ; "task" ; "getId" ; emp) ; assign("Monk-1-16.caller",
    "Monk-1-16..class", "Monk-1-16..label", "Monk-1-16..method" ; ob("Monk-1")
    :: str("CounterTask") :: label(ob("Monk-1"), 16) :: str("getId")) ; assign(
    "Monk-1-16.id" ; "CounterTask-2.taskId") ; return("id") ; assign(
    "Monk-1.taskId" ; "Monk-1-16.id") ; assign("Monk-1.taskHistory" ; "|-"(
    "Monk-1.taskHistory" :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ;
    "execute" ; emp) ; assign("Monk-1-17.caller", "Monk-1-17..class",
    "Monk-1-17..label", "Monk-1-17..method" ; ob("Monk-1") :: str(
    "CounterTask") :: label(ob("Monk-1"), 17) :: str("execute")) ; call(
    "ccglab0" ; "myCounter" ; "inc" ; emp) ; assign("CounterTask-2-2.caller",
    "CounterTask-2-2..class", "CounterTask-2-2..label",
    "CounterTask-2-2..method" ; ob("CounterTask-2") :: str("Counter") :: label(
    ob("CounterTask-2"), 2) :: str("inc")) ; assign("Counter-0.value" ; "+"(
    "Counter-0.value" :: int(1))) ; call("ccglab0" ; "this" ; "informObserver"
    ; emp) ; assign("Counter-0-4.caller", "Counter-0-4..class",
    "Counter-0-4..label", "Counter-0-4..method" ; ob("Counter-0") :: str(
    "Counter") :: label(ob("Counter-0"), 4) :: str("informObserver")) ; if
    "/="("observer" :: null) th skip el skip fi ; return(emp) ; return(emp) ;
    assign("Monk-1-17.kill" ; bool(false)) ; return("kill") ; assign(
    "Monk-1.kill" ; "Monk-1-17.kill") ; call("ccglab4" ; "busyCounter" ; "dec"
    ; emp) ; assign("Monk-1-18.caller", "Monk-1-18..class", "Monk-1-18..label",
    "Monk-1-18..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    18) :: str("dec")) ; assign("Counter-3.value" ; "-"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-14.caller", "Counter-3-14..class", "Counter-3-14..label",
    "Counter-3-14..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 14) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; if "="("token" :: str("busythreads")) th skip
    el skip fi ; return(emp) ; assign("Counter-3-15.caller",
    "Counter-3-15..class", "Counter-3-15..label", "Counter-3-15..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 15) :: str(
    "newCounterValue")) ; assign("Counter-3-15.token", "Counter-3-15.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; return(emp) ; return(emp) ; return(emp) ;
    return(emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i" :: int(1))) ; if "<"(
    "i" :: int(10)) th skip el skip fi ; new("task" ; "CounterTask" ; "i" ::
    "executionCounter") ; assign("CounterTask-9.this" ; ob("CounterTask-9")) ;
    assign("CounterTask-9.taskId", "CounterTask-9.myCounter" ; "Main-0-3.i" ::
    "Main-0.executionCounter") ; call(".anon" ; "this" ; "init" ; emp) ;
    assign("Main-0-3.task" ; ob("CounterTask-9")) ; call("ccglab0" ;
    "threadpool" ; "dispatchTask" ; "task") ; assign("Main-0-23.caller",
    "Main-0-23..class", "Main-0-23..label", "Main-0-23..method" ; ob("Main-0")
    :: str("Abbey") :: label(ob("Main-0"), 23) :: str("dispatchTask")) ;
    assign("Main-0-23.task" ; "Main-0-3.task") ; call("ccglab0" ; "taskQueue" ;
    "enqueueTask" ; "task") ; assign("Abbey-0-23.caller", "Abbey-0-23..class",
    "Abbey-0-23..label", "Abbey-0-23..method" ; ob("Abbey-0") :: str(
    "TaskQueue") :: label(ob("Abbey-0"), 23) :: str("enqueueTask")) ; assign(
    "Abbey-0-23.task" ; "Main-0-23.task") ; assign("TaskQueue-0.tasks" ; "|-"(
    "TaskQueue-0.tasks" :: "Abbey-0-23.task")) ; call("ccglab0" ; "taskCounter"
    ; "inc" ; emp) ; assign("TaskQueue-0-16.caller", "TaskQueue-0-16..class",
    "TaskQueue-0-16..label", "TaskQueue-0-16..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 16) :: str("inc")) ; assign(
    "Counter-1.value" ; "+"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-1-30.caller",
    "Counter-1-30..class", "Counter-1-30..label", "Counter-1-30..method" ; ob(
    "Counter-1") :: str("Counter") :: label(ob("Counter-1"), 30) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("CounterTask-9-0.caller", "CounterTask-9-0..class",
    "CounterTask-9-0..label", "CounterTask-9-0..method" ; ob("CounterTask-9")
    :: str("CounterTask") :: label(ob("CounterTask-9"), 0) :: str("init")) ;
    return(emp) ; call(".anon" ; "this" ; "run" ; emp) ; assign(
    "CounterTask-9-1.caller", "CounterTask-9-1..class",
    "CounterTask-9-1..label", "CounterTask-9-1..method" ; ob("CounterTask-9")
    :: str("CounterTask") :: label(ob("CounterTask-9"), 1) :: str("run")) ;
    return(emp) ; if "="("token" :: str("threads")) th skip el skip fi ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-15.val") ; return(emp) ; assign(
    "Counter-1-31.caller", "Counter-1-31..class", "Counter-1-31..label",
    "Counter-1-31..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 31) :: str("newCounterValue")) ; assign(
    "Counter-1-31.token", "Counter-1-31.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-31.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; return(emp) ; return(emp) ; if "kill"
    th skip el skip fi ; call("ccglab6" ; "this" ; "run" ; emp) ; assign(
    "Monk-1-19.caller", "Monk-1-19..class", "Monk-1-19..label",
    "Monk-1-19..method" ; ob("Monk-1") :: str("Monk") :: label(ob("Monk-1"),
    19) :: str("run")) ; call("ccglab0" ; "queue" ; "dequeueTask" ; emp) ; if
    "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return(emp) ; assign("Monk-1-20.caller",
    "Monk-1-20..class", "Monk-1-20..label", "Monk-1-20..method" ; ob("Monk-1")
    :: str("TaskQueue") :: label(ob("Monk-1"), 20) :: str("dequeueTask")) ;
    await ">"("#"("tasks") :: int(0)) ; assign("Monk-1-20.task" ; "head"(
    "TaskQueue-0.tasks")) ; assign("TaskQueue-0.tasks" ; "tail"(
    "TaskQueue-0.tasks")) ; call("ccglab0" ; "taskCounter" ; "dec" ; emp) ;
    return(emp) ; assign("TaskQueue-0-17.caller", "TaskQueue-0-17..class",
    "TaskQueue-0-17..label", "TaskQueue-0-17..method" ; ob("TaskQueue-0") ::
    str("Counter") :: label(ob("TaskQueue-0"), 17) :: str("dec")) ; assign(
    "Counter-1.value" ; "-"("Counter-1.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Main-0-3.i" ; "+"("Main-0-3.i"
    :: int(1))) ; assign("Counter-1-32.caller", "Counter-1-32..class",
    "Counter-1-32..label", "Counter-1-32..method" ; ob("Counter-1") :: str(
    "Counter") :: label(ob("Counter-1"), 32) :: str("informObserver")) ; if
    "/="("observer" :: null) th skip el skip fi ; call("ccglab0" ; "observer" ;
    "newCounterValue" ; "observertoken" :: "value") ; assign(
    "Counter-1-33.caller", "Counter-1-33..class", "Counter-1-33..label",
    "Counter-1-33..method" ; ob("Counter-1") :: str("ShepherdTask") :: label(
    ob("Counter-1"), 33) :: str("newCounterValue")) ; assign(
    "Counter-1-33.token", "Counter-1-33.val" ; "Counter-1.observertoken" ::
    "Counter-1.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    assign("ShepherdTask-0.tasks" ; "Counter-1-33.val") ; if "="("token" ::
    str("threads")) th skip el skip fi ; if "<"("i" :: int(10)) th skip el skip
    fi ; return(emp) ; if "="("token" :: str("busythreads")) th skip el skip fi
    ; return(emp) ; return(emp) ; return(emp) ; return("task") ; assign(
    "Monk-1.task" ; "Monk-1-20.task") ; call("ccglab1" ; "busyCounter" ; "inc"
    ; emp) ; assign("Monk-1-21.caller", "Monk-1-21..class", "Monk-1-21..label",
    "Monk-1-21..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    21) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-16.caller", "Counter-3-16..class", "Counter-3-16..label",
    "Counter-3-16..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 16) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-17.caller",
    "Counter-3-17..class", "Counter-3-17..label", "Counter-3-17..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 17) :: str(
    "newCounterValue")) ; assign("Counter-3-17.token", "Counter-3-17.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-17.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-22.caller", "Monk-1-22..class", "Monk-1-22..label",
    "Monk-1-22..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 22) :: str("getId")) ; assign("Monk-1-22.id" ;
    "CounterTask-3.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-22.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-23.caller", "Monk-1-23..class", "Monk-1-23..label",
    "Monk-1-23..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 23) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-3-2.caller", "CounterTask-3-2..class",
    "CounterTask-3-2..label", "CounterTask-3-2..method" ; ob("CounterTask-3")
    :: str("Counter") :: label(ob("CounterTask-3"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-5.caller",
    "Counter-0-5..class", "Counter-0-5..label", "Counter-0-5..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 5) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-23.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-23.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-24.caller",
    "Monk-1-24..class", "Monk-1-24..label", "Monk-1-24..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 24) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-18.caller",
    "Counter-3-18..class", "Counter-3-18..label", "Counter-3-18..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 18) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-19.caller", "Counter-3-19..class", "Counter-3-19..label",
    "Counter-3-19..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 19) :: str("newCounterValue")) ; assign(
    "Counter-3-19.token", "Counter-3-19.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-19.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-25.caller", "Monk-1-25..class",
    "Monk-1-25..label", "Monk-1-25..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 25) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-26.caller", "Monk-1-26..class",
    "Monk-1-26..label", "Monk-1-26..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 26) :: str("dequeueTask")) ; await ">"("#"("tasks")
    :: int(0)) ; assign("Monk-1-26.task" ; "head"("TaskQueue-0.tasks")) ;
    assign("TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0"
    ; "taskCounter" ; "dec" ; emp) ; assign("TaskQueue-0-18.caller",
    "TaskQueue-0-18..class", "TaskQueue-0-18..label", "TaskQueue-0-18..method"
    ; ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 18) ::
    str("dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1)))
    ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-1-34.caller", "Counter-1-34..class", "Counter-1-34..label",
    "Counter-1-34..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 34) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-35.caller",
    "Counter-1-35..class", "Counter-1-35..label", "Counter-1-35..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 35) :: str(
    "newCounterValue")) ; assign("Counter-1-35.token", "Counter-1-35.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-35.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk-1.task" ;
    "Monk-1-26.task") ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Monk-1-27.caller", "Monk-1-27..class", "Monk-1-27..label",
    "Monk-1-27..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    27) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-20.caller", "Counter-3-20..class", "Counter-3-20..label",
    "Counter-3-20..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 20) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-21.caller",
    "Counter-3-21..class", "Counter-3-21..label", "Counter-3-21..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 21) :: str(
    "newCounterValue")) ; assign("Counter-3-21.token", "Counter-3-21.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-21.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-28.caller", "Monk-1-28..class", "Monk-1-28..label",
    "Monk-1-28..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 28) :: str("getId")) ; assign("Monk-1-28.id" ;
    "CounterTask-4.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-28.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-29.caller", "Monk-1-29..class", "Monk-1-29..label",
    "Monk-1-29..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 29) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-4-2.caller", "CounterTask-4-2..class",
    "CounterTask-4-2..label", "CounterTask-4-2..method" ; ob("CounterTask-4")
    :: str("Counter") :: label(ob("CounterTask-4"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-6.caller",
    "Counter-0-6..class", "Counter-0-6..label", "Counter-0-6..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 6) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-29.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-29.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-30.caller",
    "Monk-1-30..class", "Monk-1-30..label", "Monk-1-30..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 30) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-22.caller",
    "Counter-3-22..class", "Counter-3-22..label", "Counter-3-22..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 22) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-23.caller", "Counter-3-23..class", "Counter-3-23..label",
    "Counter-3-23..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 23) :: str("newCounterValue")) ; assign(
    "Counter-3-23.token", "Counter-3-23.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-23.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-31.caller", "Monk-1-31..class",
    "Monk-1-31..label", "Monk-1-31..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 31) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-32.caller", "Monk-1-32..class",
    "Monk-1-32..label", "Monk-1-32..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 32) :: str("dequeueTask")) ; await ">"("#"("tasks")
    :: int(0)) ; assign("Monk-1-32.task" ; "head"("TaskQueue-0.tasks")) ;
    assign("TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0"
    ; "taskCounter" ; "dec" ; emp) ; assign("TaskQueue-0-19.caller",
    "TaskQueue-0-19..class", "TaskQueue-0-19..label", "TaskQueue-0-19..method"
    ; ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 19) ::
    str("dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1)))
    ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-1-36.caller", "Counter-1-36..class", "Counter-1-36..label",
    "Counter-1-36..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 36) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-37.caller",
    "Counter-1-37..class", "Counter-1-37..label", "Counter-1-37..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 37) :: str(
    "newCounterValue")) ; assign("Counter-1-37.token", "Counter-1-37.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-37.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk-1.task" ;
    "Monk-1-32.task") ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Monk-1-33.caller", "Monk-1-33..class", "Monk-1-33..label",
    "Monk-1-33..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    33) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-24.caller", "Counter-3-24..class", "Counter-3-24..label",
    "Counter-3-24..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 24) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-25.caller",
    "Counter-3-25..class", "Counter-3-25..label", "Counter-3-25..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 25) :: str(
    "newCounterValue")) ; assign("Counter-3-25.token", "Counter-3-25.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-25.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-34.caller", "Monk-1-34..class", "Monk-1-34..label",
    "Monk-1-34..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 34) :: str("getId")) ; assign("Monk-1-34.id" ;
    "CounterTask-5.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-34.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-35.caller", "Monk-1-35..class", "Monk-1-35..label",
    "Monk-1-35..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 35) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-5-2.caller", "CounterTask-5-2..class",
    "CounterTask-5-2..label", "CounterTask-5-2..method" ; ob("CounterTask-5")
    :: str("Counter") :: label(ob("CounterTask-5"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-7.caller",
    "Counter-0-7..class", "Counter-0-7..label", "Counter-0-7..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 7) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-35.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-35.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-36.caller",
    "Monk-1-36..class", "Monk-1-36..label", "Monk-1-36..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 36) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-26.caller",
    "Counter-3-26..class", "Counter-3-26..label", "Counter-3-26..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 26) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-27.caller", "Counter-3-27..class", "Counter-3-27..label",
    "Counter-3-27..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 27) :: str("newCounterValue")) ; assign(
    "Counter-3-27.token", "Counter-3-27.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-27.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-37.caller", "Monk-1-37..class",
    "Monk-1-37..label", "Monk-1-37..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 37) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-38.caller", "Monk-1-38..class",
    "Monk-1-38..label", "Monk-1-38..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 38) :: str("dequeueTask")) ; await ">"("#"("tasks")
    :: int(0)) ; assign("Monk-1-38.task" ; "head"("TaskQueue-0.tasks")) ;
    assign("TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0"
    ; "taskCounter" ; "dec" ; emp) ; assign("TaskQueue-0-20.caller",
    "TaskQueue-0-20..class", "TaskQueue-0-20..label", "TaskQueue-0-20..method"
    ; ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 20) ::
    str("dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1)))
    ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-1-38.caller", "Counter-1-38..class", "Counter-1-38..label",
    "Counter-1-38..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 38) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-39.caller",
    "Counter-1-39..class", "Counter-1-39..label", "Counter-1-39..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 39) :: str(
    "newCounterValue")) ; assign("Counter-1-39.token", "Counter-1-39.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-39.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk-1.task" ;
    "Monk-1-38.task") ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Monk-1-39.caller", "Monk-1-39..class", "Monk-1-39..label",
    "Monk-1-39..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    39) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-28.caller", "Counter-3-28..class", "Counter-3-28..label",
    "Counter-3-28..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 28) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-29.caller",
    "Counter-3-29..class", "Counter-3-29..label", "Counter-3-29..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 29) :: str(
    "newCounterValue")) ; assign("Counter-3-29.token", "Counter-3-29.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-29.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-40.caller", "Monk-1-40..class", "Monk-1-40..label",
    "Monk-1-40..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 40) :: str("getId")) ; assign("Monk-1-40.id" ;
    "CounterTask-6.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-40.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-41.caller", "Monk-1-41..class", "Monk-1-41..label",
    "Monk-1-41..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 41) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-6-2.caller", "CounterTask-6-2..class",
    "CounterTask-6-2..label", "CounterTask-6-2..method" ; ob("CounterTask-6")
    :: str("Counter") :: label(ob("CounterTask-6"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-8.caller",
    "Counter-0-8..class", "Counter-0-8..label", "Counter-0-8..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 8) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-41.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-41.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-42.caller",
    "Monk-1-42..class", "Monk-1-42..label", "Monk-1-42..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 42) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-30.caller",
    "Counter-3-30..class", "Counter-3-30..label", "Counter-3-30..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 30) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-31.caller", "Counter-3-31..class", "Counter-3-31..label",
    "Counter-3-31..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 31) :: str("newCounterValue")) ; assign(
    "Counter-3-31.token", "Counter-3-31.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-31.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-43.caller", "Monk-1-43..class",
    "Monk-1-43..label", "Monk-1-43..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 43) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-44.caller", "Monk-1-44..class",
    "Monk-1-44..label", "Monk-1-44..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 44) :: str("dequeueTask")) ; await ">"("#"("tasks")
    :: int(0)) ; assign("Monk-1-44.task" ; "head"("TaskQueue-0.tasks")) ;
    assign("TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0"
    ; "taskCounter" ; "dec" ; emp) ; assign("TaskQueue-0-21.caller",
    "TaskQueue-0-21..class", "TaskQueue-0-21..label", "TaskQueue-0-21..method"
    ; ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 21) ::
    str("dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1)))
    ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-1-40.caller", "Counter-1-40..class", "Counter-1-40..label",
    "Counter-1-40..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 40) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-41.caller",
    "Counter-1-41..class", "Counter-1-41..label", "Counter-1-41..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 41) :: str(
    "newCounterValue")) ; assign("Counter-1-41.token", "Counter-1-41.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-41.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk-1.task" ;
    "Monk-1-44.task") ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Monk-1-45.caller", "Monk-1-45..class", "Monk-1-45..label",
    "Monk-1-45..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    45) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-32.caller", "Counter-3-32..class", "Counter-3-32..label",
    "Counter-3-32..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 32) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-33.caller",
    "Counter-3-33..class", "Counter-3-33..label", "Counter-3-33..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 33) :: str(
    "newCounterValue")) ; assign("Counter-3-33.token", "Counter-3-33.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-33.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-46.caller", "Monk-1-46..class", "Monk-1-46..label",
    "Monk-1-46..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 46) :: str("getId")) ; assign("Monk-1-46.id" ;
    "CounterTask-7.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-46.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-47.caller", "Monk-1-47..class", "Monk-1-47..label",
    "Monk-1-47..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 47) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-7-2.caller", "CounterTask-7-2..class",
    "CounterTask-7-2..label", "CounterTask-7-2..method" ; ob("CounterTask-7")
    :: str("Counter") :: label(ob("CounterTask-7"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-9.caller",
    "Counter-0-9..class", "Counter-0-9..label", "Counter-0-9..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 9) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-47.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-47.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-48.caller",
    "Monk-1-48..class", "Monk-1-48..label", "Monk-1-48..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 48) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-34.caller",
    "Counter-3-34..class", "Counter-3-34..label", "Counter-3-34..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 34) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-35.caller", "Counter-3-35..class", "Counter-3-35..label",
    "Counter-3-35..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 35) :: str("newCounterValue")) ; assign(
    "Counter-3-35.token", "Counter-3-35.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-35.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-49.caller", "Monk-1-49..class",
    "Monk-1-49..label", "Monk-1-49..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 49) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-50.caller", "Monk-1-50..class",
    "Monk-1-50..label", "Monk-1-50..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 50) :: str("dequeueTask")) ; await ">"("#"("tasks")
    :: int(0)) ; assign("Monk-1-50.task" ; "head"("TaskQueue-0.tasks")) ;
    assign("TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0"
    ; "taskCounter" ; "dec" ; emp) ; assign("TaskQueue-0-22.caller",
    "TaskQueue-0-22..class", "TaskQueue-0-22..label", "TaskQueue-0-22..method"
    ; ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 22) ::
    str("dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1)))
    ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-1-42.caller", "Counter-1-42..class", "Counter-1-42..label",
    "Counter-1-42..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 42) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-43.caller",
    "Counter-1-43..class", "Counter-1-43..label", "Counter-1-43..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 43) :: str(
    "newCounterValue")) ; assign("Counter-1-43.token", "Counter-1-43.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-43.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk-1.task" ;
    "Monk-1-50.task") ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Monk-1-51.caller", "Monk-1-51..class", "Monk-1-51..label",
    "Monk-1-51..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    51) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-36.caller", "Counter-3-36..class", "Counter-3-36..label",
    "Counter-3-36..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 36) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-37.caller",
    "Counter-3-37..class", "Counter-3-37..label", "Counter-3-37..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 37) :: str(
    "newCounterValue")) ; assign("Counter-3-37.token", "Counter-3-37.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-37.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-52.caller", "Monk-1-52..class", "Monk-1-52..label",
    "Monk-1-52..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 52) :: str("getId")) ; assign("Monk-1-52.id" ;
    "CounterTask-8.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-52.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-53.caller", "Monk-1-53..class", "Monk-1-53..label",
    "Monk-1-53..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 53) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-8-2.caller", "CounterTask-8-2..class",
    "CounterTask-8-2..label", "CounterTask-8-2..method" ; ob("CounterTask-8")
    :: str("Counter") :: label(ob("CounterTask-8"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-10.caller",
    "Counter-0-10..class", "Counter-0-10..label", "Counter-0-10..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 10) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-53.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-53.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-54.caller",
    "Monk-1-54..class", "Monk-1-54..label", "Monk-1-54..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 54) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-38.caller",
    "Counter-3-38..class", "Counter-3-38..label", "Counter-3-38..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 38) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-39.caller", "Counter-3-39..class", "Counter-3-39..label",
    "Counter-3-39..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 39) :: str("newCounterValue")) ; assign(
    "Counter-3-39.token", "Counter-3-39.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-39.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-55.caller", "Monk-1-55..class",
    "Monk-1-55..label", "Monk-1-55..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 55) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-56.caller", "Monk-1-56..class",
    "Monk-1-56..label", "Monk-1-56..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 56) :: str("dequeueTask")) ; await ">"("#"("tasks")
    :: int(0)) ; assign("Monk-1-56.task" ; "head"("TaskQueue-0.tasks")) ;
    assign("TaskQueue-0.tasks" ; "tail"("TaskQueue-0.tasks")) ; call("ccglab0"
    ; "taskCounter" ; "dec" ; emp) ; assign("TaskQueue-0-23.caller",
    "TaskQueue-0-23..class", "TaskQueue-0-23..label", "TaskQueue-0-23..method"
    ; ob("TaskQueue-0") :: str("Counter") :: label(ob("TaskQueue-0"), 23) ::
    str("dec")) ; assign("Counter-1.value" ; "-"("Counter-1.value" :: int(1)))
    ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-1-44.caller", "Counter-1-44..class", "Counter-1-44..label",
    "Counter-1-44..method" ; ob("Counter-1") :: str("Counter") :: label(ob(
    "Counter-1"), 44) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-1-45.caller",
    "Counter-1-45..class", "Counter-1-45..label", "Counter-1-45..method" ; ob(
    "Counter-1") :: str("ShepherdTask") :: label(ob("Counter-1"), 45) :: str(
    "newCounterValue")) ; assign("Counter-1-45.token", "Counter-1-45.val" ;
    "Counter-1.observertoken" :: "Counter-1.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; assign("ShepherdTask-0.tasks" ;
    "Counter-1-45.val") ; if "="("token" :: str("threads")) th skip el skip fi
    ; if "="("token" :: str("busythreads")) th skip el skip fi ; return(emp) ;
    return(emp) ; return(emp) ; return("task") ; assign("Monk-1.task" ;
    "Monk-1-56.task") ; call("ccglab1" ; "busyCounter" ; "inc" ; emp) ; assign(
    "Monk-1-57.caller", "Monk-1-57..class", "Monk-1-57..label",
    "Monk-1-57..method" ; ob("Monk-1") :: str("Counter") :: label(ob("Monk-1"),
    57) :: str("inc")) ; assign("Counter-3.value" ; "+"("Counter-3.value" ::
    int(1))) ; call("ccglab0" ; "this" ; "informObserver" ; emp) ; assign(
    "Counter-3-40.caller", "Counter-3-40..class", "Counter-3-40..label",
    "Counter-3-40..method" ; ob("Counter-3") :: str("Counter") :: label(ob(
    "Counter-3"), 40) :: str("informObserver")) ; if "/="("observer" :: null)
    th skip el skip fi ; call("ccglab0" ; "observer" ; "newCounterValue" ;
    "observertoken" :: "value") ; assign("Counter-3-41.caller",
    "Counter-3-41..class", "Counter-3-41..label", "Counter-3-41..method" ; ob(
    "Counter-3") :: str("ShepherdTask") :: label(ob("Counter-3"), 41) :: str(
    "newCounterValue")) ; assign("Counter-3-41.token", "Counter-3-41.val" ;
    "Counter-3.observertoken" :: "Counter-3.value") ; if "="("token" :: str(
    "tasks")) th skip el skip fi ; if "="("token" :: str("threads")) th skip el
    skip fi ; if "="("token" :: str("busythreads")) th skip el skip fi ;
    assign("ShepherdTask-0.busythreads" ; "Counter-3-41.val") ; return(emp) ;
    return(emp) ; return(emp) ; call("ccglab2" ; "task" ; "getId" ; emp) ;
    assign("Monk-1-58.caller", "Monk-1-58..class", "Monk-1-58..label",
    "Monk-1-58..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 58) :: str("getId")) ; assign("Monk-1-58.id" ;
    "CounterTask-9.taskId") ; return("id") ; assign("Monk-1.taskId" ;
    "Monk-1-58.id") ; assign("Monk-1.taskHistory" ; "|-"("Monk-1.taskHistory"
    :: "Monk-1.taskId")) ; call("ccglab3" ; "task" ; "execute" ; emp) ; assign(
    "Monk-1-59.caller", "Monk-1-59..class", "Monk-1-59..label",
    "Monk-1-59..method" ; ob("Monk-1") :: str("CounterTask") :: label(ob(
    "Monk-1"), 59) :: str("execute")) ; call("ccglab0" ; "myCounter" ; "inc" ;
    emp) ; assign("CounterTask-9-2.caller", "CounterTask-9-2..class",
    "CounterTask-9-2..label", "CounterTask-9-2..method" ; ob("CounterTask-9")
    :: str("Counter") :: label(ob("CounterTask-9"), 2) :: str("inc")) ; assign(
    "Counter-0.value" ; "+"("Counter-0.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-0-11.caller",
    "Counter-0-11..class", "Counter-0-11..label", "Counter-0-11..method" ; ob(
    "Counter-0") :: str("Counter") :: label(ob("Counter-0"), 11) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ;
    return(emp) ; return(emp) ; assign("Monk-1-59.kill" ; bool(false)) ;
    return("kill") ; assign("Monk-1.kill" ; "Monk-1-59.kill") ; call("ccglab4"
    ; "busyCounter" ; "dec" ; emp) ; assign("Monk-1-60.caller",
    "Monk-1-60..class", "Monk-1-60..label", "Monk-1-60..method" ; ob("Monk-1")
    :: str("Counter") :: label(ob("Monk-1"), 60) :: str("dec")) ; assign(
    "Counter-3.value" ; "-"("Counter-3.value" :: int(1))) ; call("ccglab0" ;
    "this" ; "informObserver" ; emp) ; assign("Counter-3-42.caller",
    "Counter-3-42..class", "Counter-3-42..label", "Counter-3-42..method" ; ob(
    "Counter-3") :: str("Counter") :: label(ob("Counter-3"), 42) :: str(
    "informObserver")) ; if "/="("observer" :: null) th skip el skip fi ; call(
    "ccglab0" ; "observer" ; "newCounterValue" ; "observertoken" :: "value") ;
    assign("Counter-3-43.caller", "Counter-3-43..class", "Counter-3-43..label",
    "Counter-3-43..method" ; ob("Counter-3") :: str("ShepherdTask") :: label(
    ob("Counter-3"), 43) :: str("newCounterValue")) ; assign(
    "Counter-3-43.token", "Counter-3-43.val" ; "Counter-3.observertoken" ::
    "Counter-3.value") ; if "="("token" :: str("tasks")) th skip el skip fi ;
    if "="("token" :: str("threads")) th skip el skip fi ; if "="("token" ::
    str("busythreads")) th skip el skip fi ; assign(
    "ShepherdTask-0.busythreads" ; "Counter-3-43.val") ; return(emp) ; return(
    emp) ; return(emp) ; if "kill" th skip el skip fi ; call("ccglab6" ; "this"
    ; "run" ; emp) ; assign("Monk-1-61.caller", "Monk-1-61..class",
    "Monk-1-61..label", "Monk-1-61..method" ; ob("Monk-1") :: str("Monk") ::
    label(ob("Monk-1"), 61) :: str("run")) ; call("ccglab0" ; "queue" ;
    "dequeueTask" ; emp) ; assign("Monk-1-62.caller", "Monk-1-62..class",
    "Monk-1-62..label", "Monk-1-62..method" ; ob("Monk-1") :: str("TaskQueue")
    :: label(ob("Monk-1"), 62) :: str("dequeueTask")) ; $bawait ">"("#"(
    "tasks") :: int(0)) | 
  "Abbey-0-0..class" |> str("Abbey"), 
  "Abbey-0-0..label" |> label(ob("Abbey-0"), 0), 
  "Abbey-0-0..method" |> str("init"), 
  "Abbey-0-0.caller" |> ob("Abbey-0"), 
  "Abbey-0-0.mrate" |> int(5), 
  "Abbey-0-0.shepherd" |> ob("ShepherdTask-0"), 
  "Abbey-0-10..class" |> str("Counter"), 
  "Abbey-0-10..label" |> label(ob("Abbey-0"), 10), 
  "Abbey-0-10..method" |> str("inc"), 
  "Abbey-0-10.caller" |> ob("Abbey-0"), 
  "Abbey-0-11..class" |> str("Abbey"), 
  "Abbey-0-11..label" |> label(ob("Abbey-0"), 11), 
  "Abbey-0-11..method" |> str("dispatchTask"), 
  "Abbey-0-11.caller" |> ob("Abbey-0"), 
  "Abbey-0-11.task" |> ob("ShepherdTask-0"), 
  "Abbey-0-12..class" |> str("TaskQueue"), 
  "Abbey-0-12..label" |> label(ob("Abbey-0"), 12), 
  "Abbey-0-12..method" |> str("enqueueTask"), 
  "Abbey-0-12.caller" |> ob("Abbey-0"), 
  "Abbey-0-12.task" |> ob("ShepherdTask-0"), 
  "Abbey-0-13..class" |> str("Abbey"), 
  "Abbey-0-13..label" |> label(ob("Abbey-0"), 13), 
  "Abbey-0-13..method" |> str("run"), 
  "Abbey-0-13.caller" |> ob("Abbey-0"), 
  "Abbey-0-14..class" |> str("TaskQueue"), 
  "Abbey-0-14..label" |> label(ob("Abbey-0"), 14), 
  "Abbey-0-14..method" |> str("enqueueTask"), 
  "Abbey-0-14.caller" |> ob("Abbey-0"), 
  "Abbey-0-14.task" |> ob("CounterTask-0"), 
  "Abbey-0-15..class" |> str("TaskQueue"), 
  "Abbey-0-15..label" |> label(ob("Abbey-0"), 15), 
  "Abbey-0-15..method" |> str("enqueueTask"), 
  "Abbey-0-15.caller" |> ob("Abbey-0"), 
  "Abbey-0-15.task" |> ob("CounterTask-1"), 
  "Abbey-0-16..class" |> str("TaskQueue"), 
  "Abbey-0-16..label" |> label(ob("Abbey-0"), 16), 
  "Abbey-0-16..method" |> str("enqueueTask"), 
  "Abbey-0-16.caller" |> ob("Abbey-0"), 
  "Abbey-0-16.task" |> ob("CounterTask-2"), 
  "Abbey-0-17..class" |> str("TaskQueue"), 
  "Abbey-0-17..label" |> label(ob("Abbey-0"), 17), 
  "Abbey-0-17..method" |> str("enqueueTask"), 
  "Abbey-0-17.caller" |> ob("Abbey-0"), 
  "Abbey-0-17.task" |> ob("CounterTask-3"), 
  "Abbey-0-18..class" |> str("TaskQueue"), 
  "Abbey-0-18..label" |> label(ob("Abbey-0"), 18), 
  "Abbey-0-18..method" |> str("enqueueTask"), 
  "Abbey-0-18.caller" |> ob("Abbey-0"), 
  "Abbey-0-18.task" |> ob("CounterTask-4"), 
  "Abbey-0-19..class" |> str("TaskQueue"), 
  "Abbey-0-19..label" |> label(ob("Abbey-0"), 19), 
  "Abbey-0-19..method" |> str("enqueueTask"), 
  "Abbey-0-19.caller" |> ob("Abbey-0"), 
  "Abbey-0-19.task" |> ob("CounterTask-5"), 
  "Abbey-0-20..class" |> str("TaskQueue"), 
  "Abbey-0-20..label" |> label(ob("Abbey-0"), 20), 
  "Abbey-0-20..method" |> str("enqueueTask"), 
  "Abbey-0-20.caller" |> ob("Abbey-0"), 
  "Abbey-0-20.task" |> ob("CounterTask-6"), 
  "Abbey-0-21..class" |> str("TaskQueue"), 
  "Abbey-0-21..label" |> label(ob("Abbey-0"), 21), 
  "Abbey-0-21..method" |> str("enqueueTask"), 
  "Abbey-0-21.caller" |> ob("Abbey-0"), 
  "Abbey-0-21.task" |> ob("CounterTask-7"), 
  "Abbey-0-22..class" |> str("TaskQueue"), 
  "Abbey-0-22..label" |> label(ob("Abbey-0"), 22), 
  "Abbey-0-22..method" |> str("enqueueTask"), 
  "Abbey-0-22.caller" |> ob("Abbey-0"), 
  "Abbey-0-22.task" |> ob("CounterTask-8"), 
  "Abbey-0-23..class" |> str("TaskQueue"), 
  "Abbey-0-23..label" |> label(ob("Abbey-0"), 23), 
  "Abbey-0-23..method" |> str("enqueueTask"), 
  "Abbey-0-23.caller" |> ob("Abbey-0"), 
  "Abbey-0-23.task" |> ob("CounterTask-9"), 
  "Abbey-0-6..class" |> str("Abbey"), 
  "Abbey-0-6..label" |> label(ob("Abbey-0"), 6), 
  "Abbey-0-6..method" |> str("createThreads"), 
  "Abbey-0-6.amount" |> "Main-0.nthreads_init", 
  "Abbey-0-6.caller" |> ob("Abbey-0"), 
  "Abbey-0-6.i" |> int(2), 
  "Abbey-0-6.thread" |> ob("Monk-1"), 
  "Abbey-0-8..class" |> str("Counter"), 
  "Abbey-0-8..label" |> label(ob("Abbey-0"), 8), 
  "Abbey-0-8..method" |> str("inc"), 
  "Abbey-0-8.caller" |> ob("Abbey-0"), 
  "Abbey-0.busyCounter" |> ob("Counter-3"), 
  "Abbey-0.maxNofThreads" |> "Main-0.maxthreads_init", 
  "Abbey-0.size" |> "Main-0.nthreads_init", 
  "Abbey-0.taskCounter" |> ob("Counter-1"), 
  "Abbey-0.taskQueue" |> ob("TaskQueue-0"), 
  "Abbey-0.this" |> ob("Abbey-0"), 
  "Abbey-0.threadCounter" |> ob("Counter-2"), 
  "Abbey-0.threads" |> list(ob("Monk-0") :: ob("Monk-1")), 
  "Counter-0-0..class" |> str("Counter"), 
  "Counter-0-0..label" |> label(ob("Counter-0"), 0), 
  "Counter-0-0..method" |> str("init"), 
  "Counter-0-0.caller" |> ob("Counter-0"), 
  "Counter-0-1..class" |> str("Counter"), 
  "Counter-0-1..label" |> label(ob("Counter-0"), 1), 
  "Counter-0-1..method" |> str("run"), 
  "Counter-0-1.caller" |> ob("Counter-0"), 
  "Counter-0-10..class" |> str("Counter"), 
  "Counter-0-10..label" |> label(ob("Counter-0"), 10), 
  "Counter-0-10..method" |> str("informObserver"), 
  "Counter-0-10.caller" |> ob("Counter-0"), 
  "Counter-0-11..class" |> str("Counter"), 
  "Counter-0-11..label" |> label(ob("Counter-0"), 11), 
  "Counter-0-11..method" |> str("informObserver"), 
  "Counter-0-11.caller" |> ob("Counter-0"), 
  "Counter-0-2..class" |> str("Counter"), 
  "Counter-0-2..label" |> label(ob("Counter-0"), 2), 
  "Counter-0-2..method" |> str("informObserver"), 
  "Counter-0-2.caller" |> ob("Counter-0"), 
  "Counter-0-3..class" |> str("Counter"), 
  "Counter-0-3..label" |> label(ob("Counter-0"), 3), 
  "Counter-0-3..method" |> str("informObserver"), 
  "Counter-0-3.caller" |> ob("Counter-0"), 
  "Counter-0-4..class" |> str("Counter"), 
  "Counter-0-4..label" |> label(ob("Counter-0"), 4), 
  "Counter-0-4..method" |> str("informObserver"), 
  "Counter-0-4.caller" |> ob("Counter-0"), 
  "Counter-0-5..class" |> str("Counter"), 
  "Counter-0-5..label" |> label(ob("Counter-0"), 5), 
  "Counter-0-5..method" |> str("informObserver"), 
  "Counter-0-5.caller" |> ob("Counter-0"), 
  "Counter-0-6..class" |> str("Counter"), 
  "Counter-0-6..label" |> label(ob("Counter-0"), 6), 
  "Counter-0-6..method" |> str("informObserver"), 
  "Counter-0-6.caller" |> ob("Counter-0"), 
  "Counter-0-7..class" |> str("Counter"), 
  "Counter-0-7..label" |> label(ob("Counter-0"), 7), 
  "Counter-0-7..method" |> str("informObserver"), 
  "Counter-0-7.caller" |> ob("Counter-0"), 
  "Counter-0-8..class" |> str("Counter"), 
  "Counter-0-8..label" |> label(ob("Counter-0"), 8), 
  "Counter-0-8..method" |> str("informObserver"), 
  "Counter-0-8.caller" |> ob("Counter-0"), 
  "Counter-0-9..class" |> str("Counter"), 
  "Counter-0-9..label" |> label(ob("Counter-0"), 9), 
  "Counter-0-9..method" |> str("informObserver"), 
  "Counter-0-9.caller" |> ob("Counter-0"), 
  "Counter-0.observer" |> null, 
  "Counter-0.observertoken" |> str(""), 
  "Counter-0.this" |> ob("Counter-0"), 
  "Counter-0.value" |> int(10), 
  "Counter-1-0..class" |> str("Counter"), 
  "Counter-1-0..label" |> label(ob("Counter-1"), 0), 
  "Counter-1-0..method" |> str("init"), 
  "Counter-1-0.caller" |> ob("Counter-1"), 
  "Counter-1-1..class" |> str("Counter"), 
  "Counter-1-1..label" |> label(ob("Counter-1"), 1), 
  "Counter-1-1..method" |> str("run"), 
  "Counter-1-1.caller" |> ob("Counter-1"), 
  "Counter-1-10..class" |> str("Counter"), 
  "Counter-1-10..label" |> label(ob("Counter-1"), 10), 
  "Counter-1-10..method" |> str("informObserver"), 
  "Counter-1-10.caller" |> ob("Counter-1"), 
  "Counter-1-11..class" |> str("ShepherdTask"), 
  "Counter-1-11..label" |> label(ob("Counter-1"), 11), 
  "Counter-1-11..method" |> str("newCounterValue"), 
  "Counter-1-11.caller" |> ob("Counter-1"), 
  "Counter-1-11.token" |> str("tasks"), 
  "Counter-1-11.val" |> int(1), 
  "Counter-1-12..class" |> str("Counter"), 
  "Counter-1-12..label" |> label(ob("Counter-1"), 12), 
  "Counter-1-12..method" |> str("informObserver"), 
  "Counter-1-12.caller" |> ob("Counter-1"), 
  "Counter-1-13..class" |> str("ShepherdTask"), 
  "Counter-1-13..label" |> label(ob("Counter-1"), 13), 
  "Counter-1-13..method" |> str("newCounterValue"), 
  "Counter-1-13.caller" |> ob("Counter-1"), 
  "Counter-1-13.token" |> str("tasks"), 
  "Counter-1-13.val" |> int(2), 
  "Counter-1-14..class" |> str("Counter"), 
  "Counter-1-14..label" |> label(ob("Counter-1"), 14), 
  "Counter-1-14..method" |> str("informObserver"), 
  "Counter-1-14.caller" |> ob("Counter-1"), 
  "Counter-1-15..class" |> str("ShepherdTask"), 
  "Counter-1-15..label" |> label(ob("Counter-1"), 15), 
  "Counter-1-15..method" |> str("newCounterValue"), 
  "Counter-1-15.caller" |> ob("Counter-1"), 
  "Counter-1-15.token" |> str("tasks"), 
  "Counter-1-15.val" |> int(3), 
  "Counter-1-16..class" |> str("Counter"), 
  "Counter-1-16..label" |> label(ob("Counter-1"), 16), 
  "Counter-1-16..method" |> str("informObserver"), 
  "Counter-1-16.caller" |> ob("Counter-1"), 
  "Counter-1-17..class" |> str("ShepherdTask"), 
  "Counter-1-17..label" |> label(ob("Counter-1"), 17), 
  "Counter-1-17..method" |> str("newCounterValue"), 
  "Counter-1-17.caller" |> ob("Counter-1"), 
  "Counter-1-17.token" |> str("tasks"), 
  "Counter-1-17.val" |> int(2), 
  "Counter-1-18..class" |> str("Counter"), 
  "Counter-1-18..label" |> label(ob("Counter-1"), 18), 
  "Counter-1-18..method" |> str("informObserver"), 
  "Counter-1-18.caller" |> ob("Counter-1"), 
  "Counter-1-19..class" |> str("ShepherdTask"), 
  "Counter-1-19..label" |> label(ob("Counter-1"), 19), 
  "Counter-1-19..method" |> str("newCounterValue"), 
  "Counter-1-19.caller" |> ob("Counter-1"), 
  "Counter-1-19.token" |> str("tasks"), 
  "Counter-1-19.val" |> int(3), 
  "Counter-1-2..class" |> str("Counter"), 
  "Counter-1-2..label" |> label(ob("Counter-1"), 2), 
  "Counter-1-2..method" |> str("informObserver"), 
  "Counter-1-2.caller" |> ob("Counter-1"), 
  "Counter-1-20..class" |> str("Counter"), 
  "Counter-1-20..label" |> label(ob("Counter-1"), 20), 
  "Counter-1-20..method" |> str("informObserver"), 
  "Counter-1-20.caller" |> ob("Counter-1"), 
  "Counter-1-21..class" |> str("ShepherdTask"), 
  "Counter-1-21..label" |> label(ob("Counter-1"), 21), 
  "Counter-1-21..method" |> str("newCounterValue"), 
  "Counter-1-21.caller" |> ob("Counter-1"), 
  "Counter-1-21.token" |> str("tasks"), 
  "Counter-1-21.val" |> int(4), 
  "Counter-1-22..class" |> str("Counter"), 
  "Counter-1-22..label" |> label(ob("Counter-1"), 22), 
  "Counter-1-22..method" |> str("informObserver"), 
  "Counter-1-22.caller" |> ob("Counter-1"), 
  "Counter-1-23..class" |> str("ShepherdTask"), 
  "Counter-1-23..label" |> label(ob("Counter-1"), 23), 
  "Counter-1-23..method" |> str("newCounterValue"), 
  "Counter-1-23.caller" |> ob("Counter-1"), 
  "Counter-1-23.token" |> str("tasks"), 
  "Counter-1-23.val" |> int(5), 
  "Counter-1-24..class" |> str("Counter"), 
  "Counter-1-24..label" |> label(ob("Counter-1"), 24), 
  "Counter-1-24..method" |> str("informObserver"), 
  "Counter-1-24.caller" |> ob("Counter-1"), 
  "Counter-1-25..class" |> str("ShepherdTask"), 
  "Counter-1-25..label" |> label(ob("Counter-1"), 25), 
  "Counter-1-25..method" |> str("newCounterValue"), 
  "Counter-1-25.caller" |> ob("Counter-1"), 
  "Counter-1-25.token" |> str("tasks"), 
  "Counter-1-25.val" |> int(4), 
  "Counter-1-26..class" |> str("Counter"), 
  "Counter-1-26..label" |> label(ob("Counter-1"), 26), 
  "Counter-1-26..method" |> str("informObserver"), 
  "Counter-1-26.caller" |> ob("Counter-1"), 
  "Counter-1-27..class" |> str("ShepherdTask"), 
  "Counter-1-27..label" |> label(ob("Counter-1"), 27), 
  "Counter-1-27..method" |> str("newCounterValue"), 
  "Counter-1-27.caller" |> ob("Counter-1"), 
  "Counter-1-27.token" |> str("tasks"), 
  "Counter-1-27.val" |> int(5), 
  "Counter-1-28..class" |> str("Counter"), 
  "Counter-1-28..label" |> label(ob("Counter-1"), 28), 
  "Counter-1-28..method" |> str("informObserver"), 
  "Counter-1-28.caller" |> ob("Counter-1"), 
  "Counter-1-29..class" |> str("ShepherdTask"), 
  "Counter-1-29..label" |> label(ob("Counter-1"), 29), 
  "Counter-1-29..method" |> str("newCounterValue"), 
  "Counter-1-29.caller" |> ob("Counter-1"), 
  "Counter-1-29.token" |> str("tasks"), 
  "Counter-1-29.val" |> int(6), 
  "Counter-1-3..class" |> str("ShepherdTask"), 
  "Counter-1-3..label" |> label(ob("Counter-1"), 3), 
  "Counter-1-3..method" |> str("newCounterValue"), 
  "Counter-1-3.caller" |> ob("Counter-1"), 
  "Counter-1-3.token" |> str("tasks"), 
  "Counter-1-3.val" |> int(1), 
  "Counter-1-30..class" |> str("Counter"), 
  "Counter-1-30..label" |> label(ob("Counter-1"), 30), 
  "Counter-1-30..method" |> str("informObserver"), 
  "Counter-1-30.caller" |> ob("Counter-1"), 
  "Counter-1-31..class" |> str("ShepherdTask"), 
  "Counter-1-31..label" |> label(ob("Counter-1"), 31), 
  "Counter-1-31..method" |> str("newCounterValue"), 
  "Counter-1-31.caller" |> ob("Counter-1"), 
  "Counter-1-31.token" |> str("tasks"), 
  "Counter-1-31.val" |> int(7), 
  "Counter-1-32..class" |> str("Counter"), 
  "Counter-1-32..label" |> label(ob("Counter-1"), 32), 
  "Counter-1-32..method" |> str("informObserver"), 
  "Counter-1-32.caller" |> ob("Counter-1"), 
  "Counter-1-33..class" |> str("ShepherdTask"), 
  "Counter-1-33..label" |> label(ob("Counter-1"), 33), 
  "Counter-1-33..method" |> str("newCounterValue"), 
  "Counter-1-33.caller" |> ob("Counter-1"), 
  "Counter-1-33.token" |> str("tasks"), 
  "Counter-1-33.val" |> int(6), 
  "Counter-1-34..class" |> str("Counter"), 
  "Counter-1-34..label" |> label(ob("Counter-1"), 34), 
  "Counter-1-34..method" |> str("informObserver"), 
  "Counter-1-34.caller" |> ob("Counter-1"), 
  "Counter-1-35..class" |> str("ShepherdTask"), 
  "Counter-1-35..label" |> label(ob("Counter-1"), 35), 
  "Counter-1-35..method" |> str("newCounterValue"), 
  "Counter-1-35.caller" |> ob("Counter-1"), 
  "Counter-1-35.token" |> str("tasks"), 
  "Counter-1-35.val" |> int(5), 
  "Counter-1-36..class" |> str("Counter"), 
  "Counter-1-36..label" |> label(ob("Counter-1"), 36), 
  "Counter-1-36..method" |> str("informObserver"), 
  "Counter-1-36.caller" |> ob("Counter-1"), 
  "Counter-1-37..class" |> str("ShepherdTask"), 
  "Counter-1-37..label" |> label(ob("Counter-1"), 37), 
  "Counter-1-37..method" |> str("newCounterValue"), 
  "Counter-1-37.caller" |> ob("Counter-1"), 
  "Counter-1-37.token" |> str("tasks"), 
  "Counter-1-37.val" |> int(4), 
  "Counter-1-38..class" |> str("Counter"), 
  "Counter-1-38..label" |> label(ob("Counter-1"), 38), 
  "Counter-1-38..method" |> str("informObserver"), 
  "Counter-1-38.caller" |> ob("Counter-1"), 
  "Counter-1-39..class" |> str("ShepherdTask"), 
  "Counter-1-39..label" |> label(ob("Counter-1"), 39), 
  "Counter-1-39..method" |> str("newCounterValue"), 
  "Counter-1-39.caller" |> ob("Counter-1"), 
  "Counter-1-39.token" |> str("tasks"), 
  "Counter-1-39.val" |> int(3), 
  "Counter-1-4..class" |> str("Counter"), 
  "Counter-1-4..label" |> label(ob("Counter-1"), 4), 
  "Counter-1-4..method" |> str("informObserver"), 
  "Counter-1-4.caller" |> ob("Counter-1"), 
  "Counter-1-40..class" |> str("Counter"), 
  "Counter-1-40..label" |> label(ob("Counter-1"), 40), 
  "Counter-1-40..method" |> str("informObserver"), 
  "Counter-1-40.caller" |> ob("Counter-1"), 
  "Counter-1-41..class" |> str("ShepherdTask"), 
  "Counter-1-41..label" |> label(ob("Counter-1"), 41), 
  "Counter-1-41..method" |> str("newCounterValue"), 
  "Counter-1-41.caller" |> ob("Counter-1"), 
  "Counter-1-41.token" |> str("tasks"), 
  "Counter-1-41.val" |> int(2), 
  "Counter-1-42..class" |> str("Counter"), 
  "Counter-1-42..label" |> label(ob("Counter-1"), 42), 
  "Counter-1-42..method" |> str("informObserver"), 
  "Counter-1-42.caller" |> ob("Counter-1"), 
  "Counter-1-43..class" |> str("ShepherdTask"), 
  "Counter-1-43..label" |> label(ob("Counter-1"), 43), 
  "Counter-1-43..method" |> str("newCounterValue"), 
  "Counter-1-43.caller" |> ob("Counter-1"), 
  "Counter-1-43.token" |> str("tasks"), 
  "Counter-1-43.val" |> int(1), 
  "Counter-1-44..class" |> str("Counter"), 
  "Counter-1-44..label" |> label(ob("Counter-1"), 44), 
  "Counter-1-44..method" |> str("informObserver"), 
  "Counter-1-44.caller" |> ob("Counter-1"), 
  "Counter-1-45..class" |> str("ShepherdTask"), 
  "Counter-1-45..label" |> label(ob("Counter-1"), 45), 
  "Counter-1-45..method" |> str("newCounterValue"), 
  "Counter-1-45.caller" |> ob("Counter-1"), 
  "Counter-1-45.token" |> str("tasks"), 
  "Counter-1-45.val" |> int(0), 
  "Counter-1-5..class" |> str("ShepherdTask"), 
  "Counter-1-5..label" |> label(ob("Counter-1"), 5), 
  "Counter-1-5..method" |> str("newCounterValue"), 
  "Counter-1-5.caller" |> ob("Counter-1"), 
  "Counter-1-5.token" |> str("tasks"), 
  "Counter-1-5.val" |> int(0), 
  "Counter-1-6..class" |> str("Counter"), 
  "Counter-1-6..label" |> label(ob("Counter-1"), 6), 
  "Counter-1-6..method" |> str("informObserver"), 
  "Counter-1-6.caller" |> ob("Counter-1"), 
  "Counter-1-7..class" |> str("ShepherdTask"), 
  "Counter-1-7..label" |> label(ob("Counter-1"), 7), 
  "Counter-1-7..method" |> str("newCounterValue"), 
  "Counter-1-7.caller" |> ob("Counter-1"), 
  "Counter-1-7.token" |> str("tasks"), 
  "Counter-1-7.val" |> int(1), 
  "Counter-1-8..class" |> str("Counter"), 
  "Counter-1-8..label" |> label(ob("Counter-1"), 8), 
  "Counter-1-8..method" |> str("informObserver"), 
  "Counter-1-8.caller" |> ob("Counter-1"), 
  "Counter-1-9..class" |> str("ShepherdTask"), 
  "Counter-1-9..label" |> label(ob("Counter-1"), 9), 
  "Counter-1-9..method" |> str("newCounterValue"), 
  "Counter-1-9.caller" |> ob("Counter-1"), 
  "Counter-1-9.token" |> str("tasks"), 
  "Counter-1-9.val" |> int(0), 
  "Counter-1.observer" |> ob("ShepherdTask-0"), 
  "Counter-1.observertoken" |> str("tasks"), 
  "Counter-1.this" |> ob("Counter-1"), 
  "Counter-1.value" |> int(0), 
  "Counter-2-0..class" |> str("Counter"), 
  "Counter-2-0..label" |> label(ob("Counter-2"), 0), 
  "Counter-2-0..method" |> str("init"), 
  "Counter-2-0.caller" |> ob("Counter-2"), 
  "Counter-2-1..class" |> str("Counter"), 
  "Counter-2-1..label" |> label(ob("Counter-2"), 1), 
  "Counter-2-1..method" |> str("run"), 
  "Counter-2-1.caller" |> ob("Counter-2"), 
  "Counter-2-2..class" |> str("Counter"), 
  "Counter-2-2..label" |> label(ob("Counter-2"), 2), 
  "Counter-2-2..method" |> str("informObserver"), 
  "Counter-2-2.caller" |> ob("Counter-2"), 
  "Counter-2-3..class" |> str("Counter"), 
  "Counter-2-3..label" |> label(ob("Counter-2"), 3), 
  "Counter-2-3..method" |> str("informObserver"), 
  "Counter-2-3.caller" |> ob("Counter-2"), 
  "Counter-2.observer" |> ob("ShepherdTask-0"), 
  "Counter-2.observertoken" |> str("threads"), 
  "Counter-2.this" |> ob("Counter-2"), 
  "Counter-2.value" |> int(2), 
  "Counter-3-0..class" |> str("Counter"), 
  "Counter-3-0..label" |> label(ob("Counter-3"), 0), 
  "Counter-3-0..method" |> str("init"), 
  "Counter-3-0.caller" |> ob("Counter-3"), 
  "Counter-3-1..class" |> str("Counter"), 
  "Counter-3-1..label" |> label(ob("Counter-3"), 1), 
  "Counter-3-1..method" |> str("run"), 
  "Counter-3-1.caller" |> ob("Counter-3"), 
  "Counter-3-10..class" |> str("Counter"), 
  "Counter-3-10..label" |> label(ob("Counter-3"), 10), 
  "Counter-3-10..method" |> str("informObserver"), 
  "Counter-3-10.caller" |> ob("Counter-3"), 
  "Counter-3-11..class" |> str("ShepherdTask"), 
  "Counter-3-11..label" |> label(ob("Counter-3"), 11), 
  "Counter-3-11..method" |> str("newCounterValue"), 
  "Counter-3-11.caller" |> ob("Counter-3"), 
  "Counter-3-11.token" |> str("busythreads"), 
  "Counter-3-11.val" |> int(1), 
  "Counter-3-12..class" |> str("Counter"), 
  "Counter-3-12..label" |> label(ob("Counter-3"), 12), 
  "Counter-3-12..method" |> str("informObserver"), 
  "Counter-3-12.caller" |> ob("Counter-3"), 
  "Counter-3-13..class" |> str("ShepherdTask"), 
  "Counter-3-13..label" |> label(ob("Counter-3"), 13), 
  "Counter-3-13..method" |> str("newCounterValue"), 
  "Counter-3-13.caller" |> ob("Counter-3"), 
  "Counter-3-13.token" |> str("busythreads"), 
  "Counter-3-13.val" |> int(2), 
  "Counter-3-14..class" |> str("Counter"), 
  "Counter-3-14..label" |> label(ob("Counter-3"), 14), 
  "Counter-3-14..method" |> str("informObserver"), 
  "Counter-3-14.caller" |> ob("Counter-3"), 
  "Counter-3-15..class" |> str("ShepherdTask"), 
  "Counter-3-15..label" |> label(ob("Counter-3"), 15), 
  "Counter-3-15..method" |> str("newCounterValue"), 
  "Counter-3-15.caller" |> ob("Counter-3"), 
  "Counter-3-15.token" |> str("busythreads"), 
  "Counter-3-15.val" |> int(1), 
  "Counter-3-16..class" |> str("Counter"), 
  "Counter-3-16..label" |> label(ob("Counter-3"), 16), 
  "Counter-3-16..method" |> str("informObserver"), 
  "Counter-3-16.caller" |> ob("Counter-3"), 
  "Counter-3-17..class" |> str("ShepherdTask"), 
  "Counter-3-17..label" |> label(ob("Counter-3"), 17), 
  "Counter-3-17..method" |> str("newCounterValue"), 
  "Counter-3-17.caller" |> ob("Counter-3"), 
  "Counter-3-17.token" |> str("busythreads"), 
  "Counter-3-17.val" |> int(2), 
  "Counter-3-18..class" |> str("Counter"), 
  "Counter-3-18..label" |> label(ob("Counter-3"), 18), 
  "Counter-3-18..method" |> str("informObserver"), 
  "Counter-3-18.caller" |> ob("Counter-3"), 
  "Counter-3-19..class" |> str("ShepherdTask"), 
  "Counter-3-19..label" |> label(ob("Counter-3"), 19), 
  "Counter-3-19..method" |> str("newCounterValue"), 
  "Counter-3-19.caller" |> ob("Counter-3"), 
  "Counter-3-19.token" |> str("busythreads"), 
  "Counter-3-19.val" |> int(1), 
  "Counter-3-2..class" |> str("Counter"), 
  "Counter-3-2..label" |> label(ob("Counter-3"), 2), 
  "Counter-3-2..method" |> str("informObserver"), 
  "Counter-3-2.caller" |> ob("Counter-3"), 
  "Counter-3-20..class" |> str("Counter"), 
  "Counter-3-20..label" |> label(ob("Counter-3"), 20), 
  "Counter-3-20..method" |> str("informObserver"), 
  "Counter-3-20.caller" |> ob("Counter-3"), 
  "Counter-3-21..class" |> str("ShepherdTask"), 
  "Counter-3-21..label" |> label(ob("Counter-3"), 21), 
  "Counter-3-21..method" |> str("newCounterValue"), 
  "Counter-3-21.caller" |> ob("Counter-3"), 
  "Counter-3-21.token" |> str("busythreads"), 
  "Counter-3-21.val" |> int(2), 
  "Counter-3-22..class" |> str("Counter"), 
  "Counter-3-22..label" |> label(ob("Counter-3"), 22), 
  "Counter-3-22..method" |> str("informObserver"), 
  "Counter-3-22.caller" |> ob("Counter-3"), 
  "Counter-3-23..class" |> str("ShepherdTask"), 
  "Counter-3-23..label" |> label(ob("Counter-3"), 23), 
  "Counter-3-23..method" |> str("newCounterValue"), 
  "Counter-3-23.caller" |> ob("Counter-3"), 
  "Counter-3-23.token" |> str("busythreads"), 
  "Counter-3-23.val" |> int(1), 
  "Counter-3-24..class" |> str("Counter"), 
  "Counter-3-24..label" |> label(ob("Counter-3"), 24), 
  "Counter-3-24..method" |> str("informObserver"), 
  "Counter-3-24.caller" |> ob("Counter-3"), 
  "Counter-3-25..class" |> str("ShepherdTask"), 
  "Counter-3-25..label" |> label(ob("Counter-3"), 25), 
  "Counter-3-25..method" |> str("newCounterValue"), 
  "Counter-3-25.caller" |> ob("Counter-3"), 
  "Counter-3-25.token" |> str("busythreads"), 
  "Counter-3-25.val" |> int(2), 
  "Counter-3-26..class" |> str("Counter"), 
  "Counter-3-26..label" |> label(ob("Counter-3"), 26), 
  "Counter-3-26..method" |> str("informObserver"), 
  "Counter-3-26.caller" |> ob("Counter-3"), 
  "Counter-3-27..class" |> str("ShepherdTask"), 
  "Counter-3-27..label" |> label(ob("Counter-3"), 27), 
  "Counter-3-27..method" |> str("newCounterValue"), 
  "Counter-3-27.caller" |> ob("Counter-3"), 
  "Counter-3-27.token" |> str("busythreads"), 
  "Counter-3-27.val" |> int(1), 
  "Counter-3-28..class" |> str("Counter"), 
  "Counter-3-28..label" |> label(ob("Counter-3"), 28), 
  "Counter-3-28..method" |> str("informObserver"), 
  "Counter-3-28.caller" |> ob("Counter-3"), 
  "Counter-3-29..class" |> str("ShepherdTask"), 
  "Counter-3-29..label" |> label(ob("Counter-3"), 29), 
  "Counter-3-29..method" |> str("newCounterValue"), 
  "Counter-3-29.caller" |> ob("Counter-3"), 
  "Counter-3-29.token" |> str("busythreads"), 
  "Counter-3-29.val" |> int(2), 
  "Counter-3-3..class" |> str("ShepherdTask"), 
  "Counter-3-3..label" |> label(ob("Counter-3"), 3), 
  "Counter-3-3..method" |> str("newCounterValue"), 
  "Counter-3-3.caller" |> ob("Counter-3"), 
  "Counter-3-3.token" |> str("busythreads"), 
  "Counter-3-3.val" |> int(1), 
  "Counter-3-30..class" |> str("Counter"), 
  "Counter-3-30..label" |> label(ob("Counter-3"), 30), 
  "Counter-3-30..method" |> str("informObserver"), 
  "Counter-3-30.caller" |> ob("Counter-3"), 
  "Counter-3-31..class" |> str("ShepherdTask"), 
  "Counter-3-31..label" |> label(ob("Counter-3"), 31), 
  "Counter-3-31..method" |> str("newCounterValue"), 
  "Counter-3-31.caller" |> ob("Counter-3"), 
  "Counter-3-31.token" |> str("busythreads"), 
  "Counter-3-31.val" |> int(1), 
  "Counter-3-32..class" |> str("Counter"), 
  "Counter-3-32..label" |> label(ob("Counter-3"), 32), 
  "Counter-3-32..method" |> str("informObserver"), 
  "Counter-3-32.caller" |> ob("Counter-3"), 
  "Counter-3-33..class" |> str("ShepherdTask"), 
  "Counter-3-33..label" |> label(ob("Counter-3"), 33), 
  "Counter-3-33..method" |> str("newCounterValue"), 
  "Counter-3-33.caller" |> ob("Counter-3"), 
  "Counter-3-33.token" |> str("busythreads"), 
  "Counter-3-33.val" |> int(2), 
  "Counter-3-34..class" |> str("Counter"), 
  "Counter-3-34..label" |> label(ob("Counter-3"), 34), 
  "Counter-3-34..method" |> str("informObserver"), 
  "Counter-3-34.caller" |> ob("Counter-3"), 
  "Counter-3-35..class" |> str("ShepherdTask"), 
  "Counter-3-35..label" |> label(ob("Counter-3"), 35), 
  "Counter-3-35..method" |> str("newCounterValue"), 
  "Counter-3-35.caller" |> ob("Counter-3"), 
  "Counter-3-35.token" |> str("busythreads"), 
  "Counter-3-35.val" |> int(1), 
  "Counter-3-36..class" |> str("Counter"), 
  "Counter-3-36..label" |> label(ob("Counter-3"), 36), 
  "Counter-3-36..method" |> str("informObserver"), 
  "Counter-3-36.caller" |> ob("Counter-3"), 
  "Counter-3-37..class" |> str("ShepherdTask"), 
  "Counter-3-37..label" |> label(ob("Counter-3"), 37), 
  "Counter-3-37..method" |> str("newCounterValue"), 
  "Counter-3-37.caller" |> ob("Counter-3"), 
  "Counter-3-37.token" |> str("busythreads"), 
  "Counter-3-37.val" |> int(2), 
  "Counter-3-38..class" |> str("Counter"), 
  "Counter-3-38..label" |> label(ob("Counter-3"), 38), 
  "Counter-3-38..method" |> str("informObserver"), 
  "Counter-3-38.caller" |> ob("Counter-3"), 
  "Counter-3-39..class" |> str("ShepherdTask"), 
  "Counter-3-39..label" |> label(ob("Counter-3"), 39), 
  "Counter-3-39..method" |> str("newCounterValue"), 
  "Counter-3-39.caller" |> ob("Counter-3"), 
  "Counter-3-39.token" |> str("busythreads"), 
  "Counter-3-39.val" |> int(1), 
  "Counter-3-4..class" |> str("Counter"), 
  "Counter-3-4..label" |> label(ob("Counter-3"), 4), 
  "Counter-3-4..method" |> str("informObserver"), 
  "Counter-3-4.caller" |> ob("Counter-3"), 
  "Counter-3-40..class" |> str("Counter"), 
  "Counter-3-40..label" |> label(ob("Counter-3"), 40), 
  "Counter-3-40..method" |> str("informObserver"), 
  "Counter-3-40.caller" |> ob("Counter-3"), 
  "Counter-3-41..class" |> str("ShepherdTask"), 
  "Counter-3-41..label" |> label(ob("Counter-3"), 41), 
  "Counter-3-41..method" |> str("newCounterValue"), 
  "Counter-3-41.caller" |> ob("Counter-3"), 
  "Counter-3-41.token" |> str("busythreads"), 
  "Counter-3-41.val" |> int(2), 
  "Counter-3-42..class" |> str("Counter"), 
  "Counter-3-42..label" |> label(ob("Counter-3"), 42), 
  "Counter-3-42..method" |> str("informObserver"), 
  "Counter-3-42.caller" |> ob("Counter-3"), 
  "Counter-3-43..class" |> str("ShepherdTask"), 
  "Counter-3-43..label" |> label(ob("Counter-3"), 43), 
  "Counter-3-43..method" |> str("newCounterValue"), 
  "Counter-3-43.caller" |> ob("Counter-3"), 
  "Counter-3-43.token" |> str("busythreads"), 
  "Counter-3-43.val" |> int(1), 
  "Counter-3-5..class" |> str("ShepherdTask"), 
  "Counter-3-5..label" |> label(ob("Counter-3"), 5), 
  "Counter-3-5..method" |> str("newCounterValue"), 
  "Counter-3-5.caller" |> ob("Counter-3"), 
  "Counter-3-5.token" |> str("busythreads"), 
  "Counter-3-5.val" |> int(2), 
  "Counter-3-6..class" |> str("Counter"), 
  "Counter-3-6..label" |> label(ob("Counter-3"), 6), 
  "Counter-3-6..method" |> str("informObserver"), 
  "Counter-3-6.caller" |> ob("Counter-3"), 
  "Counter-3-7..class" |> str("ShepherdTask"), 
  "Counter-3-7..label" |> label(ob("Counter-3"), 7), 
  "Counter-3-7..method" |> str("newCounterValue"), 
  "Counter-3-7.caller" |> ob("Counter-3"), 
  "Counter-3-7.token" |> str("busythreads"), 
  "Counter-3-7.val" |> int(1), 
  "Counter-3-8..class" |> str("Counter"), 
  "Counter-3-8..label" |> label(ob("Counter-3"), 8), 
  "Counter-3-8..method" |> str("informObserver"), 
  "Counter-3-8.caller" |> ob("Counter-3"), 
  "Counter-3-9..class" |> str("ShepherdTask"), 
  "Counter-3-9..label" |> label(ob("Counter-3"), 9), 
  "Counter-3-9..method" |> str("newCounterValue"), 
  "Counter-3-9.caller" |> ob("Counter-3"), 
  "Counter-3-9.token" |> str("busythreads"), 
  "Counter-3-9.val" |> int(2), 
  "Counter-3.observer" |> ob("ShepherdTask-0"), 
  "Counter-3.observertoken" |> str("busythreads"), 
  "Counter-3.this" |> ob("Counter-3"), 
  "Counter-3.value" |> int(1), 
  "CounterTask-0-0..class" |> str("CounterTask"), 
  "CounterTask-0-0..label" |> label(ob("CounterTask-0"), 0), 
  "CounterTask-0-0..method" |> str("init"), 
  "CounterTask-0-0.caller" |> ob("CounterTask-0"), 
  "CounterTask-0-1..class" |> str("CounterTask"), 
  "CounterTask-0-1..label" |> label(ob("CounterTask-0"), 1), 
  "CounterTask-0-1..method" |> str("run"), 
  "CounterTask-0-1.caller" |> ob("CounterTask-0"), 
  "CounterTask-0-2..class" |> str("Counter"), 
  "CounterTask-0-2..label" |> label(ob("CounterTask-0"), 2), 
  "CounterTask-0-2..method" |> str("inc"), 
  "CounterTask-0-2.caller" |> ob("CounterTask-0"), 
  "CounterTask-0.myCounter" |> ob("Counter-0"), 
  "CounterTask-0.taskId" |> int(0), 
  "CounterTask-0.this" |> ob("CounterTask-0"), 
  "CounterTask-1-0..class" |> str("CounterTask"), 
  "CounterTask-1-0..label" |> label(ob("CounterTask-1"), 0), 
  "CounterTask-1-0..method" |> str("init"), 
  "CounterTask-1-0.caller" |> ob("CounterTask-1"), 
  "CounterTask-1-1..class" |> str("CounterTask"), 
  "CounterTask-1-1..label" |> label(ob("CounterTask-1"), 1), 
  "CounterTask-1-1..method" |> str("run"), 
  "CounterTask-1-1.caller" |> ob("CounterTask-1"), 
  "CounterTask-1-2..class" |> str("Counter"), 
  "CounterTask-1-2..label" |> label(ob("CounterTask-1"), 2), 
  "CounterTask-1-2..method" |> str("inc"), 
  "CounterTask-1-2.caller" |> ob("CounterTask-1"), 
  "CounterTask-1.myCounter" |> ob("Counter-0"), 
  "CounterTask-1.taskId" |> int(1), 
  "CounterTask-1.this" |> ob("CounterTask-1"), 
  "CounterTask-2-0..class" |> str("CounterTask"), 
  "CounterTask-2-0..label" |> label(ob("CounterTask-2"), 0), 
  "CounterTask-2-0..method" |> str("init"), 
  "CounterTask-2-0.caller" |> ob("CounterTask-2"), 
  "CounterTask-2-1..class" |> str("CounterTask"), 
  "CounterTask-2-1..label" |> label(ob("CounterTask-2"), 1), 
  "CounterTask-2-1..method" |> str("run"), 
  "CounterTask-2-1.caller" |> ob("CounterTask-2"), 
  "CounterTask-2-2..class" |> str("Counter"), 
  "CounterTask-2-2..label" |> label(ob("CounterTask-2"), 2), 
  "CounterTask-2-2..method" |> str("inc"), 
  "CounterTask-2-2.caller" |> ob("CounterTask-2"), 
  "CounterTask-2.myCounter" |> ob("Counter-0"), 
  "CounterTask-2.taskId" |> int(2), 
  "CounterTask-2.this" |> ob("CounterTask-2"), 
  "CounterTask-3-0..class" |> str("CounterTask"), 
  "CounterTask-3-0..label" |> label(ob("CounterTask-3"), 0), 
  "CounterTask-3-0..method" |> str("init"), 
  "CounterTask-3-0.caller" |> ob("CounterTask-3"), 
  "CounterTask-3-1..class" |> str("CounterTask"), 
  "CounterTask-3-1..label" |> label(ob("CounterTask-3"), 1), 
  "CounterTask-3-1..method" |> str("run"), 
  "CounterTask-3-1.caller" |> ob("CounterTask-3"), 
  "CounterTask-3-2..class" |> str("Counter"), 
  "CounterTask-3-2..label" |> label(ob("CounterTask-3"), 2), 
  "CounterTask-3-2..method" |> str("inc"), 
  "CounterTask-3-2.caller" |> ob("CounterTask-3"), 
  "CounterTask-3.myCounter" |> ob("Counter-0"), 
  "CounterTask-3.taskId" |> int(3), 
  "CounterTask-3.this" |> ob("CounterTask-3"), 
  "CounterTask-4-0..class" |> str("CounterTask"), 
  "CounterTask-4-0..label" |> label(ob("CounterTask-4"), 0), 
  "CounterTask-4-0..method" |> str("init"), 
  "CounterTask-4-0.caller" |> ob("CounterTask-4"), 
  "CounterTask-4-1..class" |> str("CounterTask"), 
  "CounterTask-4-1..label" |> label(ob("CounterTask-4"), 1), 
  "CounterTask-4-1..method" |> str("run"), 
  "CounterTask-4-1.caller" |> ob("CounterTask-4"), 
  "CounterTask-4-2..class" |> str("Counter"), 
  "CounterTask-4-2..label" |> label(ob("CounterTask-4"), 2), 
  "CounterTask-4-2..method" |> str("inc"), 
  "CounterTask-4-2.caller" |> ob("CounterTask-4"), 
  "CounterTask-4.myCounter" |> ob("Counter-0"), 
  "CounterTask-4.taskId" |> int(4), 
  "CounterTask-4.this" |> ob("CounterTask-4"), 
  "CounterTask-5-0..class" |> str("CounterTask"), 
  "CounterTask-5-0..label" |> label(ob("CounterTask-5"), 0), 
  "CounterTask-5-0..method" |> str("init"), 
  "CounterTask-5-0.caller" |> ob("CounterTask-5"), 
  "CounterTask-5-1..class" |> str("CounterTask"), 
  "CounterTask-5-1..label" |> label(ob("CounterTask-5"), 1), 
  "CounterTask-5-1..method" |> str("run"), 
  "CounterTask-5-1.caller" |> ob("CounterTask-5"), 
  "CounterTask-5-2..class" |> str("Counter"), 
  "CounterTask-5-2..label" |> label(ob("CounterTask-5"), 2), 
  "CounterTask-5-2..method" |> str("inc"), 
  "CounterTask-5-2.caller" |> ob("CounterTask-5"), 
  "CounterTask-5.myCounter" |> ob("Counter-0"), 
  "CounterTask-5.taskId" |> int(5), 
  "CounterTask-5.this" |> ob("CounterTask-5"), 
  "CounterTask-6-0..class" |> str("CounterTask"), 
  "CounterTask-6-0..label" |> label(ob("CounterTask-6"), 0), 
  "CounterTask-6-0..method" |> str("init"), 
  "CounterTask-6-0.caller" |> ob("CounterTask-6"), 
  "CounterTask-6-1..class" |> str("CounterTask"), 
  "CounterTask-6-1..label" |> label(ob("CounterTask-6"), 1), 
  "CounterTask-6-1..method" |> str("run"), 
  "CounterTask-6-1.caller" |> ob("CounterTask-6"), 
  "CounterTask-6-2..class" |> str("Counter"), 
  "CounterTask-6-2..label" |> label(ob("CounterTask-6"), 2), 
  "CounterTask-6-2..method" |> str("inc"), 
  "CounterTask-6-2.caller" |> ob("CounterTask-6"), 
  "CounterTask-6.myCounter" |> ob("Counter-0"), 
  "CounterTask-6.taskId" |> int(6), 
  "CounterTask-6.this" |> ob("CounterTask-6"), 
  "CounterTask-7-0..class" |> str("CounterTask"), 
  "CounterTask-7-0..label" |> label(ob("CounterTask-7"), 0), 
  "CounterTask-7-0..method" |> str("init"), 
  "CounterTask-7-0.caller" |> ob("CounterTask-7"), 
  "CounterTask-7-1..class" |> str("CounterTask"), 
  "CounterTask-7-1..label" |> label(ob("CounterTask-7"), 1), 
  "CounterTask-7-1..method" |> str("run"), 
  "CounterTask-7-1.caller" |> ob("CounterTask-7"), 
  "CounterTask-7-2..class" |> str("Counter"), 
  "CounterTask-7-2..label" |> label(ob("CounterTask-7"), 2), 
  "CounterTask-7-2..method" |> str("inc"), 
  "CounterTask-7-2.caller" |> ob("CounterTask-7"), 
  "CounterTask-7.myCounter" |> ob("Counter-0"), 
  "CounterTask-7.taskId" |> int(7), 
  "CounterTask-7.this" |> ob("CounterTask-7"), 
  "CounterTask-8-0..class" |> str("CounterTask"), 
  "CounterTask-8-0..label" |> label(ob("CounterTask-8"), 0), 
  "CounterTask-8-0..method" |> str("init"), 
  "CounterTask-8-0.caller" |> ob("CounterTask-8"), 
  "CounterTask-8-1..class" |> str("CounterTask"), 
  "CounterTask-8-1..label" |> label(ob("CounterTask-8"), 1), 
  "CounterTask-8-1..method" |> str("run"), 
  "CounterTask-8-1.caller" |> ob("CounterTask-8"), 
  "CounterTask-8-2..class" |> str("Counter"), 
  "CounterTask-8-2..label" |> label(ob("CounterTask-8"), 2), 
  "CounterTask-8-2..method" |> str("inc"), 
  "CounterTask-8-2.caller" |> ob("CounterTask-8"), 
  "CounterTask-8.myCounter" |> ob("Counter-0"), 
  "CounterTask-8.taskId" |> int(8), 
  "CounterTask-8.this" |> ob("CounterTask-8"), 
  "CounterTask-9-0..class" |> str("CounterTask"), 
  "CounterTask-9-0..label" |> label(ob("CounterTask-9"), 0), 
  "CounterTask-9-0..method" |> str("init"), 
  "CounterTask-9-0.caller" |> ob("CounterTask-9"), 
  "CounterTask-9-1..class" |> str("CounterTask"), 
  "CounterTask-9-1..label" |> label(ob("CounterTask-9"), 1), 
  "CounterTask-9-1..method" |> str("run"), 
  "CounterTask-9-1.caller" |> ob("CounterTask-9"), 
  "CounterTask-9-2..class" |> str("Counter"), 
  "CounterTask-9-2..label" |> label(ob("CounterTask-9"), 2), 
  "CounterTask-9-2..method" |> str("inc"), 
  "CounterTask-9-2.caller" |> ob("CounterTask-9"), 
  "CounterTask-9.myCounter" |> ob("Counter-0"), 
  "CounterTask-9.taskId" |> int(9), 
  "CounterTask-9.this" |> ob("CounterTask-9"), 
  "Main-0-0..class" |> str("Main"), 
  "Main-0-0..label" |> label(ob("Main-0"), 0), 
  "Main-0-0..method" |> str("init"), 
  "Main-0-0.caller" |> ob("Main-0"), 
  "Main-0-11..class" |> str("Abbey"), 
  "Main-0-11..label" |> label(ob("Main-0"), 11), 
  "Main-0-11..method" |> str("dispatchTask"), 
  "Main-0-11.caller" |> ob("Main-0"), 
  "Main-0-11.task" |> ob("CounterTask-3"), 
  "Main-0-13..class" |> str("Abbey"), 
  "Main-0-13..label" |> label(ob("Main-0"), 13), 
  "Main-0-13..method" |> str("dispatchTask"), 
  "Main-0-13.caller" |> ob("Main-0"), 
  "Main-0-13.task" |> ob("CounterTask-4"), 
  "Main-0-15..class" |> str("Abbey"), 
  "Main-0-15..label" |> label(ob("Main-0"), 15), 
  "Main-0-15..method" |> str("dispatchTask"), 
  "Main-0-15.caller" |> ob("Main-0"), 
  "Main-0-15.task" |> ob("CounterTask-5"), 
  "Main-0-17..class" |> str("Abbey"), 
  "Main-0-17..label" |> label(ob("Main-0"), 17), 
  "Main-0-17..method" |> str("dispatchTask"), 
  "Main-0-17.caller" |> ob("Main-0"), 
  "Main-0-17.task" |> ob("CounterTask-6"), 
  "Main-0-19..class" |> str("Abbey"), 
  "Main-0-19..label" |> label(ob("Main-0"), 19), 
  "Main-0-19..method" |> str("dispatchTask"), 
  "Main-0-19.caller" |> ob("Main-0"), 
  "Main-0-19.task" |> ob("CounterTask-7"), 
  "Main-0-21..class" |> str("Abbey"), 
  "Main-0-21..label" |> label(ob("Main-0"), 21), 
  "Main-0-21..method" |> str("dispatchTask"), 
  "Main-0-21.caller" |> ob("Main-0"), 
  "Main-0-21.task" |> ob("CounterTask-8"), 
  "Main-0-23..class" |> str("Abbey"), 
  "Main-0-23..label" |> label(ob("Main-0"), 23), 
  "Main-0-23..method" |> str("dispatchTask"), 
  "Main-0-23.caller" |> ob("Main-0"), 
  "Main-0-23.task" |> ob("CounterTask-9"), 
  "Main-0-3..class" |> str("Main"), 
  "Main-0-3..label" |> label(ob("Main-0"), 3), 
  "Main-0-3..method" |> str("run"), 
  "Main-0-3.caller" |> ob("Main-0"), 
  "Main-0-3.i" |> int(10), 
  "Main-0-3.task" |> ob("CounterTask-9"), 
  "Main-0-5..class" |> str("Abbey"), 
  "Main-0-5..label" |> label(ob("Main-0"), 5), 
  "Main-0-5..method" |> str("dispatchTask"), 
  "Main-0-5.caller" |> ob("Main-0"), 
  "Main-0-5.task" |> ob("CounterTask-0"), 
  "Main-0-7..class" |> str("Abbey"), 
  "Main-0-7..label" |> label(ob("Main-0"), 7), 
  "Main-0-7..method" |> str("dispatchTask"), 
  "Main-0-7.caller" |> ob("Main-0"), 
  "Main-0-7.task" |> ob("CounterTask-1"), 
  "Main-0-9..class" |> str("Abbey"), 
  "Main-0-9..label" |> label(ob("Main-0"), 9), 
  "Main-0-9..method" |> str("dispatchTask"), 
  "Main-0-9.caller" |> ob("Main-0"), 
  "Main-0-9.task" |> ob("CounterTask-2"), 
  "Main-0.executionCounter" |> ob("Counter-0"), 
  "Main-0.maxthreads_init" |> int(1), 
  "Main-0.nthreads_init" |> int(2), 
  "Main-0.this" |> ob("Main-0"), 
  "Main-0.threadpool" |> ob("Abbey-0"), 
  "Monk-0-0..class" |> str("Monk"), 
  "Monk-0-0..label" |> label(ob("Monk-0"), 0), 
  "Monk-0-0..method" |> str("init"), 
  "Monk-0-0.caller" |> ob("Monk-0"), 
  "Monk-0-1..class" |> str("Monk"), 
  "Monk-0-1..label" |> label(ob("Monk-0"), 1), 
  "Monk-0-1..method" |> str("run"), 
  "Monk-0-1.caller" |> ob("Monk-0"), 
  "Monk-0-2..class" |> str("TaskQueue"), 
  "Monk-0-2..label" |> label(ob("Monk-0"), 2), 
  "Monk-0-2..method" |> str("dequeueTask"), 
  "Monk-0-2.caller" |> ob("Monk-0"), 
  "Monk-0-2.task" |> ob("ShepherdTask-0"), 
  "Monk-0-3..class" |> str("Counter"), 
  "Monk-0-3..label" |> label(ob("Monk-0"), 3), 
  "Monk-0-3..method" |> str("inc"), 
  "Monk-0-3.caller" |> ob("Monk-0"), 
  "Monk-0-4..class" |> str("ShepherdTask"), 
  "Monk-0-4..label" |> label(ob("Monk-0"), 4), 
  "Monk-0-4..method" |> str("getId"), 
  "Monk-0-4.caller" |> ob("Monk-0"), 
  "Monk-0-4.id" |> int(1), 
  "Monk-0-5..class" |> str("ShepherdTask"), 
  "Monk-0-5..label" |> label(ob("Monk-0"), 5), 
  "Monk-0-5..method" |> str("execute"), 
  "Monk-0-5.caller" |> ob("Monk-0"), 
  "Monk-0.busyCounter" |> ob("Counter-3"), 
  "Monk-0.kill" |> bool(false), 
  "Monk-0.queue" |> ob("TaskQueue-0"), 
  "Monk-0.task" |> ob("ShepherdTask-0"), 
  "Monk-0.taskHistory" |> list(int(1)), 
  "Monk-0.taskId" |> int(1), 
  "Monk-0.this" |> ob("Monk-0"), 
  "Monk-0.threadCounter" |> ob("Counter-2"), 
  "Monk-1-0..class" |> str("Monk"), 
  "Monk-1-0..label" |> label(ob("Monk-1"), 0), 
  "Monk-1-0..method" |> str("init"), 
  "Monk-1-0.caller" |> ob("Monk-1"), 
  "Monk-1-1..class" |> str("Monk"), 
  "Monk-1-1..label" |> label(ob("Monk-1"), 1), 
  "Monk-1-1..method" |> str("run"), 
  "Monk-1-1.caller" |> ob("Monk-1"), 
  "Monk-1-10..class" |> str("CounterTask"), 
  "Monk-1-10..label" |> label(ob("Monk-1"), 10), 
  "Monk-1-10..method" |> str("getId"), 
  "Monk-1-10.caller" |> ob("Monk-1"), 
  "Monk-1-10.id" |> int(1), 
  "Monk-1-11..class" |> str("CounterTask"), 
  "Monk-1-11..label" |> label(ob("Monk-1"), 11), 
  "Monk-1-11..method" |> str("execute"), 
  "Monk-1-11.caller" |> ob("Monk-1"), 
  "Monk-1-11.kill" |> bool(false), 
  "Monk-1-12..class" |> str("Counter"), 
  "Monk-1-12..label" |> label(ob("Monk-1"), 12), 
  "Monk-1-12..method" |> str("dec"), 
  "Monk-1-12.caller" |> ob("Monk-1"), 
  "Monk-1-13..class" |> str("Monk"), 
  "Monk-1-13..label" |> label(ob("Monk-1"), 13), 
  "Monk-1-13..method" |> str("run"), 
  "Monk-1-13.caller" |> ob("Monk-1"), 
  "Monk-1-14..class" |> str("TaskQueue"), 
  "Monk-1-14..label" |> label(ob("Monk-1"), 14), 
  "Monk-1-14..method" |> str("dequeueTask"), 
  "Monk-1-14.caller" |> ob("Monk-1"), 
  "Monk-1-14.task" |> ob("CounterTask-2"), 
  "Monk-1-15..class" |> str("Counter"), 
  "Monk-1-15..label" |> label(ob("Monk-1"), 15), 
  "Monk-1-15..method" |> str("inc"), 
  "Monk-1-15.caller" |> ob("Monk-1"), 
  "Monk-1-16..class" |> str("CounterTask"), 
  "Monk-1-16..label" |> label(ob("Monk-1"), 16), 
  "Monk-1-16..method" |> str("getId"), 
  "Monk-1-16.caller" |> ob("Monk-1"), 
  "Monk-1-16.id" |> int(2), 
  "Monk-1-17..class" |> str("CounterTask"), 
  "Monk-1-17..label" |> label(ob("Monk-1"), 17), 
  "Monk-1-17..method" |> str("execute"), 
  "Monk-1-17.caller" |> ob("Monk-1"), 
  "Monk-1-17.kill" |> bool(false), 
  "Monk-1-18..class" |> str("Counter"), 
  "Monk-1-18..label" |> label(ob("Monk-1"), 18), 
  "Monk-1-18..method" |> str("dec"), 
  "Monk-1-18.caller" |> ob("Monk-1"), 
  "Monk-1-19..class" |> str("Monk"), 
  "Monk-1-19..label" |> label(ob("Monk-1"), 19), 
  "Monk-1-19..method" |> str("run"), 
  "Monk-1-19.caller" |> ob("Monk-1"), 
  "Monk-1-2..class" |> str("TaskQueue"), 
  "Monk-1-2..label" |> label(ob("Monk-1"), 2), 
  "Monk-1-2..method" |> str("dequeueTask"), 
  "Monk-1-2.caller" |> ob("Monk-1"), 
  "Monk-1-2.task" |> ob("CounterTask-0"), 
  "Monk-1-20..class" |> str("TaskQueue"), 
  "Monk-1-20..label" |> label(ob("Monk-1"), 20), 
  "Monk-1-20..method" |> str("dequeueTask"), 
  "Monk-1-20.caller" |> ob("Monk-1"), 
  "Monk-1-20.task" |> ob("CounterTask-3"), 
  "Monk-1-21..class" |> str("Counter"), 
  "Monk-1-21..label" |> label(ob("Monk-1"), 21), 
  "Monk-1-21..method" |> str("inc"), 
  "Monk-1-21.caller" |> ob("Monk-1"), 
  "Monk-1-22..class" |> str("CounterTask"), 
  "Monk-1-22..label" |> label(ob("Monk-1"), 22), 
  "Monk-1-22..method" |> str("getId"), 
  "Monk-1-22.caller" |> ob("Monk-1"), 
  "Monk-1-22.id" |> int(3), 
  "Monk-1-23..class" |> str("CounterTask"), 
  "Monk-1-23..label" |> label(ob("Monk-1"), 23), 
  "Monk-1-23..method" |> str("execute"), 
  "Monk-1-23.caller" |> ob("Monk-1"), 
  "Monk-1-23.kill" |> bool(false), 
  "Monk-1-24..class" |> str("Counter"), 
  "Monk-1-24..label" |> label(ob("Monk-1"), 24), 
  "Monk-1-24..method" |> str("dec"), 
  "Monk-1-24.caller" |> ob("Monk-1"), 
  "Monk-1-25..class" |> str("Monk"), 
  "Monk-1-25..label" |> label(ob("Monk-1"), 25), 
  "Monk-1-25..method" |> str("run"), 
  "Monk-1-25.caller" |> ob("Monk-1"), 
  "Monk-1-26..class" |> str("TaskQueue"), 
  "Monk-1-26..label" |> label(ob("Monk-1"), 26), 
  "Monk-1-26..method" |> str("dequeueTask"), 
  "Monk-1-26.caller" |> ob("Monk-1"), 
  "Monk-1-26.task" |> ob("CounterTask-4"), 
  "Monk-1-27..class" |> str("Counter"), 
  "Monk-1-27..label" |> label(ob("Monk-1"), 27), 
  "Monk-1-27..method" |> str("inc"), 
  "Monk-1-27.caller" |> ob("Monk-1"), 
  "Monk-1-28..class" |> str("CounterTask"), 
  "Monk-1-28..label" |> label(ob("Monk-1"), 28), 
  "Monk-1-28..method" |> str("getId"), 
  "Monk-1-28.caller" |> ob("Monk-1"), 
  "Monk-1-28.id" |> int(4), 
  "Monk-1-29..class" |> str("CounterTask"), 
  "Monk-1-29..label" |> label(ob("Monk-1"), 29), 
  "Monk-1-29..method" |> str("execute"), 
  "Monk-1-29.caller" |> ob("Monk-1"), 
  "Monk-1-29.kill" |> bool(false), 
  "Monk-1-3..class" |> str("Counter"), 
  "Monk-1-3..label" |> label(ob("Monk-1"), 3), 
  "Monk-1-3..method" |> str("inc"), 
  "Monk-1-3.caller" |> ob("Monk-1"), 
  "Monk-1-30..class" |> str("Counter"), 
  "Monk-1-30..label" |> label(ob("Monk-1"), 30), 
  "Monk-1-30..method" |> str("dec"), 
  "Monk-1-30.caller" |> ob("Monk-1"), 
  "Monk-1-31..class" |> str("Monk"), 
  "Monk-1-31..label" |> label(ob("Monk-1"), 31), 
  "Monk-1-31..method" |> str("run"), 
  "Monk-1-31.caller" |> ob("Monk-1"), 
  "Monk-1-32..class" |> str("TaskQueue"), 
  "Monk-1-32..label" |> label(ob("Monk-1"), 32), 
  "Monk-1-32..method" |> str("dequeueTask"), 
  "Monk-1-32.caller" |> ob("Monk-1"), 
  "Monk-1-32.task" |> ob("CounterTask-5"), 
  "Monk-1-33..class" |> str("Counter"), 
  "Monk-1-33..label" |> label(ob("Monk-1"), 33), 
  "Monk-1-33..method" |> str("inc"), 
  "Monk-1-33.caller" |> ob("Monk-1"), 
  "Monk-1-34..class" |> str("CounterTask"), 
  "Monk-1-34..label" |> label(ob("Monk-1"), 34), 
  "Monk-1-34..method" |> str("getId"), 
  "Monk-1-34.caller" |> ob("Monk-1"), 
  "Monk-1-34.id" |> int(5), 
  "Monk-1-35..class" |> str("CounterTask"), 
  "Monk-1-35..label" |> label(ob("Monk-1"), 35), 
  "Monk-1-35..method" |> str("execute"), 
  "Monk-1-35.caller" |> ob("Monk-1"), 
  "Monk-1-35.kill" |> bool(false), 
  "Monk-1-36..class" |> str("Counter"), 
  "Monk-1-36..label" |> label(ob("Monk-1"), 36), 
  "Monk-1-36..method" |> str("dec"), 
  "Monk-1-36.caller" |> ob("Monk-1"), 
  "Monk-1-37..class" |> str("Monk"), 
  "Monk-1-37..label" |> label(ob("Monk-1"), 37), 
  "Monk-1-37..method" |> str("run"), 
  "Monk-1-37.caller" |> ob("Monk-1"), 
  "Monk-1-38..class" |> str("TaskQueue"), 
  "Monk-1-38..label" |> label(ob("Monk-1"), 38), 
  "Monk-1-38..method" |> str("dequeueTask"), 
  "Monk-1-38.caller" |> ob("Monk-1"), 
  "Monk-1-38.task" |> ob("CounterTask-6"), 
  "Monk-1-39..class" |> str("Counter"), 
  "Monk-1-39..label" |> label(ob("Monk-1"), 39), 
  "Monk-1-39..method" |> str("inc"), 
  "Monk-1-39.caller" |> ob("Monk-1"), 
  "Monk-1-4..class" |> str("CounterTask"), 
  "Monk-1-4..label" |> label(ob("Monk-1"), 4), 
  "Monk-1-4..method" |> str("getId"), 
  "Monk-1-4.caller" |> ob("Monk-1"), 
  "Monk-1-4.id" |> int(0), 
  "Monk-1-40..class" |> str("CounterTask"), 
  "Monk-1-40..label" |> label(ob("Monk-1"), 40), 
  "Monk-1-40..method" |> str("getId"), 
  "Monk-1-40.caller" |> ob("Monk-1"), 
  "Monk-1-40.id" |> int(6), 
  "Monk-1-41..class" |> str("CounterTask"), 
  "Monk-1-41..label" |> label(ob("Monk-1"), 41), 
  "Monk-1-41..method" |> str("execute"), 
  "Monk-1-41.caller" |> ob("Monk-1"), 
  "Monk-1-41.kill" |> bool(false), 
  "Monk-1-42..class" |> str("Counter"), 
  "Monk-1-42..label" |> label(ob("Monk-1"), 42), 
  "Monk-1-42..method" |> str("dec"), 
  "Monk-1-42.caller" |> ob("Monk-1"), 
  "Monk-1-43..class" |> str("Monk"), 
  "Monk-1-43..label" |> label(ob("Monk-1"), 43), 
  "Monk-1-43..method" |> str("run"), 
  "Monk-1-43.caller" |> ob("Monk-1"), 
  "Monk-1-44..class" |> str("TaskQueue"), 
  "Monk-1-44..label" |> label(ob("Monk-1"), 44), 
  "Monk-1-44..method" |> str("dequeueTask"), 
  "Monk-1-44.caller" |> ob("Monk-1"), 
  "Monk-1-44.task" |> ob("CounterTask-7"), 
  "Monk-1-45..class" |> str("Counter"), 
  "Monk-1-45..label" |> label(ob("Monk-1"), 45), 
  "Monk-1-45..method" |> str("inc"), 
  "Monk-1-45.caller" |> ob("Monk-1"), 
  "Monk-1-46..class" |> str("CounterTask"), 
  "Monk-1-46..label" |> label(ob("Monk-1"), 46), 
  "Monk-1-46..method" |> str("getId"), 
  "Monk-1-46.caller" |> ob("Monk-1"), 
  "Monk-1-46.id" |> int(7), 
  "Monk-1-47..class" |> str("CounterTask"), 
  "Monk-1-47..label" |> label(ob("Monk-1"), 47), 
  "Monk-1-47..method" |> str("execute"), 
  "Monk-1-47.caller" |> ob("Monk-1"), 
  "Monk-1-47.kill" |> bool(false), 
  "Monk-1-48..class" |> str("Counter"), 
  "Monk-1-48..label" |> label(ob("Monk-1"), 48), 
  "Monk-1-48..method" |> str("dec"), 
  "Monk-1-48.caller" |> ob("Monk-1"), 
  "Monk-1-49..class" |> str("Monk"), 
  "Monk-1-49..label" |> label(ob("Monk-1"), 49), 
  "Monk-1-49..method" |> str("run"), 
  "Monk-1-49.caller" |> ob("Monk-1"), 
  "Monk-1-5..class" |> str("CounterTask"), 
  "Monk-1-5..label" |> label(ob("Monk-1"), 5), 
  "Monk-1-5..method" |> str("execute"), 
  "Monk-1-5.caller" |> ob("Monk-1"), 
  "Monk-1-5.kill" |> bool(false), 
  "Monk-1-50..class" |> str("TaskQueue"), 
  "Monk-1-50..label" |> label(ob("Monk-1"), 50), 
  "Monk-1-50..method" |> str("dequeueTask"), 
  "Monk-1-50.caller" |> ob("Monk-1"), 
  "Monk-1-50.task" |> ob("CounterTask-8"), 
  "Monk-1-51..class" |> str("Counter"), 
  "Monk-1-51..label" |> label(ob("Monk-1"), 51), 
  "Monk-1-51..method" |> str("inc"), 
  "Monk-1-51.caller" |> ob("Monk-1"), 
  "Monk-1-52..class" |> str("CounterTask"), 
  "Monk-1-52..label" |> label(ob("Monk-1"), 52), 
  "Monk-1-52..method" |> str("getId"), 
  "Monk-1-52.caller" |> ob("Monk-1"), 
  "Monk-1-52.id" |> int(8), 
  "Monk-1-53..class" |> str("CounterTask"), 
  "Monk-1-53..label" |> label(ob("Monk-1"), 53), 
  "Monk-1-53..method" |> str("execute"), 
  "Monk-1-53.caller" |> ob("Monk-1"), 
  "Monk-1-53.kill" |> bool(false), 
  "Monk-1-54..class" |> str("Counter"), 
  "Monk-1-54..label" |> label(ob("Monk-1"), 54), 
  "Monk-1-54..method" |> str("dec"), 
  "Monk-1-54.caller" |> ob("Monk-1"), 
  "Monk-1-55..class" |> str("Monk"), 
  "Monk-1-55..label" |> label(ob("Monk-1"), 55), 
  "Monk-1-55..method" |> str("run"), 
  "Monk-1-55.caller" |> ob("Monk-1"), 
  "Monk-1-56..class" |> str("TaskQueue"), 
  "Monk-1-56..label" |> label(ob("Monk-1"), 56), 
  "Monk-1-56..method" |> str("dequeueTask"), 
  "Monk-1-56.caller" |> ob("Monk-1"), 
  "Monk-1-56.task" |> ob("CounterTask-9"), 
  "Monk-1-57..class" |> str("Counter"), 
  "Monk-1-57..label" |> label(ob("Monk-1"), 57), 
  "Monk-1-57..method" |> str("inc"), 
  "Monk-1-57.caller" |> ob("Monk-1"), 
  "Monk-1-58..class" |> str("CounterTask"), 
  "Monk-1-58..label" |> label(ob("Monk-1"), 58), 
  "Monk-1-58..method" |> str("getId"), 
  "Monk-1-58.caller" |> ob("Monk-1"), 
  "Monk-1-58.id" |> int(9), 
  "Monk-1-59..class" |> str("CounterTask"), 
  "Monk-1-59..label" |> label(ob("Monk-1"), 59), 
  "Monk-1-59..method" |> str("execute"), 
  "Monk-1-59.caller" |> ob("Monk-1"), 
  "Monk-1-59.kill" |> bool(false), 
  "Monk-1-6..class" |> str("Counter"), 
  "Monk-1-6..label" |> label(ob("Monk-1"), 6), 
  "Monk-1-6..method" |> str("dec"), 
  "Monk-1-6.caller" |> ob("Monk-1"), 
  "Monk-1-60..class" |> str("Counter"), 
  "Monk-1-60..label" |> label(ob("Monk-1"), 60), 
  "Monk-1-60..method" |> str("dec"), 
  "Monk-1-60.caller" |> ob("Monk-1"), 
  "Monk-1-61..class" |> str("Monk"), 
  "Monk-1-61..label" |> label(ob("Monk-1"), 61), 
  "Monk-1-61..method" |> str("run"), 
  "Monk-1-61.caller" |> ob("Monk-1"), 
  "Monk-1-62..class" |> str("TaskQueue"), 
  "Monk-1-62..label" |> label(ob("Monk-1"), 62), 
  "Monk-1-62..method" |> str("dequeueTask"), 
  "Monk-1-62.caller" |> ob("Monk-1"), 
  "Monk-1-7..class" |> str("Monk"), 
  "Monk-1-7..label" |> label(ob("Monk-1"), 7), 
  "Monk-1-7..method" |> str("run"), 
  "Monk-1-7.caller" |> ob("Monk-1"), 
  "Monk-1-8..class" |> str("TaskQueue"), 
  "Monk-1-8..label" |> label(ob("Monk-1"), 8), 
  "Monk-1-8..method" |> str("dequeueTask"), 
  "Monk-1-8.caller" |> ob("Monk-1"), 
  "Monk-1-8.task" |> ob("CounterTask-1"), 
  "Monk-1-9..class" |> str("Counter"), 
  "Monk-1-9..label" |> label(ob("Monk-1"), 9), 
  "Monk-1-9..method" |> str("inc"), 
  "Monk-1-9.caller" |> ob("Monk-1"), 
  "Monk-1.busyCounter" |> ob("Counter-3"), 
  "Monk-1.kill" |> bool(false), 
  "Monk-1.queue" |> ob("TaskQueue-0"), 
  "Monk-1.task" |> ob("CounterTask-9"), 
  "Monk-1.taskHistory" |> list(int(0) :: int(1) :: int(2) :: int(3) :: int(4)
    :: int(5) :: int(6) :: int(7) :: int(8) :: int(9)), 
  "Monk-1.taskId" |> int(9), 
  "Monk-1.this" |> ob("Monk-1"), 
  "Monk-1.threadCounter" |> ob("Counter-2"), 
  "ShepherdTask-0-0..class" |> str("ShepherdTask"), 
  "ShepherdTask-0-0..label" |> label(ob("ShepherdTask-0"), 0), 
  "ShepherdTask-0-0..method" |> str("init"), 
  "ShepherdTask-0-0.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-1..class" |> str("Counter"), 
  "ShepherdTask-0-1..label" |> label(ob("ShepherdTask-0"), 1), 
  "ShepherdTask-0-1..method" |> str("registerObserver"), 
  "ShepherdTask-0-1.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-1.token" |> str("tasks"), 
  "ShepherdTask-0-2..class" |> str("Counter"), 
  "ShepherdTask-0-2..label" |> label(ob("ShepherdTask-0"), 2), 
  "ShepherdTask-0-2..method" |> str("registerObserver"), 
  "ShepherdTask-0-2.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-2.token" |> str("threads"), 
  "ShepherdTask-0-3..class" |> str("Counter"), 
  "ShepherdTask-0-3..label" |> label(ob("ShepherdTask-0"), 3), 
  "ShepherdTask-0-3..method" |> str("registerObserver"), 
  "ShepherdTask-0-3.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-3.token" |> str("busythreads"), 
  "ShepherdTask-0-4..class" |> str("Counter"), 
  "ShepherdTask-0-4..label" |> label(ob("ShepherdTask-0"), 4), 
  "ShepherdTask-0-4..method" |> str("value"), 
  "ShepherdTask-0-4.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-4.val" |> int(2), 
  "ShepherdTask-0-5..class" |> str("Counter"), 
  "ShepherdTask-0-5..label" |> label(ob("ShepherdTask-0"), 5), 
  "ShepherdTask-0-5..method" |> str("value"), 
  "ShepherdTask-0-5.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-5.val" |> int(0), 
  "ShepherdTask-0-6..class" |> str("ShepherdTask"), 
  "ShepherdTask-0-6..label" |> label(ob("ShepherdTask-0"), 6), 
  "ShepherdTask-0-6..method" |> str("run"), 
  "ShepherdTask-0-6.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-7..class" |> str("ShepherdTask"), 
  "ShepherdTask-0-7..label" |> label(ob("ShepherdTask-0"), 7), 
  "ShepherdTask-0-7..method" |> str("createThreads"), 
  "ShepherdTask-0-7.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-7.idlethreads" |> int(1), 
  "ShepherdTask-0-8..class" |> str("ShepherdTask"), 
  "ShepherdTask-0-8..label" |> label(ob("ShepherdTask-0"), 8), 
  "ShepherdTask-0-8..method" |> str("killThreads"), 
  "ShepherdTask-0-8.caller" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0-8.idlethreads" |> int(1), 
  "ShepherdTask-0.busyCounter" |> ob("Counter-3"), 
  "ShepherdTask-0.busythreads" |> int(1), 
  "ShepherdTask-0.maxt" |> "+"("Main-0.maxthreads_init" :: int(1)), 
  "ShepherdTask-0.maxthreads" |> "Main-0.maxthreads_init", 
  "ShepherdTask-0.mrate" |> int(5), 
  "ShepherdTask-0.taskCounter" |> ob("Counter-1"), 
  "ShepherdTask-0.taskId" |> int(1), 
  "ShepherdTask-0.taskQueue" |> ob("TaskQueue-0"), 
  "ShepherdTask-0.tasks" |> int(0), 
  "ShepherdTask-0.this" |> ob("ShepherdTask-0"), 
  "ShepherdTask-0.threadCounter" |> ob("Counter-2"), 
  "ShepherdTask-0.threadpool" |> ob("Abbey-0"), 
  "ShepherdTask-0.threads" |> int(2), 
  "TaskQueue-0-0..class" |> str("TaskQueue"), 
  "TaskQueue-0-0..label" |> label(ob("TaskQueue-0"), 0), 
  "TaskQueue-0-0..method" |> str("init"), 
  "TaskQueue-0-0.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-1..class" |> str("TaskQueue"), 
  "TaskQueue-0-1..label" |> label(ob("TaskQueue-0"), 1), 
  "TaskQueue-0-1..method" |> str("run"), 
  "TaskQueue-0-1.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-10..class" |> str("Counter"), 
  "TaskQueue-0-10..label" |> label(ob("TaskQueue-0"), 10), 
  "TaskQueue-0-10..method" |> str("inc"), 
  "TaskQueue-0-10.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-11..class" |> str("Counter"), 
  "TaskQueue-0-11..label" |> label(ob("TaskQueue-0"), 11), 
  "TaskQueue-0-11..method" |> str("inc"), 
  "TaskQueue-0-11.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-12..class" |> str("Counter"), 
  "TaskQueue-0-12..label" |> label(ob("TaskQueue-0"), 12), 
  "TaskQueue-0-12..method" |> str("inc"), 
  "TaskQueue-0-12.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-13..class" |> str("Counter"), 
  "TaskQueue-0-13..label" |> label(ob("TaskQueue-0"), 13), 
  "TaskQueue-0-13..method" |> str("dec"), 
  "TaskQueue-0-13.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-14..class" |> str("Counter"), 
  "TaskQueue-0-14..label" |> label(ob("TaskQueue-0"), 14), 
  "TaskQueue-0-14..method" |> str("inc"), 
  "TaskQueue-0-14.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-15..class" |> str("Counter"), 
  "TaskQueue-0-15..label" |> label(ob("TaskQueue-0"), 15), 
  "TaskQueue-0-15..method" |> str("inc"), 
  "TaskQueue-0-15.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-16..class" |> str("Counter"), 
  "TaskQueue-0-16..label" |> label(ob("TaskQueue-0"), 16), 
  "TaskQueue-0-16..method" |> str("inc"), 
  "TaskQueue-0-16.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-17..class" |> str("Counter"), 
  "TaskQueue-0-17..label" |> label(ob("TaskQueue-0"), 17), 
  "TaskQueue-0-17..method" |> str("dec"), 
  "TaskQueue-0-17.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-18..class" |> str("Counter"), 
  "TaskQueue-0-18..label" |> label(ob("TaskQueue-0"), 18), 
  "TaskQueue-0-18..method" |> str("dec"), 
  "TaskQueue-0-18.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-19..class" |> str("Counter"), 
  "TaskQueue-0-19..label" |> label(ob("TaskQueue-0"), 19), 
  "TaskQueue-0-19..method" |> str("dec"), 
  "TaskQueue-0-19.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-2..class" |> str("Counter"), 
  "TaskQueue-0-2..label" |> label(ob("TaskQueue-0"), 2), 
  "TaskQueue-0-2..method" |> str("inc"), 
  "TaskQueue-0-2.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-20..class" |> str("Counter"), 
  "TaskQueue-0-20..label" |> label(ob("TaskQueue-0"), 20), 
  "TaskQueue-0-20..method" |> str("dec"), 
  "TaskQueue-0-20.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-21..class" |> str("Counter"), 
  "TaskQueue-0-21..label" |> label(ob("TaskQueue-0"), 21), 
  "TaskQueue-0-21..method" |> str("dec"), 
  "TaskQueue-0-21.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-22..class" |> str("Counter"), 
  "TaskQueue-0-22..label" |> label(ob("TaskQueue-0"), 22), 
  "TaskQueue-0-22..method" |> str("dec"), 
  "TaskQueue-0-22.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-23..class" |> str("Counter"), 
  "TaskQueue-0-23..label" |> label(ob("TaskQueue-0"), 23), 
  "TaskQueue-0-23..method" |> str("dec"), 
  "TaskQueue-0-23.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-3..class" |> str("Counter"), 
  "TaskQueue-0-3..label" |> label(ob("TaskQueue-0"), 3), 
  "TaskQueue-0-3..method" |> str("dec"), 
  "TaskQueue-0-3.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-4..class" |> str("Counter"), 
  "TaskQueue-0-4..label" |> label(ob("TaskQueue-0"), 4), 
  "TaskQueue-0-4..method" |> str("inc"), 
  "TaskQueue-0-4.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-5..class" |> str("Counter"), 
  "TaskQueue-0-5..label" |> label(ob("TaskQueue-0"), 5), 
  "TaskQueue-0-5..method" |> str("dec"), 
  "TaskQueue-0-5.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-6..class" |> str("Counter"), 
  "TaskQueue-0-6..label" |> label(ob("TaskQueue-0"), 6), 
  "TaskQueue-0-6..method" |> str("inc"), 
  "TaskQueue-0-6.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-7..class" |> str("Counter"), 
  "TaskQueue-0-7..label" |> label(ob("TaskQueue-0"), 7), 
  "TaskQueue-0-7..method" |> str("inc"), 
  "TaskQueue-0-7.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-8..class" |> str("Counter"), 
  "TaskQueue-0-8..label" |> label(ob("TaskQueue-0"), 8), 
  "TaskQueue-0-8..method" |> str("inc"), 
  "TaskQueue-0-8.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0-9..class" |> str("Counter"), 
  "TaskQueue-0-9..label" |> label(ob("TaskQueue-0"), 9), 
  "TaskQueue-0-9..method" |> str("dec"), 
  "TaskQueue-0-9.caller" |> ob("TaskQueue-0"), 
  "TaskQueue-0.taskCounter" |> ob("Counter-1"), 
  "TaskQueue-0.tasks" |> list(emp), 
  "TaskQueue-0.this" |> ob("TaskQueue-0"), 
  "nolabel.var" |> ob("Main-0") | 
  "Abbey-0-11" |> list("Abbey-0-0.shepherd"), 
  "Abbey-0-12" |> list("Abbey-0-11.task"), 
  "Abbey-0-14" |> list("Main-0-5.task"), 
  "Abbey-0-15" |> list("Main-0-7.task"), 
  "Abbey-0-16" |> list("Main-0-9.task"), 
  "Abbey-0-17" |> list("Main-0-11.task"), 
  "Abbey-0-18" |> list("Main-0-13.task"), 
  "Abbey-0-19" |> list("Main-0-15.task"), 
  "Abbey-0-20" |> list("Main-0-17.task"), 
  "Abbey-0-21" |> list("Main-0-19.task"), 
  "Abbey-0-22" |> list("Main-0-21.task"), 
  "Abbey-0-23" |> list("Main-0-23.task"), 
  "Abbey-0-4" |> list("Abbey-0.taskCounter"), 
  "Abbey-0-5" |> list(int(1) :: "Abbey-0.taskCounter" ::
    "Abbey-0.threadCounter" :: "Abbey-0.busyCounter" :: "Abbey-0.maxNofThreads"
    :: "Abbey-0-0.mrate" :: "Abbey-0.taskQueue" :: "Abbey-0.this"), 
  "Abbey-0-6" |> list("Abbey-0.size"), 
  "Abbey-0-7" |> list("Abbey-0.taskQueue" :: "Abbey-0.busyCounter" ::
    "Abbey-0.threadCounter"), 
  "Abbey-0-9" |> list("Abbey-0.taskQueue" :: "Abbey-0.busyCounter" ::
    "Abbey-0.threadCounter"), 
  "Counter-1-11" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-13" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-15" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-17" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-19" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-21" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-23" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-25" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-27" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-29" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-3" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-31" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-33" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-35" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-37" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-39" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-41" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-43" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-45" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-5" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-7" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-1-9" |> list("Counter-1.observertoken" :: "Counter-1.value"), 
  "Counter-3-11" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-13" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-15" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-17" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-19" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-21" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-23" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-25" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-27" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-29" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-3" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-31" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-33" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-35" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-37" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-39" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-41" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-43" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-5" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-7" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Counter-3-9" |> list("Counter-3.observertoken" :: "Counter-3.value"), 
  "Main-0-1" |> list("Main-0.nthreads_init" :: "Main-0.maxthreads_init"), 
  "Main-0-10" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-11" |> list("Main-0-3.task"), 
  "Main-0-12" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-13" |> list("Main-0-3.task"), 
  "Main-0-14" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-15" |> list("Main-0-3.task"), 
  "Main-0-16" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-17" |> list("Main-0-3.task"), 
  "Main-0-18" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-19" |> list("Main-0-3.task"), 
  "Main-0-20" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-21" |> list("Main-0-3.task"), 
  "Main-0-22" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-23" |> list("Main-0-3.task"), 
  "Main-0-4" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-5" |> list("Main-0-3.task"), 
  "Main-0-6" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-7" |> list("Main-0-3.task"), 
  "Main-0-8" |> list("Main-0-3.i" :: "Main-0.executionCounter"), 
  "Main-0-9" |> list("Main-0-3.task"), 
  "ShepherdTask-0-1" |> list(str("tasks")), 
  "ShepherdTask-0-2" |> list(str("threads")), 
  "ShepherdTask-0-3" |> list(str("busythreads")), 
  "main-0" |> list(int(2) :: int(1)), 
  "returnMonk-0-2" |> list("Monk-0-2.task"), 
  "returnMonk-0-4" |> list("Monk-0-4.id"), 
  "returnMonk-1-10" |> list("Monk-1-10.id"), 
  "returnMonk-1-11" |> list("Monk-1-11.kill"), 
  "returnMonk-1-14" |> list("Monk-1-14.task"), 
  "returnMonk-1-16" |> list("Monk-1-16.id"), 
  "returnMonk-1-17" |> list("Monk-1-17.kill"), 
  "returnMonk-1-2" |> list("Monk-1-2.task"), 
  "returnMonk-1-20" |> list("Monk-1-20.task"), 
  "returnMonk-1-22" |> list("Monk-1-22.id"), 
  "returnMonk-1-23" |> list("Monk-1-23.kill"), 
  "returnMonk-1-26" |> list("Monk-1-26.task"), 
  "returnMonk-1-28" |> list("Monk-1-28.id"), 
  "returnMonk-1-29" |> list("Monk-1-29.kill"), 
  "returnMonk-1-32" |> list("Monk-1-32.task"), 
  "returnMonk-1-34" |> list("Monk-1-34.id"), 
  "returnMonk-1-35" |> list("Monk-1-35.kill"), 
  "returnMonk-1-38" |> list("Monk-1-38.task"), 
  "returnMonk-1-4" |> list("Monk-1-4.id"), 
  "returnMonk-1-40" |> list("Monk-1-40.id"), 
  "returnMonk-1-41" |> list("Monk-1-41.kill"), 
  "returnMonk-1-44" |> list("Monk-1-44.task"), 
  "returnMonk-1-46" |> list("Monk-1-46.id"), 
  "returnMonk-1-47" |> list("Monk-1-47.kill"), 
  "returnMonk-1-5" |> list("Monk-1-5.kill"), 
  "returnMonk-1-50" |> list("Monk-1-50.task"), 
  "returnMonk-1-52" |> list("Monk-1-52.id"), 
  "returnMonk-1-53" |> list("Monk-1-53.kill"), 
  "returnMonk-1-56" |> list("Monk-1-56.task"), 
  "returnMonk-1-58" |> list("Monk-1-58.id"), 
  "returnMonk-1-59" |> list("Monk-1-59.kill"), 
  "returnMonk-1-8" |> list("Monk-1-8.task"), 
  "returnShepherdTask-0-4" |> list("ShepherdTask-0-4.val"), 
  "returnShepherdTask-0-5" |> list("ShepherdTask-0-5.val")}Att: noSubst Label:
    "lastrun" >
}
Bye.
