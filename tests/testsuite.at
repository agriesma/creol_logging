dnl Makefile.am - Use automake to create Makefile.in
dnl
dnl This file is part of creoltools
dnl
dnl Written and Copyright (c) 2007 by Marcel Kyas
dnl
dnl This program is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU General Public License as
dnl published by the Free Software Foundation; either version 3 of the
dnl License, or (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.
dnl

m4_include(macros.at)

AT_INIT([creolc])
AT_TESTED([creolc])

AT_SETUP([Datatypes])
TEST_MAUDE([Datatypes], ${abs_srcdir}/Datatypes.maude, [.])
AT_CLEANUP

AT_SETUP([Signature])
TEST_MAUDE([Signature], ${abs_builddir}/Signature.maude, [.])
AT_CLEANUP

AT_SETUP([Interpreter])
TEST_MAUDE([Interpreter], ${abs_srcdir}/Interpreter.maude, [.])
AT_CLEANUP

AT_SETUP([Logging])
TEST_LOGGING([Hello], [rew [[100]] main(classes, "Hello", emp) . 
])
TEST_LOGGING([Simple], [rew main(classes, "Hello", int(2) ) . 
])
TEST_LOGGING([Simple2], [rew main(classes, "Hello", int(2) ) . 
])
TEST_LOGGING([Simple3], [rew main(classes, "Hello", int(2) ) . 
])
TEST_MAUDE([Transitions], ${abs_srcdir}/simulation/Transitions.maude, [simulation])
TEST_MAUDE([passparams], ${abs_srcdir}/simulation/passparams.maude, [simulation])
TEST_LOGGING([program], [rew [[6000]] main(classes, "Main", int(2) :: int(1) ) .
])
AT_CLEANUP

AT_SETUP([MetaExec])
TEST_MAUDE([MetaExec], ${abs_srcdir}/MetaExec.maude, [.])
AT_CLEANUP

AT_SETUP([model-checker])
TEST_MAUDE([ModelChecker], ${abs_srcdir}/modelchecker/ModelChecker.maude,
	   [modelchecker])
AT_CLEANUP

AT_SETUP([PrettyPrinter])
TEST_CREOLC_PP([Float], [language])
TEST_CREOLC_PP([Pair], [language])
TEST_CREOLC_PP([Inheritance], [language])
TEST_CREOLC_PP([Diamond], [language])
TEST_CREOLC_PP([Map], [language])
TEST_CREOLC_PP([MultiCast], [language])
TEST_CREOLC_PP([MutRec], [language])
TEST_CREOLC_PP([MutRec2], [language])
dnl TEST_CREOLC_PP([Interleave], [language])
TEST_CREOLC_PP([ReleaseWeirdness], [language])
TEST_CREOLC_PP([StackCheck], [language])
TEST_CREOLC_PP([StackGarbage], [language])
TEST_CREOLC_PP([While], [language])
TEST_CREOLC_PP([Alarmclock], [examples])
TEST_CREOLC_PP([AsyncLCR], [examples])
TEST_CREOLC_PP([PetersonLeader], [examples])
TEST_CREOLC_PP([AsyncSieveBuggy], [examples])
TEST_CREOLC_PP([AsyncSieve], [examples])
TEST_CREOLC_PP([BoundedBuffer], [examples])
TEST_CREOLC_PP([Buffer], [examples])
TEST_CREOLC_PP([CallAll], [examples])
TEST_CREOLC_PP([Hello], [examples])
TEST_CREOLC_PP([HollywoodBuffer], [examples])
TEST_CREOLC_PP([Sieve], [examples])
TEST_CREOLC_PP([Fibonacci], [examples])
TEST_CREOLC_PP([PeerToPeer], [examples])
TEST_CREOLC_PP([Philosophers], [examples])
TEST_CREOLC_PP([SantaClaus], [examples])
TEST_CREOLC_PP([SingleCellBuffer], [examples])
TEST_CREOLC_PP([MC3Phil], [modelchecker])
TEST_CREOLC_PP([MC4Phil], [modelchecker])
TEST_CREOLC_PP([MC5Phil], [modelchecker])
AT_CLEANUP

AT_SETUP([XML-output])
TEST_CREOLC_XML([Float], [language])
TEST_CREOLC_XML([Pair], [language])
TEST_CREOLC_XML([Inheritance], [language])
TEST_CREOLC_XML([Diamond], [language])
TEST_CREOLC_XML([Map], [language])
TEST_CREOLC_XML([MultiCast], [language])
TEST_CREOLC_XML([MutRec], [language])
TEST_CREOLC_XML([MutRec2], [language])
dnl TEST_CREOLC_XML([Interleave], [language])
TEST_CREOLC_XML([ReleaseWeirdness], [language])
TEST_CREOLC_XML([StackCheck], [language])
TEST_CREOLC_XML([StackGarbage], [language])
TEST_CREOLC_XML([While], [language])
TEST_CREOLC_XML([Alarmclock], [examples])
TEST_CREOLC_XML([AsyncLCR], [examples])
TEST_CREOLC_XML([PetersonLeader], [examples])
TEST_CREOLC_XML([AsyncSieveBuggy], [examples])
TEST_CREOLC_XML([AsyncSieve], [examples])
TEST_CREOLC_XML([BoundedBuffer], [examples])
TEST_CREOLC_XML([Buffer], [examples])
TEST_CREOLC_XML([CallAll], [examples])
TEST_CREOLC_XML([Hello], [examples])
TEST_CREOLC_XML([HollywoodBuffer], [examples])
TEST_CREOLC_XML([Sieve], [examples])
TEST_CREOLC_XML([Fibonacci], [examples])
TEST_CREOLC_XML([PeerToPeer], [examples])
TEST_CREOLC_XML([Philosophers], [examples])
TEST_CREOLC_XML([SantaClaus], [examples])
TEST_CREOLC_XML([SingleCellBuffer], [examples])
TEST_CREOLC_XML([MC3Phil], [modelchecker])
TEST_CREOLC_XML([MC4Phil], [modelchecker])
TEST_CREOLC_XML([MC5Phil], [modelchecker])
AT_CLEANUP

dnl Test the prelude.  Currently, we only try to parse and pretty-print it.
AT_SETUP([Prelude])
AT_CHECK([${CREOLC} -T creol -o prelude-pp1.creol ${top_srcdir}/share/prelude.creol])
AT_CHECK([${CREOLC} -T creol -o prelude-pp2.creol prelude-pp1.creol])
DIFF([prelude-pp1.creol], [prelude-pp2.creol])
AT_CHECK([if $WITH_XML
then
    ${CREOLC} -T xml -o prelude-pass1.xml ${top_srcdir}/share/prelude.creol
fi])
AT_CLEANUP

TEST_CREOLC([Float], [language], [dnl
red classes .
rew main(classes, "Test", emp) .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Main", emp)), 0, 1) .
], [no])

TEST_CREOLC([Pair], [language], [dnl
red classes .
rew main(classes, "Test", emp) .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Main", emp)), 0, 1) .
], [no])

TEST_CREOLC([Map], [language], [dnl
red classes .
rew main(classes, "Map", emp) .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Map", emp)), 0, 1) .
], [no])

TEST_CREOLC([Inheritance], [language], [dnl
red classes .
rew main(classes, "B", int(1)) .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "B", int(1))), 0, 1) .
], [no])

TEST_CREOLC([Diamond], [language], [dnl
red classes .
rew main(classes, "D", emp) .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "D", emp)), 0, 1) .
], [no])

TEST_CREOLC([Deadlock], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Butler", emp)), 0, 1) .
])

TEST_CREOLC([MultiCast], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

TEST_CREOLC([MutRec], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

TEST_CREOLC([MutRec2], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

dnl TEST_CREOLC([Interleave], [language], [dnl
dnl red classes .
dnl ],[dnl
dnl red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
dnl ])
dnl 
TEST_CREOLC([ReleaseWeirdness], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

TEST_CREOLC([StackCheck], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

TEST_CREOLC([StackGarbage], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

TEST_CREOLC([While], [language], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Test", emp)), 0, 1) .
])

dnl This set of tests is testing our existing programs.
dnl

TEST_CREOLC([Alarmclock], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Alarmclock", emp)), 0, 1) .
])

TEST_CREOLC([AsyncLCR], [examples], [dnl
red classes .
rew main(classes, "Init", emp) .
],[
red simulate('PROGRAM, upTerm(main(classes, "Init", emp)), 0, 1) .
], [no])

TEST_CREOLC([PetersonLeader], [examples], [dnl
red classes .
rew main(classes, "Main", emp) .
],[
red simulate('PROGRAM, upTerm(main(classes, "Main", emp)), 0, 1) .
], [no])

TEST_CREOLC([AsyncSieveBuggy], [examples], [dnl
red classes .

*** Shows the bug.
***
*** This test needs about 70 seconds and about 410 MiB memory.
*** Therefore, it is disabled at the user installation.
***
*** The model checker will find the bug in a second.
***
*** search [[1, 62]] in PROGRAM : main(classes, "Generator", emp) =>+
***  < O:Oid : "Sieve" | Att: A:Subst, "p" |-> int(9), Pr:
***                      L:Subst, SL:StmList, PrQ: W:MProc, Lcnt: N:Nat >
***  conf:Configuration .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Generator", emp)), 0, 1) .
])

TEST_CREOLC([AsyncSieve], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Generator", emp)), 0, 1) .
])

TEST_CREOLC([CallAll], [examples], [dnl
red classes .
],[
red simulate('PROGRAM, upTerm(main(classes, "CallAll", emp)), 0, 1) .
])

TEST_CREOLC([Hello], [examples], [dnl
red classes .
rew main(classes, "Hello", emp) .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Hello", emp)), 0, 1) .
])

TEST_CREOLC([Sieve], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Generator", emp)), 0, 1) .
])

TEST_CREOLC([Philosophers], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Butler", emp)), 0, 1) .
])

TEST_CREOLC([SingleCellBuffer], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Main", emp)), 0, 1) .
])

TEST_CREOLC([Buffer], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Main", emp)), 0, 1) .
])

TEST_CREOLC([BoundedBuffer], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Starter", emp)), 0, 1) .
])

TEST_CREOLC([HollywoodBuffer], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Main", emp)), 0, 1) .
])

TEST_CREOLC([Fibonacci], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Fibonacci", int(6))), 0, 1) .
])

TEST_CREOLC([SantaClaus], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Christmas", emp)), 0, 1) .
])

TEST_CREOLC([PeerToPeer], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Christmas", emp)), 0, 1) .
])

TEST_CREOLC([DiscreteTimeout], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "DiscreteTimeout", emp)), 0, 1) .
])

TEST_CREOLC([Sensors], [examples], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Network", emp)), 0, 1) .
])

TEST_CREOLMC([MC3Phil], [modelchecker], [dnl
red classes .
],[dnl
red simulate('PROGRAM, upTerm(main(classes, "Butler", emp)), 0, 1) .
])

dnl Test the CMC validator.
m4_include(cmcvalid.at)

dnl test cases for the parser.
TEST_CREOLC_SYNTAX([AttrDecl])

TEST_CREOLC_SYNTAX([StrayChar],
[[StrayChar.creol:22: syntax error
]])

TEST_CREOLC_SYNTAX([MissingEnd],
[[MissingEnd.creol:30: syntax error in method body
]])

TEST_CREOLC_SYNTAX([MissingEnd2],
[[MissingEnd2.creol:30: syntax error in else block
]])

TEST_CREOLC_SYNTAX([MissingEnd3],
[[MissingEnd3.creol:28: syntax error in if statement
]])

TEST_CREOLC_SYNTAX([MissingEnd4],
[[MissingEnd4.creol:29: syntax error in while statement
]])

TEST_CREOLC_SYNTAX([MissingEnd5],
[[MissingEnd5.creol:29: syntax error in if statement
]])


dnl test cases for the type checker
TEST_CREOLC_TYPECHECK([Nat],
[[Nat.creol:22: type Nat of attribute x does not exist
]])

TEST_CREOLC_TYPECHECK([Nat2],
[[Nat2.creol:22: type Nat of class parameter x does not exist
]])

TEST_CREOLC_TYPECHECK([Nat3],
[[Nat3.creol:22: type Nat of input parameter x does not exist
]])

TEST_CREOLC_TYPECHECK([Nat4],
[[Nat4.creol:22: type Nat of output parameter x does not exist
]])

TEST_CREOLC_TYPECHECK([Nil], [], [])

TEST_CREOLC_TYPECHECK([Nil2], [], [])

TEST_CREOLC_TYPECHECK([Nil3], [], [])

TEST_CREOLC_TYPECHECK([Set], [], [])

TEST_CREOLC_TYPECHECK([Set2], [], [])
TEST_CREOLC_TYPECHECK([Set3], [], [])
TEST_CREOLC_TYPECHECK([Set4], [], [])
TEST_CREOLC_TYPECHECK([Set5],
[[Set5.creol:26: Type mismatch in assignment: Expected Set[Int] but got Set[Bool]
]], [])

TEST_CREOLC_TYPECHECK([Set6],
[[Set6.creol:26: Type mismatch in assignment: Expected Set[Set[Int]] but got Set[Set[String]]
]], [])

TEST_CREOLC_TYPECHECK([Set7],
[[Set7.creol:26: Type mismatch in assignment: Expected Set[Int] but got Set[Data]
]], [])

TEST_CREOLC_TYPECHECK([Map], [], [])

TEST_CREOLC_TYPECHECK([Map2], [], [])

TEST_CREOLC_TYPECHECK([Map3],
[[Map3.creol:26: Type mismatch in assignment: Expected Map[Data, Int] but got Map[String, String]
]], [])

TEST_CREOLC_TYPECHECK([Map4], [], [])

TEST_CREOLC_TYPECHECK([ExprFailure],
[[ExprFailure.creol:24: expression has type [[String, Int] -> `_0] but expected is type \/ [[[Float, Float] -> Float], [[Int, Int] -> Int], [[Time, Duration] -> Time], [[Duration, Duration] -> Duration]]
  Cannot satisfy constraints: [[String, Int] -> `_0] <: \/ [[[Float, Float] -> Float], [[Int, Int] -> Int], [[Time, Duration] -> Time], [[Duration, Duration] -> Duration]]
]])
TEST_CREOLC_TYPECHECK([Contracts],
[Contracts.creol:37: Class Bar does not contract interface Bar
])
TEST_CREOLC_TYPECHECK([If], [], [])

TEST_CREOLC_TYPECHECK([New], [], [])

TEST_CREOLC_TYPECHECK([New2], [], [])

TEST_CREOLC_TYPECHECK([New3],
[New3.creol:26: Arguments to new C mismatch in length
])

TEST_CREOLC_TYPECHECK([New4],
[New4.creol:26: Class E not defined
])

TEST_CREOLC_TYPECHECK([New5],
[[New5.creol:26: expression has type Bool but expected is type Int
  Cannot satisfy constraints: Bool <: Int
]])

TEST_CREOLC_TYPECHECK([New6], [], [])

TEST_CREOLC_TYPECHECK([Cyclic],
[*top*:0: subtype relation has a cycle: S <: U <: T <: S
])

TEST_CREOLC_TYPECHECK([CyclicClass],
[*top*:0: class hierarchy has a cycle: A <: B <: C <: A
])

TEST_CREOLC_TYPECHECK([Missing],
[[Missing.creol:27: Class Foo does not provide a method foo[ Any |  ->  ] declared in interface Foo
]])

TEST_CREOLC_TYPECHECK([Missing2],
[[Missing2.creol:32: Class Foo does not provide a method foo[ Any |  ->  ] declared in interface Foo
]])

TEST_CREOLC_TYPECHECK([Missing3], [])

TEST_CREOLC_TYPECHECK([Ambiguous],
[[Ambiguous.creol:34: Call to method m of I is ambigous:
    I::m[ J |  ->  ]
    I::m[ K |  ->  ]
]])
TEST_CREOLC_TYPECHECK([Ambiguous2], [])
TEST_CREOLC_TYPECHECK([Ambiguous3],
[[Ambiguous3.creol:28: Call to method m of /\ [J, K] is ambigous:
    J::m[ J |  ->  ]
    K::m[ K |  ->  ]
]])
TEST_CREOLC_TYPECHECK([Ambiguous4], [])
TEST_CREOLC_TYPECHECK([Ambiguous5], [])
TEST_CREOLC_TYPECHECK([Ambiguous6],
[[Ambiguous6.creol:32: Call to method m of /\ [J, K] is ambigous:
    J::m[ J |  ->  ]
    K::m[ K |  ->  ]
]])
TEST_CREOLC_TYPECHECK([Ambiguous7],
[[Ambiguous7.creol:32: Call to method m of K is ambigous:
    K::m[ J |  ->  ]
    K::m[ K |  ->  ]
]])
TEST_CREOLC_TYPECHECK([Ambiguous8], [])

dnl Test PASS: devirt
dnl
TEST_CREOLC_PASS([devirt], [Devirt])

dnl Test PASS: into-ssa
dnl
TEST_CREOLC_PASS([into-ssa], [Assign])

dnl Test PASS: split-add
dnl
TEST_CREOLC_PASS([split-ass], [Assign])

dnl Test PASS: bury
dnl
TEST_CREOLC_PASS([bury], [Assign])
TEST_CREOLC_PASS([bury], [If])

dnl Test PASS: free
dnl
TEST_CREOLC_PASS([free], [Async])
TEST_CREOLC_PASS([free], [AsyncAwait])
TEST_CREOLC_PASS([free], [AsyncRepl])
TEST_CREOLC_PASS([free], [AsyncAwaitRepl])
TEST_CREOLC_PASS([free], [AsyncChoice])
TEST_CREOLC_PASS([free], [AsyncAnon])
TEST_CREOLC_PASS([free], [LocalAsync])
TEST_CREOLC_PASS([free], [If])
TEST_CREOLC_PASS([free], [Choice])

dnl Test PASS: tailcall
dnl
TEST_CREOLC_PASS([tailcall], [StaticTail])
TEST_CREOLC_PASS([tailcall], [Tailcall])
